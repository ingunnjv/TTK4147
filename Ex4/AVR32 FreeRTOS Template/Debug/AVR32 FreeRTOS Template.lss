
AVR32 FreeRTOS Template.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00003984  80002020  80002020  00002420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  80005a00  80005a00  00005e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  80005c00  80005c00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000164  80005c18  80005c18  00006018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000004  80005d7c  80005d7c  0000617c  2**0
                  ALLOC
  8 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  9 .ctors        00000008  00000008  80005d80  00006408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000010  80005d88  00006410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .jcr          00000004  00000018  80005d90  00006418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .got          00000000  0000001c  80005d94  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         000005d8  0000001c  80005d94  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00000430  00000610  00000610  00000000  2**2
                  ALLOC
 15 .heap         0000e5c0  00000a40  00000a40  00000000  2**0
                  ALLOC
 16 .comment      00000030  00000000  00000000  000069f4  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 00000cd8  00000000  00000000  00006a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_pubnames 000019b8  00000000  00000000  000076fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_info   00025b74  00000000  00000000  000090b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000047c2  00000000  00000000  0002ec28  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0000f040  00000000  00000000  000333ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  00001dc8  00000000  00000000  0004242c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00007de6  00000000  00000000  000441f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    00004421  00000000  00000000  0004bfda  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_macinfo 014adad4  00000000  00000000  000503fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 27 .debug_ranges 00000d60  00000000  00000000  014fdecf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf ff e0 	sub	pc,pc,-32

Disassembly of section .init:

80002004 <_init>:
80002004:	eb cd 40 40 	pushm	r6,lr
80002008:	48 26       	lddpc	r6,80002010 <_init+0xc>
8000200a:	1e 26       	rsub	r6,pc
8000200c:	c0 48       	rjmp	80002014 <_init+0x10>
8000200e:	d7 03       	nop
80002010:	80 00       	ld.sh	r0,r0[0x0]
80002012:	1f ee       	ld.ub	lr,pc[0x6]
80002014:	c5 ec       	rcall	800020d0 <frame_dummy>
80002016:	e0 a0 1c bb 	rcall	8000598c <__do_global_ctors_aux>
8000201a:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002020 <_stext>:
80002020:	30 07       	mov	r7,0
80002022:	49 5a       	lddpc	r10,80002074 <_stext+0x54>
80002024:	5b fa       	cp.w	r10,-1
80002026:	f4 0d 17 10 	movne	sp,r10
8000202a:	49 4b       	lddpc	r11,80002078 <_stext+0x58>
8000202c:	49 4c       	lddpc	r12,8000207c <_stext+0x5c>
8000202e:	18 3b       	cp.w	r11,r12
80002030:	c0 60       	breq	8000203c <_stext+0x1c>
80002032:	49 4a       	lddpc	r10,80002080 <_stext+0x60>
80002034:	b7 09       	ld.d	r8,r11++
80002036:	b9 28       	st.d	r12++,r8
80002038:	14 3c       	cp.w	r12,r10
8000203a:	cf d5       	brlt	80002034 <_stext+0x14>
8000203c:	49 2a       	lddpc	r10,80002084 <_stext+0x64>
8000203e:	49 1c       	lddpc	r12,80002080 <_stext+0x60>
80002040:	30 08       	mov	r8,0
80002042:	30 09       	mov	r9,0
80002044:	b9 28       	st.d	r12++,r8
80002046:	14 3c       	cp.w	r12,r10
80002048:	cf e5       	brlt	80002044 <_stext+0x24>
8000204a:	e0 a0 11 59 	rcall	800042fc <_init_startup>
8000204e:	fe cc c4 4e 	sub	r12,pc,-15282
80002052:	e0 a0 15 53 	rcall	80004af8 <atexit>
80002056:	cd 7f       	rcall	80002004 <_init>
80002058:	1a 9c       	mov	r12,sp
8000205a:	30 0b       	mov	r11,0
8000205c:	e0 a0 18 4a 	rcall	800050f0 <_init_argv>
80002060:	5b fc       	cp.w	r12,-1
80002062:	f9 bc 00 00 	moveq	r12,0
80002066:	f9 ba 00 00 	moveq	r10,0
8000206a:	14 1d       	sub	sp,r10
8000206c:	e0 a0 14 e6 	rcall	80004a38 <main>
80002070:	e0 a0 15 4c 	rcall	80004b08 <exit>
80002074:	00 01       	add	r1,r0
80002076:	00 00       	add	r0,r0
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	5d 80       	*unknown*
8000207c:	00 00       	add	r0,r0
8000207e:	00 08       	add	r8,r0
80002080:	00 00       	add	r0,r0
80002082:	05 f8       	ld.ub	r8,r2[0x7]
80002084:	00 00       	add	r0,r0
80002086:	0a 40       	or	r0,r5

80002088 <__do_global_dtors_aux>:
80002088:	d4 21       	pushm	r4-r7,lr
8000208a:	48 e8       	lddpc	r8,800020c0 <__do_global_dtors_aux+0x38>
8000208c:	11 89       	ld.ub	r9,r8[0x0]
8000208e:	30 08       	mov	r8,0
80002090:	f0 09 18 00 	cp.b	r9,r8
80002094:	c1 41       	brne	800020bc <__do_global_dtors_aux+0x34>
80002096:	48 c8       	lddpc	r8,800020c4 <__do_global_dtors_aux+0x3c>
80002098:	48 c6       	lddpc	r6,800020c8 <__do_global_dtors_aux+0x40>
8000209a:	10 95       	mov	r5,r8
8000209c:	10 16       	sub	r6,r8
8000209e:	48 c7       	lddpc	r7,800020cc <__do_global_dtors_aux+0x44>
800020a0:	a3 46       	asr	r6,0x2
800020a2:	20 16       	sub	r6,1
800020a4:	c0 68       	rjmp	800020b0 <__do_global_dtors_aux+0x28>
800020a6:	2f f8       	sub	r8,-1
800020a8:	8f 08       	st.w	r7[0x0],r8
800020aa:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020ae:	5d 18       	icall	r8
800020b0:	6e 08       	ld.w	r8,r7[0x0]
800020b2:	0c 38       	cp.w	r8,r6
800020b4:	cf 93       	brcs	800020a6 <__do_global_dtors_aux+0x1e>
800020b6:	30 19       	mov	r9,1
800020b8:	48 28       	lddpc	r8,800020c0 <__do_global_dtors_aux+0x38>
800020ba:	b0 89       	st.b	r8[0x0],r9
800020bc:	d8 22       	popm	r4-r7,pc
800020be:	d7 03       	nop
800020c0:	00 00       	add	r0,r0
800020c2:	06 10       	sub	r0,r3
800020c4:	00 00       	add	r0,r0
800020c6:	00 10       	sub	r0,r0
800020c8:	00 00       	add	r0,r0
800020ca:	00 14       	sub	r4,r0
800020cc:	00 00       	add	r0,r0
800020ce:	06 14       	sub	r4,r3

800020d0 <frame_dummy>:
800020d0:	d4 01       	pushm	lr
800020d2:	48 5c       	lddpc	r12,800020e4 <frame_dummy+0x14>
800020d4:	78 08       	ld.w	r8,r12[0x0]
800020d6:	58 08       	cp.w	r8,0
800020d8:	c0 50       	breq	800020e2 <frame_dummy+0x12>
800020da:	48 48       	lddpc	r8,800020e8 <frame_dummy+0x18>
800020dc:	58 08       	cp.w	r8,0
800020de:	c0 20       	breq	800020e2 <frame_dummy+0x12>
800020e0:	5d 18       	icall	r8
800020e2:	d8 02       	popm	pc
800020e4:	00 00       	add	r0,r0
800020e6:	00 18       	sub	r8,r0
800020e8:	00 00       	add	r0,r0
	...

800020ec <board_init>:
#endif



void board_init (void)
{
800020ec:	d4 01       	pushm	lr
    gpio_configure_pin (LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800020ee:	30 3b       	mov	r11,3
800020f0:	32 3c       	mov	r12,35
800020f2:	f0 1f 00 0a 	mcall	80002118 <board_init+0x2c>
    gpio_configure_pin (LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800020f6:	30 3b       	mov	r11,3
800020f8:	34 9c       	mov	r12,73
800020fa:	f0 1f 00 08 	mcall	80002118 <board_init+0x2c>
    gpio_configure_pin (LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800020fe:	30 3b       	mov	r11,3
80002100:	32 2c       	mov	r12,34
80002102:	f0 1f 00 06 	mcall	80002118 <board_init+0x2c>
    gpio_configure_pin (LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002106:	30 3b       	mov	r11,3
80002108:	32 6c       	mov	r12,38
8000210a:	f0 1f 00 04 	mcall	80002118 <board_init+0x2c>

    gpio_configure_pin (GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
8000210e:	30 4b       	mov	r11,4
80002110:	32 1c       	mov	r12,33
80002112:	f0 1f 00 02 	mcall	80002118 <board_init+0x2c>
     * the platform Xplained board has configured basic clock settings,
     * GPIO pin mapping, interrupt controller options, etc.
     */
    sensor_board_init ();
#endif
}
80002116:	d8 02       	popm	pc
80002118:	80 00       	ld.sh	r0,r0[0x0]
8000211a:	21 1c       	sub	r12,17

8000211c <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
8000211c:	f8 08 16 05 	lsr	r8,r12,0x5
80002120:	a9 68       	lsl	r8,0x8
80002122:	e0 28 f0 00 	sub	r8,61440
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002126:	16 99       	mov	r9,r11
80002128:	e2 19 00 04 	andl	r9,0x4,COH
8000212c:	c0 70       	breq	8000213a <gpio_configure_pin+0x1e>
            gpio_port->puers = 1 << (pin & 0x1F);
8000212e:	30 19       	mov	r9,1
80002130:	f2 0c 09 49 	lsl	r9,r9,r12
80002134:	f1 49 00 74 	st.w	r8[116],r9
80002138:	c0 68       	rjmp	80002144 <gpio_configure_pin+0x28>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
8000213a:	30 19       	mov	r9,1
8000213c:	f2 0c 09 49 	lsl	r9,r9,r12
80002140:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80002144:	16 99       	mov	r9,r11
80002146:	e2 19 00 80 	andl	r9,0x80,COH
8000214a:	c2 40       	breq	80002192 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
8000214c:	16 99       	mov	r9,r11
8000214e:	e2 19 01 80 	andl	r9,0x180,COH
80002152:	c0 90       	breq	80002164 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002154:	30 19       	mov	r9,1
80002156:	f2 0c 09 49 	lsl	r9,r9,r12
8000215a:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000215e:	f1 49 00 b8 	st.w	r8[184],r9
80002162:	c1 88       	rjmp	80002192 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_RISING)
80002164:	16 99       	mov	r9,r11
80002166:	e2 19 02 80 	andl	r9,0x280,COH
8000216a:	c0 90       	breq	8000217c <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
8000216c:	30 19       	mov	r9,1
8000216e:	f2 0c 09 49 	lsl	r9,r9,r12
80002172:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80002176:	f1 49 00 b8 	st.w	r8[184],r9
8000217a:	c0 c8       	rjmp	80002192 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
8000217c:	16 99       	mov	r9,r11
8000217e:	e2 19 03 80 	andl	r9,0x380,COH
80002182:	c0 80       	breq	80002192 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002184:	30 19       	mov	r9,1
80002186:	f2 0c 09 49 	lsl	r9,r9,r12
8000218a:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
8000218e:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80002192:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002196:	c1 50       	breq	800021c0 <gpio_configure_pin+0xa4>
            if (flags & GPIO_INIT_HIGH)
80002198:	e2 1b 00 02 	andl	r11,0x2,COH
8000219c:	c0 70       	breq	800021aa <gpio_configure_pin+0x8e>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
8000219e:	30 19       	mov	r9,1
800021a0:	f2 0c 09 49 	lsl	r9,r9,r12
800021a4:	f1 49 00 54 	st.w	r8[84],r9
800021a8:	c0 68       	rjmp	800021b4 <gpio_configure_pin+0x98>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800021aa:	30 19       	mov	r9,1
800021ac:	f2 0c 09 49 	lsl	r9,r9,r12
800021b0:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800021b4:	30 19       	mov	r9,1
800021b6:	f2 0c 09 49 	lsl	r9,r9,r12
800021ba:	f1 49 00 44 	st.w	r8[68],r9
800021be:	c0 68       	rjmp	800021ca <gpio_configure_pin+0xae>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800021c0:	30 19       	mov	r9,1
800021c2:	f2 0c 09 49 	lsl	r9,r9,r12
800021c6:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800021ca:	30 19       	mov	r9,1
800021cc:	f2 0c 09 4c 	lsl	r12,r9,r12
800021d0:	91 1c       	st.w	r8[0x4],r12
}
800021d2:	5e fc       	retal	r12

800021d4 <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021d4:	f8 08 16 05 	lsr	r8,r12,0x5
800021d8:	a9 68       	lsl	r8,0x8
800021da:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
800021de:	71 88       	ld.w	r8,r8[0x60]
800021e0:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800021e4:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800021e8:	5e fc       	retal	r12

800021ea <gpio_set_pin_high>:
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021ea:	f8 08 16 05 	lsr	r8,r12,0x5
800021ee:	a9 68       	lsl	r8,0x8
800021f0:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
800021f4:	30 19       	mov	r9,1
800021f6:	f2 0c 09 4c 	lsl	r12,r9,r12
800021fa:	f1 4c 00 54 	st.w	r8[84],r12
}
800021fe:	5e fc       	retal	r12

80002200 <gpio_set_pin_low>:
}


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002200:	f8 08 16 05 	lsr	r8,r12,0x5
80002204:	a9 68       	lsl	r8,0x8
80002206:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
8000220a:	30 19       	mov	r9,1
8000220c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002210:	f1 4c 00 58 	st.w	r8[88],r12
}
80002214:	5e fc       	retal	r12

80002216 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002216:	c0 08       	rjmp	80002216 <_unhandled_interrupt>

80002218 <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002218:	f6 08 16 05 	lsr	r8,r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
8000221c:	48 99       	lddpc	r9,80002240 <INTC_register_interrupt+0x28>
8000221e:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002222:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002226:	72 19       	ld.w	r9,r9[0x4]
80002228:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
8000222c:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80002230:	48 59       	lddpc	r9,80002244 <INTC_register_interrupt+0x2c>
80002232:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002236:	fe 79 08 00 	mov	r9,-63488
8000223a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
8000223e:	5e fc       	retal	r12
80002240:	80 00       	ld.sh	r0,r0[0x0]
80002242:	5c 18       	scr	r8
80002244:	80 00       	ld.sh	r0,r0[0x0]
80002246:	5b 3c       	cp.w	r12,-13

80002248 <INTC_init_interrupts>:
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
}

void INTC_init_interrupts(void)
{
80002248:	d4 21       	pushm	r4-r7,lr
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
8000224a:	49 18       	lddpc	r8,8000228c <INTC_init_interrupts+0x44>
8000224c:	e3 b8 00 01 	mtsr	0x4,r8
80002250:	49 0e       	lddpc	lr,80002290 <INTC_init_interrupts+0x48>
80002252:	30 07       	mov	r7,0
80002254:	0e 94       	mov	r4,r7
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002256:	49 0c       	lddpc	r12,80002294 <INTC_init_interrupts+0x4c>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002258:	49 08       	lddpc	r8,80002298 <INTC_init_interrupts+0x50>
8000225a:	70 05       	ld.w	r5,r8[0x0]
8000225c:	fe 76 08 00 	mov	r6,-63488
80002260:	c1 08       	rjmp	80002280 <INTC_init_interrupts+0x38>
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002262:	08 98       	mov	r8,r4
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002264:	7c 1b       	ld.w	r11,lr[0x4]

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002266:	7c 0a       	ld.w	r10,lr[0x0]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002268:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
8000226c:	2f f8       	sub	r8,-1
8000226e:	10 3a       	cp.w	r10,r8
80002270:	fe 9b ff fc 	brhi	80002268 <INTC_init_interrupts+0x20>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002274:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002278:	2f f7       	sub	r7,-1
8000227a:	2f 8e       	sub	lr,-8
8000227c:	59 e7       	cp.w	r7,30
8000227e:	c0 50       	breq	80002288 <INTC_init_interrupts+0x40>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002280:	7c 08       	ld.w	r8,lr[0x0]
80002282:	58 08       	cp.w	r8,0
80002284:	ce f1       	brne	80002262 <INTC_init_interrupts+0x1a>
80002286:	cf 7b       	rjmp	80002274 <INTC_init_interrupts+0x2c>
80002288:	d8 22       	popm	r4-r7,pc
8000228a:	00 00       	add	r0,r0
8000228c:	80 00       	ld.sh	r0,r0[0x0]
8000228e:	5a 00       	cp.w	r0,-32
80002290:	80 00       	ld.sh	r0,r0[0x0]
80002292:	5c 18       	scr	r8
80002294:	80 00       	ld.sh	r0,r0[0x0]
80002296:	22 16       	sub	r6,33
80002298:	80 00       	ld.sh	r0,r0[0x0]
8000229a:	5b 3c       	cp.w	r12,-13

8000229c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000229c:	fe 78 08 00 	mov	r8,-63488
800022a0:	e0 69 00 83 	mov	r9,131
800022a4:	f2 0c 01 0c 	sub	r12,r9,r12
800022a8:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
800022ac:	f2 ca ff c0 	sub	r10,r9,-64
800022b0:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
800022b4:	58 08       	cp.w	r8,0
800022b6:	c0 21       	brne	800022ba <_get_interrupt_handler+0x1e>
800022b8:	5e fd       	retal	0
800022ba:	f0 08 12 00 	clz	r8,r8
800022be:	48 5a       	lddpc	r10,800022d0 <_get_interrupt_handler+0x34>
800022c0:	f4 09 00 39 	add	r9,r10,r9<<0x3
800022c4:	f0 08 11 1f 	rsub	r8,r8,31
800022c8:	72 19       	ld.w	r9,r9[0x4]
800022ca:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
}
800022ce:	5e fc       	retal	r12
800022d0:	80 00       	ld.sh	r0,r0[0x0]
800022d2:	5c 18       	scr	r8

800022d4 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800022d4:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800022d6:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800022da:	99 a8       	st.w	r12[0x28],r8
}
800022dc:	5e fc       	retal	r12
800022de:	d7 03       	nop

800022e0 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
800022e0:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800022e2:	ec 5b bb 9f 	cp.w	r11,899999
800022e6:	e0 8b 00 04 	brhi	800022ee <pm_enable_osc0_crystal+0xe>
800022ea:	30 4b       	mov	r11,4
800022ec:	c1 38       	rjmp	80002312 <pm_enable_osc0_crystal+0x32>
800022ee:	e0 68 c6 bf 	mov	r8,50879
800022f2:	ea 18 00 2d 	orh	r8,0x2d
800022f6:	10 3b       	cp.w	r11,r8
800022f8:	e0 8b 00 04 	brhi	80002300 <pm_enable_osc0_crystal+0x20>
800022fc:	30 5b       	mov	r11,5
800022fe:	c0 a8       	rjmp	80002312 <pm_enable_osc0_crystal+0x32>
80002300:	e0 68 12 00 	mov	r8,4608
80002304:	ea 18 00 7a 	orh	r8,0x7a
80002308:	10 3b       	cp.w	r11,r8
8000230a:	f9 bb 03 06 	movlo	r11,6
8000230e:	f9 bb 02 07 	movhs	r11,7
80002312:	f0 1f 00 02 	mcall	80002318 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002316:	d8 02       	popm	pc
80002318:	80 00       	ld.sh	r0,r0[0x0]
8000231a:	22 d4       	sub	r4,45

8000231c <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
8000231c:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
8000231e:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002322:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002324:	78 08       	ld.w	r8,r12[0x0]
80002326:	a3 a8       	sbr	r8,0x2
80002328:	99 08       	st.w	r12[0x0],r8
}
8000232a:	5e fc       	retal	r12

8000232c <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
8000232c:	79 58       	ld.w	r8,r12[0x54]
8000232e:	e2 18 00 80 	andl	r8,0x80,COH
80002332:	cf d0       	breq	8000232c <pm_wait_for_clk0_ready>
}
80002334:	5e fc       	retal	r12
80002336:	d7 03       	nop

80002338 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002338:	eb cd 40 80 	pushm	r7,lr
8000233c:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
8000233e:	f0 1f 00 04 	mcall	8000234c <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002342:	0e 9c       	mov	r12,r7
80002344:	f0 1f 00 03 	mcall	80002350 <pm_enable_clk0+0x18>
}
80002348:	e3 cd 80 80 	ldm	sp++,r7,pc
8000234c:	80 00       	ld.sh	r0,r0[0x0]
8000234e:	23 1c       	sub	r12,49
80002350:	80 00       	ld.sh	r0,r0[0x0]
80002352:	23 2c       	sub	r12,50

80002354 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002354:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002356:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000235a:	99 08       	st.w	r12[0x0],r8
}
8000235c:	5e fc       	retal	r12
8000235e:	d7 03       	nop

80002360 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002360:	eb cd 40 c0 	pushm	r6-r7,lr
80002364:	18 97       	mov	r7,r12
80002366:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002368:	f0 1f 00 06 	mcall	80002380 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
8000236c:	0c 9b       	mov	r11,r6
8000236e:	0e 9c       	mov	r12,r7
80002370:	f0 1f 00 05 	mcall	80002384 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002374:	30 1b       	mov	r11,1
80002376:	0e 9c       	mov	r12,r7
80002378:	f0 1f 00 04 	mcall	80002388 <pm_switch_to_osc0+0x28>
}
8000237c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002380:	80 00       	ld.sh	r0,r0[0x0]
80002382:	22 e0       	sub	r0,46
80002384:	80 00       	ld.sh	r0,r0[0x0]
80002386:	23 38       	sub	r8,51
80002388:	80 00       	ld.sh	r0,r0[0x0]
8000238a:	23 54       	sub	r4,53

8000238c <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3C device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
8000238c:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  if(PCL_OSC0 == osc)
8000238e:	58 0c       	cp.w	r12,0
80002390:	c0 40       	breq	80002398 <pcl_switch_to_osc+0xc>
80002392:	fe 7c d8 f0 	mov	r12,-10000
80002396:	d8 02       	popm	pc
  {
    // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency,
    // enable the OSC0, set the main clock source as being OSC0.
    pm_switch_to_osc0(&AVR32_PM, fcrystal, startup);
80002398:	fe 7c 0c 00 	mov	r12,-62464
8000239c:	f0 1f 00 02 	mcall	800023a4 <pcl_switch_to_osc+0x18>
800023a0:	d8 0a       	popm	pc,r12=0
800023a2:	00 00       	add	r0,r0
800023a4:	80 00       	ld.sh	r0,r0[0x0]
800023a6:	23 60       	sub	r0,54

800023a8 <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
	return true;
}
800023a8:	5e ff       	retal	1

800023aa <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
800023aa:	5e fd       	retal	0

800023ac <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
800023ac:	fe 68 00 00 	mov	r8,-131072
800023b0:	70 09       	ld.w	r9,r8[0x0]
800023b2:	a7 d9       	cbr	r9,0x7
800023b4:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
800023b6:	70 09       	ld.w	r9,r8[0x0]
800023b8:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023bc:	e0 19 ff 80 	andl	r9,0xff80
800023c0:	f9 e9 10 09 	or	r9,r12,r9
800023c4:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800023c6:	70 09       	ld.w	r9,r8[0x0]
800023c8:	a7 b9       	sbr	r9,0x7
800023ca:	91 09       	st.w	r8[0x0],r9
}
800023cc:	5e fc       	retal	r12

800023ce <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800023ce:	fe 68 00 00 	mov	r8,-131072
800023d2:	70 0c       	ld.w	r12,r8[0x0]
}
800023d4:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023d8:	5e fc       	retal	r12

800023da <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
800023da:	fe 68 00 00 	mov	r8,-131072
800023de:	70 8c       	ld.w	r12,r8[0x20]
}
800023e0:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
800023e4:	5e fc       	retal	r12

800023e6 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
800023e6:	fe 68 00 00 	mov	r8,-131072
800023ea:	70 8c       	ld.w	r12,r8[0x20]
}
800023ec:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
800023f0:	5e fc       	retal	r12
800023f2:	d7 03       	nop

800023f4 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
800023f4:	48 28       	lddpc	r8,800023fc <udd_set_setup_payload+0x8>
800023f6:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
800023f8:	b0 6b       	st.h	r8[0xc],r11
}
800023fa:	5e fc       	retal	r12
800023fc:	00 00       	add	r0,r0
800023fe:	0a 10       	sub	r0,r5

80002400 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80002400:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002404:	a3 68       	lsl	r8,0x2
80002406:	e0 38 fe 40 	sub	r8,130624
8000240a:	70 0c       	ld.w	r12,r8[0x0]
}
8000240c:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80002410:	5e fc       	retal	r12
80002412:	d7 03       	nop

80002414 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002414:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
80002418:	30 38       	mov	r8,3
8000241a:	f0 0c 18 00 	cp.b	r12,r8
8000241e:	e0 8b 00 35 	brhi	80002488 <udd_ep_set_halt+0x74>
		return false;

	ptr_job = &udd_ep_job[index - 1];
80002422:	18 99       	mov	r9,r12
80002424:	f8 c8 00 01 	sub	r8,r12,1
80002428:	a5 68       	lsl	r8,0x4
8000242a:	49 9a       	lddpc	r10,8000248c <udd_ep_set_halt+0x78>
8000242c:	f4 08 00 08 	add	r8,r10,r8
	if (ptr_job->busy == true) {
80002430:	70 0a       	ld.w	r10,r8[0x0]
80002432:	58 0a       	cp.w	r10,0
80002434:	c2 a5       	brlt	80002488 <udd_ep_set_halt+0x74>
		return false;	// Job on going, stall impossible
	}
	
	if (0 != udd_nb_busy_bank(index)) {
80002436:	a3 69       	lsl	r9,0x2
80002438:	fe 6b 01 30 	mov	r11,-130768
8000243c:	f2 0b 00 0a 	add	r10,r9,r11
80002440:	74 0a       	ld.w	r10,r10[0x0]
80002442:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
80002446:	c1 10       	breq	80002468 <udd_ep_set_halt+0x54>
		// Wait end of transfer on USB line before stall endpoint
		// Flag a stall requested
		ptr_job->stall_requested = true;
80002448:	70 0b       	ld.w	r11,r8[0x0]
8000244a:	30 1a       	mov	r10,1
8000244c:	f7 da d3 81 	bfins	r11,r10,0x1c,0x1
80002450:	91 0b       	st.w	r8[0x0],r11
		udd_enable_bank_interrupt(index);
80002452:	e0 39 fe 10 	sub	r9,130576
80002456:	e0 68 10 00 	mov	r8,4096
8000245a:	93 08       	st.w	r9[0x0],r8
		udd_enable_endpoint_interrupt(index);
8000245c:	f0 0c 09 4c 	lsl	r12,r8,r12
80002460:	fe 69 00 00 	mov	r9,-131072
80002464:	93 6c       	st.w	r9[0x18],r12
80002466:	5e fa       	retal	r10
	} else {
		// Stall endpoint
		udd_disable_endpoint_bank_autoswitch(index);
80002468:	fe 6a 01 00 	mov	r10,-130816
8000246c:	f2 0a 00 08 	add	r8,r9,r10
80002470:	70 0a       	ld.w	r10,r8[0x0]
80002472:	a9 da       	cbr	r10,0x9
80002474:	91 0a       	st.w	r8[0x0],r10
		udd_enable_stall_handshake(index);
80002476:	e0 39 fe 10 	sub	r9,130576
8000247a:	e8 68 00 00 	mov	r8,524288
8000247e:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
80002480:	e4 68 00 00 	mov	r8,262144
80002484:	93 08       	st.w	r9[0x0],r8
80002486:	5e ff       	retal	1
80002488:	5e fd       	retal	0
8000248a:	00 00       	add	r0,r0
8000248c:	00 00       	add	r0,r0
8000248e:	07 28       	ld.uh	r8,r3++

80002490 <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80002490:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80002492:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
80002496:	30 38       	mov	r8,3
80002498:	f0 0c 18 00 	cp.b	r12,r8
8000249c:	e0 88 00 03 	brls	800024a2 <udd_ep_clear_halt+0x12>
800024a0:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
800024a2:	f8 c8 00 01 	sub	r8,r12,1
800024a6:	a5 68       	lsl	r8,0x4
800024a8:	49 69       	lddpc	r9,80002500 <udd_ep_clear_halt+0x70>
800024aa:	f2 08 00 08 	add	r8,r9,r8

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
800024ae:	a3 6c       	lsl	r12,0x2
800024b0:	fe 6a 01 c0 	mov	r10,-130624
800024b4:	f8 0a 00 09 	add	r9,r12,r10
800024b8:	72 09       	ld.w	r9,r9[0x0]
800024ba:	e6 19 00 08 	andh	r9,0x8,COH
800024be:	c0 51       	brne	800024c8 <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
800024c0:	70 09       	ld.w	r9,r8[0x0]
800024c2:	e6 19 10 00 	andh	r9,0x1000,COH
800024c6:	c1 c0       	breq	800024fe <udd_ep_clear_halt+0x6e>
		// Remove request to stall
		ptr_job->stall_requested = false;
800024c8:	70 09       	ld.w	r9,r8[0x0]
800024ca:	30 0a       	mov	r10,0
800024cc:	f3 da d3 81 	bfins	r9,r10,0x1c,0x1
800024d0:	91 09       	st.w	r8[0x0],r9
		// Remove stall
		udd_disable_stall_handshake(ep);
800024d2:	fe 6a 02 20 	mov	r10,-130528
800024d6:	f8 0a 00 09 	add	r9,r12,r10
800024da:	e8 6a 00 00 	mov	r10,524288
800024de:	93 0a       	st.w	r9[0x0],r10
		udd_enable_endpoint_bank_autoswitch(ep);	
800024e0:	e0 3c ff 00 	sub	r12,130816
800024e4:	78 09       	ld.w	r9,r12[0x0]
800024e6:	a9 b9       	sbr	r9,0x9
800024e8:	99 09       	st.w	r12[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
800024ea:	70 09       	ld.w	r9,r8[0x0]
800024ec:	58 09       	cp.w	r9,0
800024ee:	c0 84       	brge	800024fe <udd_ep_clear_halt+0x6e>
			ptr_job->busy = false;
800024f0:	30 0a       	mov	r10,0
800024f2:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
800024f6:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
800024f8:	70 38       	ld.w	r8,r8[0xc]
800024fa:	5d 18       	icall	r8
800024fc:	da 0a       	popm	pc,r12=1
800024fe:	da 0a       	popm	pc,r12=1
80002500:	00 00       	add	r0,r0
80002502:	07 28       	ld.uh	r8,r3++

80002504 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002504:	30 59       	mov	r9,5
80002506:	48 58       	lddpc	r8,80002518 <udd_ctrl_stall_data+0x14>
80002508:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
8000250a:	e8 69 00 00 	mov	r9,524288
8000250e:	fe 68 01 f0 	mov	r8,-130576
80002512:	91 09       	st.w	r8[0x0],r9
}
80002514:	5e fc       	retal	r12
80002516:	00 00       	add	r0,r0
80002518:	00 00       	add	r0,r0
8000251a:	07 5c       	ld.sh	r12,--r3

8000251c <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
8000251c:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000251e:	48 48       	lddpc	r8,8000252c <udd_ctrl_endofrequest+0x10>
80002520:	70 48       	ld.w	r8,r8[0x10]
80002522:	58 08       	cp.w	r8,0
80002524:	c0 20       	breq	80002528 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
80002526:	5d 18       	icall	r8
80002528:	d8 02       	popm	pc
8000252a:	00 00       	add	r0,r0
8000252c:	00 00       	add	r0,r0
8000252e:	0a 10       	sub	r0,r5

80002530 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
80002530:	d4 01       	pushm	lr
80002532:	16 99       	mov	r9,r11
	if (ptr_job->busy == false)
80002534:	78 08       	ld.w	r8,r12[0x0]
80002536:	58 08       	cp.w	r8,0
80002538:	c0 b4       	brge	8000254e <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
8000253a:	30 0a       	mov	r10,0
8000253c:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80002540:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans)
80002542:	78 38       	ld.w	r8,r12[0xc]
80002544:	58 08       	cp.w	r8,0
80002546:	c0 40       	breq	8000254e <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80002548:	78 2b       	ld.w	r11,r12[0x8]
8000254a:	12 9c       	mov	r12,r9
8000254c:	5d 18       	icall	r8
8000254e:	d8 02       	popm	pc

80002550 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80002550:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
80002552:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002556:	20 18       	sub	r8,1
80002558:	a5 68       	lsl	r8,0x4
8000255a:	30 1b       	mov	r11,1
8000255c:	48 3c       	lddpc	r12,80002568 <udd_ep_abort_job+0x18>
8000255e:	10 0c       	add	r12,r8
80002560:	f0 1f 00 03 	mcall	8000256c <udd_ep_abort_job+0x1c>
}
80002564:	d8 02       	popm	pc
80002566:	00 00       	add	r0,r0
80002568:	00 00       	add	r0,r0
8000256a:	07 28       	ld.uh	r8,r3++
8000256c:	80 00       	ld.sh	r0,r0[0x0]
8000256e:	25 30       	sub	r0,83

80002570 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80002570:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
80002572:	fe 69 00 00 	mov	r9,-131072
80002576:	72 7b       	ld.w	r11,r9[0x1c]
80002578:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
8000257c:	30 1a       	mov	r10,1
8000257e:	f4 08 09 4a 	lsl	r10,r10,r8
80002582:	5c da       	com	r10
80002584:	16 6a       	and	r10,r11
80002586:	93 7a       	st.w	r9[0x1c],r10
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
80002588:	a3 68       	lsl	r8,0x2
8000258a:	e0 38 ff 00 	sub	r8,130816
8000258e:	70 09       	ld.w	r9,r8[0x0]
80002590:	a1 d9       	cbr	r9,0x1
80002592:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80002594:	f0 1f 00 02 	mcall	8000259c <udd_ep_free+0x2c>
}
80002598:	d8 02       	popm	pc
8000259a:	00 00       	add	r0,r0
8000259c:	80 00       	ld.sh	r0,r0[0x0]
8000259e:	25 50       	sub	r0,85

800025a0 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
800025a0:	eb cd 40 fc 	pushm	r2-r7,lr
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
800025a4:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
800025a8:	30 37       	mov	r7,3
800025aa:	ee 0e 18 00 	cp.b	lr,r7
800025ae:	e0 8b 00 99 	brhi	800026e0 <udd_ep_run+0x140>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025b2:	fe 67 00 00 	mov	r7,-131072
800025b6:	6e 76       	ld.w	r6,r7[0x1c]
800025b8:	1c 95       	mov	r5,lr
800025ba:	30 17       	mov	r7,1
800025bc:	ee 0e 09 47 	lsl	r7,r7,lr
800025c0:	0c 67       	and	r7,r6
800025c2:	e0 80 00 8f 	breq	800026e0 <udd_ep_run+0x140>
			|| Is_udd_endpoint_stall_requested(ep)
800025c6:	fc 06 15 02 	lsl	r6,lr,0x2
800025ca:	fe 64 01 c0 	mov	r4,-130624
800025ce:	ec 04 00 07 	add	r7,r6,r4
800025d2:	6e 07       	ld.w	r7,r7[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025d4:	e6 17 00 08 	andh	r7,0x8,COH
800025d8:	e0 81 00 84 	brne	800026e0 <udd_ep_run+0x140>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
800025dc:	fc c7 00 01 	sub	r7,lr,1
800025e0:	a5 67       	lsl	r7,0x4
800025e2:	4c 14       	lddpc	r4,800026e4 <udd_ep_run+0x144>
800025e4:	e8 07 00 07 	add	r7,r4,r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
800025e8:	6e 04       	ld.w	r4,r7[0x0]
800025ea:	e6 14 10 00 	andh	r4,0x1000,COH
800025ee:	c7 91       	brne	800026e0 <udd_ep_run+0x140>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025f0:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
800025f4:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
800025f6:	6e 03       	ld.w	r3,r7[0x0]
800025f8:	58 03       	cp.w	r3,0
800025fa:	c0 54       	brge	80002604 <udd_ep_run+0x64>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800025fc:	e3 b4 00 00 	mtsr	0x0,r4
#endif
	barrier();
80002600:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
80002604:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
80002608:	6e 03       	ld.w	r3,r7[0x0]
8000260a:	30 12       	mov	r2,1
8000260c:	e7 d2 d3 e1 	bfins	r3,r2,0x1f,0x1
80002610:	8f 03       	st.w	r7[0x0],r3
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002612:	e3 b4 00 00 	mtsr	0x0,r4
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
80002616:	8f 1a       	st.w	r7[0x4],r10
	ptr_job->call_trans = callback;
80002618:	8f 38       	st.w	r7[0xc],r8
	ptr_job->b_raise_dma = false;
8000261a:	6e 08       	ld.w	r8,r7[0x0]
8000261c:	30 04       	mov	r4,0
8000261e:	f1 d4 d3 a1 	bfins	r8,r4,0x1d,0x1
80002622:	8f 08       	st.w	r7[0x0],r8

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
80002624:	e0 49 ff ff 	cp.w	r9,65535
80002628:	e0 88 00 07 	brls	80002636 <udd_ep_run+0x96>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
8000262c:	e0 78 00 00 	mov	r8,65536
80002630:	8f 28       	st.w	r7[0x8],r8
80002632:	08 99       	mov	r9,r4
80002634:	c3 58       	rjmp	8000269e <udd_ep_run+0xfe>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
80002636:	8f 29       	st.w	r7[0x8],r9
		if (b_dir_in) {
80002638:	58 0c       	cp.w	r12,0
8000263a:	c3 20       	breq	8000269e <udd_ep_run+0xfe>
			if (buf_size==0) {
8000263c:	58 09       	cp.w	r9,0
8000263e:	c1 71       	brne	8000266c <udd_ep_run+0xcc>
				// The USB DMA can't send a empty buffer
				// thus we raise the DMA interrupt end of transfert 
				// to execute ZLP process
				ptr_job->b_raise_dma = true;
80002640:	6e 08       	ld.w	r8,r7[0x0]
80002642:	30 1c       	mov	r12,1
				ptr_job->b_send_zlp = true;
80002644:	bd b8       	sbr	r8,0x1d
80002646:	f1 dc d3 c1 	bfins	r8,r12,0x1e,0x1
8000264a:	8f 08       	st.w	r7[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000264c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002650:	d3 03       	ssrf	0x10
				flags = cpu_irq_save();
				udd_enable_endpoint_dma_interrupt(ep);
80002652:	20 15       	sub	r5,1
80002654:	fc 19 02 00 	movh	r9,0x200
80002658:	f2 05 09 49 	lsl	r9,r9,r5
8000265c:	fe 68 00 00 	mov	r8,-131072
80002660:	91 69       	st.w	r8[0x18],r9
				udd_raise_endpoint_dma_interrupt(ep);
80002662:	91 39       	st.w	r8[0xc],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002664:	e3 ba 00 00 	mtsr	0x0,r10
				cpu_irq_restore(flags);
				return true;
80002668:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
			}
			if (0 != buf_size % udd_get_endpoint_size(ep)) {
8000266c:	e0 36 ff 00 	sub	r6,130816
80002670:	6c 08       	ld.w	r8,r6[0x0]
80002672:	f1 d8 c0 83 	bfextu	r8,r8,0x4,0x3
80002676:	30 86       	mov	r6,8
80002678:	ec 08 09 48 	lsl	r8,r6,r8
8000267c:	20 18       	sub	r8,1
8000267e:	12 68       	and	r8,r9
80002680:	c0 b0       	breq	80002696 <udd_ep_run+0xf6>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
80002682:	6e 08       	ld.w	r8,r7[0x0]
80002684:	30 0b       	mov	r11,0
80002686:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
8000268a:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
8000268c:	a5 6e       	lsl	lr,0x4
8000268e:	e0 3e fd 00 	sub	lr,130304
80002692:	9d 1a       	st.w	lr[0x4],r10
80002694:	c1 18       	rjmp	800026b6 <udd_ep_run+0x116>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
			}else{
				ptr_job->b_send_zlp = b_shortpacket;
80002696:	6e 08       	ld.w	r8,r7[0x0]
80002698:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
8000269c:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
8000269e:	a5 6e       	lsl	lr,0x4
800026a0:	e0 3e fd 00 	sub	lr,130304
800026a4:	9d 1a       	st.w	lr[0x4],r10
	if (b_shortpacket) {
800026a6:	58 0b       	cp.w	r11,0
800026a8:	c0 31       	brne	800026ae <udd_ep_run+0x10e>
800026aa:	30 08       	mov	r8,0
800026ac:	c0 68       	rjmp	800026b8 <udd_ep_run+0x118>
		if (b_dir_in) {
800026ae:	58 0c       	cp.w	r12,0
800026b0:	c0 31       	brne	800026b6 <udd_ep_run+0x116>
800026b2:	31 48       	mov	r8,20
800026b4:	c0 28       	rjmp	800026b8 <udd_ep_run+0x118>
800026b6:	30 88       	mov	r8,8
		} else {
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
800026b8:	e8 18 00 21 	orl	r8,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800026bc:	f1 e9 11 09 	or	r9,r8,r9<<0x10
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
800026c0:	9d 29       	st.w	lr[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026c2:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800026c6:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
800026c8:	20 15       	sub	r5,1
800026ca:	fc 19 02 00 	movh	r9,0x200
800026ce:	f2 05 09 45 	lsl	r5,r9,r5
800026d2:	fe 69 00 00 	mov	r9,-131072
800026d6:	93 65       	st.w	r9[0x18],r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800026d8:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
800026dc:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
	cpu_irq_restore(flags);

	return true;
800026e0:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800026e4:	00 00       	add	r0,r0
800026e6:	07 28       	ld.uh	r8,r3++

800026e8 <udd_sleep_mode>:
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
800026e8:	58 0c       	cp.w	r12,0
800026ea:	c1 11       	brne	8000270c <udd_sleep_mode+0x24>
800026ec:	49 18       	lddpc	r8,80002730 <udd_sleep_mode+0x48>
800026ee:	11 89       	ld.ub	r9,r8[0x0]
800026f0:	30 08       	mov	r8,0
800026f2:	f0 09 18 00 	cp.b	r9,r8
800026f6:	c1 a0       	breq	8000272a <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026f8:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800026fc:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800026fe:	48 e8       	lddpc	r8,80002734 <udd_sleep_mode+0x4c>
80002700:	11 9a       	ld.ub	r10,r8[0x1]
80002702:	2f fa       	sub	r10,-1
80002704:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002706:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
8000270a:	c1 08       	rjmp	8000272a <udd_sleep_mode+0x42>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
8000270c:	48 98       	lddpc	r8,80002730 <udd_sleep_mode+0x48>
8000270e:	11 89       	ld.ub	r9,r8[0x0]
80002710:	30 08       	mov	r8,0
80002712:	f0 09 18 00 	cp.b	r9,r8
80002716:	c0 a1       	brne	8000272a <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002718:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000271c:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
8000271e:	48 68       	lddpc	r8,80002734 <udd_sleep_mode+0x4c>
80002720:	11 9a       	ld.ub	r10,r8[0x1]
80002722:	20 1a       	sub	r10,1
80002724:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002726:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
8000272a:	48 28       	lddpc	r8,80002730 <udd_sleep_mode+0x48>
8000272c:	b0 8c       	st.b	r8[0x0],r12
}
8000272e:	5e fc       	retal	r12
80002730:	00 00       	add	r0,r0
80002732:	07 58       	ld.sh	r8,--r3
80002734:	00 00       	add	r0,r0
80002736:	0a 28       	rsub	r8,r5

80002738 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
80002738:	d4 01       	pushm	lr
	otg_unfreeze_clock();
8000273a:	fe 68 00 00 	mov	r8,-131072
8000273e:	f0 f9 08 00 	ld.w	r9,r8[2048]
80002742:	af c9       	cbr	r9,0xe
80002744:	f1 49 08 00 	st.w	r8[2048],r9
	// Detach device from the bus
	udd_detach_device();
80002748:	70 09       	ld.w	r9,r8[0x0]
8000274a:	a9 a9       	sbr	r9,0x8
8000274c:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
8000274e:	30 0c       	mov	r12,0
80002750:	f0 1f 00 02 	mcall	80002758 <udd_detach+0x20>
}
80002754:	d8 02       	popm	pc
80002756:	00 00       	add	r0,r0
80002758:	80 00       	ld.sh	r0,r0[0x0]
8000275a:	26 e8       	sub	r8,110

8000275c <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000275c:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002760:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80002762:	30 1a       	mov	r10,1
80002764:	fe 69 02 20 	mov	r9,-130528
80002768:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000276a:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
8000276e:	30 29       	mov	r9,2
80002770:	fe 68 01 60 	mov	r8,-130720
80002774:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80002776:	48 59       	lddpc	r9,80002788 <udd_ctrl_init+0x2c>
80002778:	30 08       	mov	r8,0
8000277a:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
8000277c:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
8000277e:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80002780:	48 39       	lddpc	r9,8000278c <udd_ctrl_init+0x30>
80002782:	93 08       	st.w	r9[0x0],r8
}
80002784:	5e fc       	retal	r12
80002786:	00 00       	add	r0,r0
80002788:	00 00       	add	r0,r0
8000278a:	0a 10       	sub	r0,r5
8000278c:	00 00       	add	r0,r0
8000278e:	07 5c       	ld.sh	r12,--r3

80002790 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002790:	30 39       	mov	r9,3
80002792:	48 a8       	lddpc	r8,800027b8 <udd_ctrl_send_zlp_in+0x28>
80002794:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002796:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
8000279a:	d3 03       	ssrf	0x10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
8000279c:	fe 6a 01 60 	mov	r10,-130720
800027a0:	30 19       	mov	r9,1
800027a2:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
800027a4:	fe 68 01 f0 	mov	r8,-130576
800027a8:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
800027aa:	30 89       	mov	r9,8
800027ac:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
800027ae:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027b0:	e3 bb 00 00 	mtsr	0x0,r11
	cpu_irq_restore(flags);
}
800027b4:	5e fc       	retal	r12
800027b6:	00 00       	add	r0,r0
800027b8:	00 00       	add	r0,r0
800027ba:	07 5c       	ld.sh	r12,--r3

800027bc <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
800027bc:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027c0:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800027c4:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
800027c6:	30 1a       	mov	r10,1
800027c8:	fe 69 02 20 	mov	r9,-130528
800027cc:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027ce:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800027d2:	4c 38       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x120>
800027d4:	70 08       	ld.w	r8,r8[0x0]
800027d6:	58 38       	cp.w	r8,3
800027d8:	c0 71       	brne	800027e6 <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
800027da:	f0 1f 00 42 	mcall	800028e0 <udd_ctrl_in_sent+0x124>
		// Reinitializes control endpoint management
		udd_ctrl_init();
800027de:	f0 1f 00 42 	mcall	800028e4 <udd_ctrl_in_sent+0x128>
		return;
800027e2:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
800027e6:	4c 18       	lddpc	r8,800028e8 <udd_ctrl_in_sent+0x12c>
800027e8:	90 68       	ld.sh	r8,r8[0xc]
800027ea:	4c 19       	lddpc	r9,800028ec <udd_ctrl_in_sent+0x130>
800027ec:	92 07       	ld.sh	r7,r9[0x0]
800027ee:	f0 07 01 07 	sub	r7,r8,r7
800027f2:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
800027f4:	c3 b1       	brne	8000286a <udd_ctrl_in_sent+0xae>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
800027f6:	4b f9       	lddpc	r9,800028f0 <udd_ctrl_in_sent+0x134>
800027f8:	13 8a       	ld.ub	r10,r9[0x0]
800027fa:	30 09       	mov	r9,0
800027fc:	f2 0a 18 00 	cp.b	r10,r9
80002800:	c1 21       	brne	80002824 <udd_ctrl_in_sent+0x68>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80002802:	30 49       	mov	r9,4
80002804:	4b 68       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x120>
80002806:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002808:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000280c:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
8000280e:	31 08       	mov	r8,16
80002810:	fe 6a 01 60 	mov	r10,-130720
80002814:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
80002816:	fe 6a 01 f0 	mov	r10,-130576
8000281a:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000281c:	e3 b9 00 00 	mtsr	0x0,r9
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80002820:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002824:	4b 19       	lddpc	r9,800028e8 <udd_ctrl_in_sent+0x12c>
80002826:	92 b9       	ld.uh	r9,r9[0x6]
80002828:	5c 78       	castu.h	r8
8000282a:	4b 3a       	lddpc	r10,800028f4 <udd_ctrl_in_sent+0x138>
8000282c:	94 8a       	ld.uh	r10,r10[0x0]
8000282e:	14 08       	add	r8,r10
80002830:	10 39       	cp.w	r9,r8
80002832:	e0 89 00 08 	brgt	80002842 <udd_ctrl_in_sent+0x86>
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
80002836:	4a d8       	lddpc	r8,800028e8 <udd_ctrl_in_sent+0x12c>
80002838:	70 5c       	ld.w	r12,r8[0x14]
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000283a:	58 0c       	cp.w	r12,0
8000283c:	c0 30       	breq	80002842 <udd_ctrl_in_sent+0x86>
8000283e:	5d 1c       	icall	r12
80002840:	c0 51       	brne	8000284a <udd_ctrl_in_sent+0x8e>
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
80002842:	30 09       	mov	r9,0
80002844:	4a b8       	lddpc	r8,800028f0 <udd_ctrl_in_sent+0x134>
80002846:	b0 89       	st.b	r8[0x0],r9
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002848:	c1 18       	rjmp	8000286a <udd_ctrl_in_sent+0xae>
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
8000284a:	4a b9       	lddpc	r9,800028f4 <udd_ctrl_in_sent+0x138>
8000284c:	4a 88       	lddpc	r8,800028ec <udd_ctrl_in_sent+0x130>
8000284e:	90 0b       	ld.sh	r11,r8[0x0]
80002850:	92 0a       	ld.sh	r10,r9[0x0]
80002852:	f6 0a 00 0a 	add	r10,r11,r10
80002856:	b2 0a       	st.h	r9[0x0],r10
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
80002858:	30 09       	mov	r9,0
8000285a:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
8000285c:	4a 38       	lddpc	r8,800028e8 <udd_ctrl_in_sent+0x12c>
8000285e:	90 67       	ld.sh	r7,r8[0xc]
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
80002860:	f1 d7 c0 06 	bfextu	r8,r7,0x0,0x6
80002864:	5f 09       	sreq	r9
80002866:	4a 38       	lddpc	r8,800028f0 <udd_ctrl_in_sent+0x134>
80002868:	b0 89       	st.b	r8[0x0],r9
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000286a:	4a 08       	lddpc	r8,800028e8 <udd_ctrl_in_sent+0x12c>
8000286c:	70 2a       	ld.w	r10,r8[0x8]
8000286e:	4a 08       	lddpc	r8,800028ec <udd_ctrl_in_sent+0x130>
80002870:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002872:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80002876:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
80002878:	fe 68 01 30 	mov	r8,-130768
8000287c:	70 08       	ld.w	r8,r8[0x0]
8000287e:	e2 18 00 02 	andl	r8,0x2,COH
80002882:	c0 91       	brne	80002894 <udd_ctrl_in_sent+0xd8>
80002884:	34 08       	mov	r8,64
80002886:	f0 07 19 00 	cp.h	r7,r8
8000288a:	f9 b7 0b 40 	movhi	r7,64
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000288e:	58 07       	cp.w	r7,0
80002890:	c0 91       	brne	800028a2 <udd_ctrl_in_sent+0xe6>
80002892:	c1 48       	rjmp	800028ba <udd_ctrl_in_sent+0xfe>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002894:	e3 bb 00 00 	mtsr	0x0,r11
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80002898:	30 49       	mov	r9,4
8000289a:	49 18       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x120>
8000289c:	91 09       	st.w	r8[0x0],r9
		return;	// Exit of IN DATA phase
8000289e:	e3 cd 80 80 	ldm	sp++,r7,pc
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800028a2:	5c 79       	castu.h	r9
800028a4:	f4 09 00 09 	add	r9,r10,r9
800028a8:	fc 18 e0 00 	movh	r8,0xe000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
800028ac:	13 3a       	ld.ub	r10,r9++
800028ae:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800028b0:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800028b4:	ee 0a 19 00 	cp.h	r10,r7
800028b8:	cf a3       	brcs	800028ac <udd_ctrl_in_sent+0xf0>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800028ba:	48 d8       	lddpc	r8,800028ec <udd_ctrl_in_sent+0x130>
800028bc:	90 09       	ld.sh	r9,r8[0x0]
800028be:	f2 07 00 07 	add	r7,r9,r7
800028c2:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800028c4:	30 18       	mov	r8,1
800028c6:	fe 69 01 60 	mov	r9,-130720
800028ca:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
800028cc:	fe 69 01 f0 	mov	r9,-130576
800028d0:	93 08       	st.w	r9[0x0],r8
800028d2:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
800028d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800028da:	00 00       	add	r0,r0
800028dc:	00 00       	add	r0,r0
800028de:	07 5c       	ld.sh	r12,--r3
800028e0:	80 00       	ld.sh	r0,r0[0x0]
800028e2:	25 1c       	sub	r12,81
800028e4:	80 00       	ld.sh	r0,r0[0x0]
800028e6:	27 5c       	sub	r12,117
800028e8:	00 00       	add	r0,r0
800028ea:	0a 10       	sub	r0,r5
800028ec:	00 00       	add	r0,r0
800028ee:	07 5a       	ld.sh	r10,--r3
800028f0:	00 00       	add	r0,r0
800028f2:	07 60       	ld.uh	r0,--r3
800028f4:	00 00       	add	r0,r0
800028f6:	07 24       	ld.uh	r4,r3++

800028f8 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
800028f8:	eb cd 40 e0 	pushm	r5-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
800028fc:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP)
80002900:	30 39       	mov	r9,3
80002902:	f2 08 18 00 	cp.b	r8,r9
80002906:	e0 8b 00 88 	brhi	80002a16 <udd_ep_alloc+0x11e>
		return false;
	if (Is_udd_endpoint_enabled(ep))
8000290a:	fe 69 00 00 	mov	r9,-131072
8000290e:	72 79       	ld.w	r9,r9[0x1c]
80002910:	30 17       	mov	r7,1
80002912:	ee 08 09 47 	lsl	r7,r7,r8
80002916:	ef e9 00 09 	and	r9,r7,r9
8000291a:	c7 e1       	brne	80002a16 <udd_ep_alloc+0x11e>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
8000291c:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
80002920:	58 19       	cp.w	r9,1
80002922:	c7 a5       	brlt	80002a16 <udd_ep_alloc+0x11e>
80002924:	58 29       	cp.w	r9,2
80002926:	e0 8a 00 06 	brle	80002932 <udd_ep_alloc+0x3a>
8000292a:	58 39       	cp.w	r9,3
8000292c:	c7 51       	brne	80002a16 <udd_ep_alloc+0x11e>
8000292e:	30 06       	mov	r6,0
80002930:	c0 28       	rjmp	80002934 <udd_ep_alloc+0x3c>
80002932:	30 16       	mov	r6,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80002934:	f0 09 15 02 	lsl	r9,r8,0x2
80002938:	e0 39 ff 00 	sub	r9,130816
8000293c:	72 0e       	ld.w	lr,r9[0x0]
8000293e:	5c 7a       	castu.h	r10
80002940:	30 85       	mov	r5,8
80002942:	f4 05 0c 4a 	max	r10,r10,r5
80002946:	e0 65 04 00 	mov	r5,1024
8000294a:	f4 05 0d 4a 	min	r10,r10,r5
8000294e:	a1 7a       	lsl	r10,0x1
80002950:	20 1a       	sub	r10,1
80002952:	f4 0a 12 00 	clz	r10,r10
80002956:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
8000295a:	ab 7b       	lsl	r11,0xb
8000295c:	e2 1b 18 00 	andl	r11,0x1800,COH
80002960:	f7 ec 10 8c 	or	r12,r11,r12<<0x8
80002964:	f4 0b 11 1c 	rsub	r11,r10,28
80002968:	f9 eb 10 4b 	or	r11,r12,r11<<0x4
8000296c:	f7 e6 10 2b 	or	r11,r11,r6<<0x2
80002970:	e2 1b 19 7c 	andl	r11,0x197c,COH
80002974:	1c 9a       	mov	r10,lr
80002976:	e0 1a e6 83 	andl	r10,0xe683
8000297a:	f7 ea 10 0a 	or	r10,r11,r10
8000297e:	93 0a       	st.w	r9[0x0],r10
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80002980:	5c 87       	casts.h	r7

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80002982:	30 29       	mov	r9,2
80002984:	f2 08 18 00 	cp.b	r8,r9
80002988:	e0 8b 00 1d 	brhi	800029c2 <udd_ep_alloc+0xca>
8000298c:	fe 6a 01 0c 	mov	r10,-130804
80002990:	30 39       	mov	r9,3
		if (Is_udd_endpoint_enabled(i)) {
80002992:	fe 6c 00 00 	mov	r12,-131072
80002996:	30 16       	mov	r6,1
80002998:	78 7e       	ld.w	lr,r12[0x1c]
8000299a:	ec 09 09 4b 	lsl	r11,r6,r9
8000299e:	f7 ee 00 0e 	and	lr,r11,lr
800029a2:	c0 b0       	breq	800029b8 <udd_ep_alloc+0xc0>
			ep_allocated |= 1 << i;
800029a4:	f7 e7 10 07 	or	r7,r11,r7
800029a8:	5c 87       	casts.h	r7
			udd_disable_endpoint(i);
800029aa:	78 7e       	ld.w	lr,r12[0x1c]
800029ac:	5c db       	com	r11
800029ae:	1c 6b       	and	r11,lr
800029b0:	99 7b       	st.w	r12[0x1c],r11
			udd_unallocate_memory(i);
800029b2:	74 0b       	ld.w	r11,r10[0x0]
800029b4:	a1 db       	cbr	r11,0x1
800029b6:	95 0b       	st.w	r10[0x0],r11
800029b8:	20 19       	sub	r9,1
800029ba:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800029bc:	f2 08 18 00 	cp.b	r8,r9
800029c0:	ce c3       	brcs	80002998 <udd_ep_alloc+0xa0>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
800029c2:	0e 9c       	mov	r12,r7
800029c4:	5c 7c       	castu.h	r12
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
800029c6:	fe 6e 00 00 	mov	lr,-131072
800029ca:	30 16       	mov	r6,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800029cc:	30 37       	mov	r7,3
		if (ep_allocated & (1 << i)) {
800029ce:	f8 08 08 49 	asr	r9,r12,r8
800029d2:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800029d6:	c1 80       	breq	80002a06 <udd_ep_alloc+0x10e>
			udd_allocate_memory(i);
800029d8:	f0 0b 15 02 	lsl	r11,r8,0x2
800029dc:	fe 65 01 00 	mov	r5,-130816
800029e0:	f6 05 00 09 	add	r9,r11,r5
800029e4:	72 05       	ld.w	r5,r9[0x0]
800029e6:	a1 b5       	sbr	r5,0x1
800029e8:	93 05       	st.w	r9[0x0],r5
			udd_enable_endpoint(i);
800029ea:	7c 75       	ld.w	r5,lr[0x1c]
800029ec:	ec 08 09 4a 	lsl	r10,r6,r8
800029f0:	0a 4a       	or	r10,r5
800029f2:	9d 7a       	st.w	lr[0x1c],r10
			if (!Is_udd_endpoint_configured(i))
800029f4:	e0 3b fe d0 	sub	r11,130768
800029f8:	76 0a       	ld.w	r10,r11[0x0]
800029fa:	e6 1a 00 04 	andh	r10,0x4,COH
800029fe:	c0 c0       	breq	80002a16 <udd_ep_alloc+0x11e>
				return false;
			udd_enable_endpoint_bank_autoswitch(i);	
80002a00:	72 0a       	ld.w	r10,r9[0x0]
80002a02:	a9 ba       	sbr	r10,0x9
80002a04:	93 0a       	st.w	r9[0x0],r10
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80002a06:	2f f8       	sub	r8,-1
80002a08:	5c 58       	castu.b	r8
80002a0a:	ee 08 18 00 	cp.b	r8,r7
80002a0e:	fe 98 ff e0 	brls	800029ce <udd_ep_alloc+0xd6>
80002a12:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002a16:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

80002a1a <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
80002a1a:	fe 68 00 00 	mov	r8,-131072
80002a1e:	70 09       	ld.w	r9,r8[0x0]
80002a20:	e0 19 ff 80 	andl	r9,0xff80
80002a24:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80002a26:	70 09       	ld.w	r9,r8[0x0]
80002a28:	a7 b9       	sbr	r9,0x7
80002a2a:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80002a2c:	fe 69 01 00 	mov	r9,-130816
80002a30:	72 0b       	ld.w	r11,r9[0x0]
80002a32:	30 8c       	mov	r12,8
80002a34:	34 0a       	mov	r10,64
80002a36:	f4 0c 0c 4a 	max	r10,r10,r12
80002a3a:	e0 6c 04 00 	mov	r12,1024
80002a3e:	f4 0c 0d 4a 	min	r10,r10,r12
80002a42:	a1 7a       	lsl	r10,0x1
80002a44:	20 1a       	sub	r10,1
80002a46:	f4 0a 12 00 	clz	r10,r10
80002a4a:	f4 0a 11 1c 	rsub	r10,r10,28
80002a4e:	a5 6a       	lsl	r10,0x4
80002a50:	e2 1a 19 7c 	andl	r10,0x197c,COH
80002a54:	e0 1b e6 83 	andl	r11,0xe683
80002a58:	16 4a       	or	r10,r11
80002a5a:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80002a5c:	72 0a       	ld.w	r10,r9[0x0]
80002a5e:	a1 ba       	sbr	r10,0x1
80002a60:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80002a62:	70 79       	ld.w	r9,r8[0x1c]
80002a64:	a1 a9       	sbr	r9,0x0
80002a66:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a68:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002a6c:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80002a6e:	fe 69 01 f0 	mov	r9,-130576
80002a72:	30 4b       	mov	r11,4
80002a74:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80002a76:	30 2b       	mov	r11,2
80002a78:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80002a7a:	e0 69 10 00 	mov	r9,4096
80002a7e:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002a80:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}
80002a84:	5e fc       	retal	r12
80002a86:	d7 03       	nop

80002a88 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80002a88:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a8c:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002a90:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80002a92:	30 1c       	mov	r12,1
80002a94:	f0 1f 00 15 	mcall	80002ae8 <udd_attach+0x60>
	otg_unfreeze_clock();
80002a98:	fe 67 00 00 	mov	r7,-131072
80002a9c:	ee f8 08 00 	ld.w	r8,r7[2048]
80002aa0:	af c8       	cbr	r8,0xe
80002aa2:	ef 48 08 00 	st.w	r7[2048],r8
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
80002aa6:	6e 08       	ld.w	r8,r7[0x0]
80002aa8:	a9 c8       	cbr	r8,0x8
80002aaa:	8f 08       	st.w	r7[0x0],r8

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
80002aac:	f0 1f 00 10 	mcall	80002aec <udd_attach+0x64>
	udd_reset_ep_ctrl();	// Reset endpoint control
80002ab0:	f0 1f 00 10 	mcall	80002af0 <udd_attach+0x68>
	udd_ctrl_init();	// Reset endpoint control management
80002ab4:	f0 1f 00 10 	mcall	80002af4 <udd_attach+0x6c>

	// Enable USB line events
	udd_enable_reset_interrupt();
80002ab8:	30 8b       	mov	r11,8
80002aba:	8f 6b       	st.w	r7[0x18],r11
	udd_enable_suspend_interrupt();
80002abc:	30 19       	mov	r9,1
80002abe:	8f 69       	st.w	r7[0x18],r9
	udd_enable_wake_up_interrupt();
80002ac0:	31 08       	mov	r8,16
80002ac2:	8f 68       	st.w	r7[0x18],r8
	udd_enable_sof_interrupt();
80002ac4:	30 4a       	mov	r10,4
80002ac6:	8f 6a       	st.w	r7[0x18],r10
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
80002ac8:	8f 2b       	st.w	r7[0x8],r11
	udd_ack_sof();
80002aca:	8f 2a       	st.w	r7[0x8],r10
	udd_ack_msof();
80002acc:	30 2a       	mov	r10,2
80002ace:	8f 2a       	st.w	r7[0x8],r10

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80002ad0:	8f 29       	st.w	r7[0x8],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80002ad2:	8f 28       	st.w	r7[0x8],r8
	otg_freeze_clock();
80002ad4:	ee f8 08 00 	ld.w	r8,r7[2048]
80002ad8:	af a8       	sbr	r8,0xe
80002ada:	ef 48 08 00 	st.w	r7[2048],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002ade:	e3 b6 00 00 	mtsr	0x0,r6
	cpu_irq_restore(flags);
}
80002ae2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ae6:	00 00       	add	r0,r0
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	26 e8       	sub	r8,110
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	39 bc       	mov	r12,-101
80002af0:	80 00       	ld.sh	r0,r0[0x0]
80002af2:	2a 1a       	sub	r10,-95
80002af4:	80 00       	ld.sh	r0,r0[0x0]
80002af6:	27 5c       	sub	r12,117

80002af8 <udd_enable>:
	return true;
}


void udd_enable(void)
{
80002af8:	eb cd 40 c0 	pushm	r6-r7,lr
	irqflags_t flags;
	sysclk_enable_usb();
80002afc:	f0 1f 00 39 	mcall	80002be0 <udd_enable+0xe8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002b00:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002b04:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
80002b06:	fe 67 00 00 	mov	r7,-131072
80002b0a:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b0e:	af d8       	cbr	r8,0xf
80002b10:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_enabled();
80002b14:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return false;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
80002b18:	30 0a       	mov	r10,0
80002b1a:	e0 6b 02 20 	mov	r11,544
80002b1e:	4b 2c       	lddpc	r12,80002be4 <udd_enable+0xec>
80002b20:	f0 1f 00 32 	mcall	80002be8 <udd_enable+0xf0>
	otg_force_device_mode();
80002b24:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b28:	b9 b8       	sbr	r8,0x19
80002b2a:	ef 48 08 00 	st.w	r7[2048],r8
80002b2e:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b32:	b9 c8       	cbr	r8,0x18
80002b34:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
80002b38:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b3c:	ad c8       	cbr	r8,0xc
80002b3e:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
80002b42:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b46:	ad a8       	sbr	r8,0xc
80002b48:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
80002b4c:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b50:	af b8       	sbr	r8,0xf
80002b52:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
80002b56:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b5a:	af c8       	cbr	r8,0xe
80002b5c:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
80002b60:	ee f8 08 00 	ld.w	r8,r7[2048]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b64:	4a 28       	lddpc	r8,80002bec <udd_enable+0xf4>
80002b66:	70 0a       	ld.w	r10,r8[0x0]
80002b68:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
80002b6a:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b6e:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b72:	91 0a       	st.w	r8[0x0],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b74:	70 4a       	ld.w	r10,r8[0x10]
		udd_ep_job[i].stall_requested = false;
80002b76:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b7a:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b7e:	91 4a       	st.w	r8[0x10],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b80:	70 8a       	ld.w	r10,r8[0x20]
		udd_ep_job[i].stall_requested = false;
80002b82:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b86:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b8a:	91 8a       	st.w	r8[0x20],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80002b8c:	6e 08       	ld.w	r8,r7[0x0]
80002b8e:	ad c8       	cbr	r8,0xc
80002b90:	8f 08       	st.w	r7[0x0],r8
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80002b92:	6e 08       	ld.w	r8,r7[0x0]
80002b94:	e8 18 0c 00 	orl	r8,0xc00
80002b98:	8f 08       	st.w	r7[0x0],r8
#  endif
#endif
	udd_enable_vbus_interrupt();
80002b9a:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b9e:	a1 b8       	sbr	r8,0x1
80002ba0:	ef 48 08 00 	st.w	r7[2048],r8
	otg_freeze_clock();
80002ba4:	ee f8 08 00 	ld.w	r8,r7[2048]
80002ba8:	af a8       	sbr	r8,0xe
80002baa:	ef 48 08 00 	st.w	r7[2048],r8
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
80002bae:	fe 78 0c 00 	mov	r8,-62464
80002bb2:	f0 fa 01 44 	ld.w	r10,r8[324]
80002bb6:	30 1b       	mov	r11,1
80002bb8:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80002bbc:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80002bc0:	48 c8       	lddpc	r8,80002bf0 <udd_enable+0xf8>
80002bc2:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002bc4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002bc8:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002bca:	48 b8       	lddpc	r8,80002bf4 <udd_enable+0xfc>
80002bcc:	11 ba       	ld.ub	r10,r8[0x3]
80002bce:	2f fa       	sub	r10,-1
80002bd0:	b0 ba       	st.b	r8[0x3],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002bd2:	e3 b9 00 00 	mtsr	0x0,r9
80002bd6:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80002bda:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bde:	00 00       	add	r0,r0
80002be0:	80 00       	ld.sh	r0,r0[0x0]
80002be2:	32 a0       	mov	r0,42
80002be4:	80 00       	ld.sh	r0,r0[0x0]
80002be6:	2b f8       	sub	r8,-65
80002be8:	80 00       	ld.sh	r0,r0[0x0]
80002bea:	22 18       	sub	r8,33
80002bec:	00 00       	add	r0,r0
80002bee:	07 28       	ld.uh	r8,r3++
80002bf0:	00 00       	add	r0,r0
80002bf2:	07 58       	ld.sh	r8,--r3
80002bf4:	00 00       	add	r0,r0
80002bf6:	0a 28       	rsub	r8,r5

80002bf8 <udd_interrupt>:
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
80002bf8:	eb cd 40 fc 	pushm	r2-r7,lr
	if (Is_udd_sof()) {
80002bfc:	fe 68 00 00 	mov	r8,-131072
80002c00:	70 18       	ld.w	r8,r8[0x4]
80002c02:	e2 18 00 04 	andl	r8,0x4,COH
80002c06:	c0 f0       	breq	80002c24 <udd_interrupt+0x2c>
		udd_ack_sof();
80002c08:	fe 68 00 00 	mov	r8,-131072
80002c0c:	30 49       	mov	r9,4
80002c0e:	91 29       	st.w	r8[0x8],r9
		if (Is_udd_full_speed_mode()) {
80002c10:	f0 f8 08 04 	ld.w	r8,r8[2052]
80002c14:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80002c18:	e0 81 02 ce 	brne	800031b4 <udd_interrupt+0x5bc>
		udc_sof_notify();
80002c1c:	f0 1f 01 6f 	mcall	800031d8 <udd_interrupt+0x5e0>
80002c20:	e0 8f 02 ca 	bral	800031b4 <udd_interrupt+0x5bc>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
80002c24:	fe 68 00 00 	mov	r8,-131072
80002c28:	70 18       	ld.w	r8,r8[0x4]
80002c2a:	e2 18 00 02 	andl	r8,0x2,COH
80002c2e:	c0 90       	breq	80002c40 <udd_interrupt+0x48>
		udd_ack_msof();
80002c30:	30 29       	mov	r9,2
80002c32:	fe 68 00 00 	mov	r8,-131072
80002c36:	91 29       	st.w	r8[0x8],r9
		udc_sof_notify();
80002c38:	f0 1f 01 68 	mcall	800031d8 <udd_interrupt+0x5e0>
		goto udd_interrupt_end;
80002c3c:	e0 8f 02 bc 	bral	800031b4 <udd_interrupt+0x5bc>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80002c40:	fe 68 00 00 	mov	r8,-131072
80002c44:	70 18       	ld.w	r8,r8[0x4]
80002c46:	e2 18 10 00 	andl	r8,0x1000,COH
80002c4a:	e0 80 01 6f 	breq	80002f28 <udd_interrupt+0x330>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80002c4e:	fe 68 02 20 	mov	r8,-130528
80002c52:	31 09       	mov	r9,16
80002c54:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80002c56:	30 89       	mov	r9,8
80002c58:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80002c5a:	fe 68 01 30 	mov	r8,-130768
80002c5e:	70 08       	ld.w	r8,r8[0x0]
80002c60:	e2 18 00 04 	andl	r8,0x4,COH
80002c64:	e0 80 00 87 	breq	80002d72 <udd_interrupt+0x17a>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80002c68:	fe f8 05 74 	ld.w	r8,pc[1396]
80002c6c:	70 08       	ld.w	r8,r8[0x0]
80002c6e:	58 08       	cp.w	r8,0
80002c70:	c0 50       	breq	80002c7a <udd_interrupt+0x82>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80002c72:	f0 1f 01 5c 	mcall	800031e0 <udd_interrupt+0x5e8>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002c76:	f0 1f 01 5c 	mcall	800031e4 <udd_interrupt+0x5ec>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80002c7a:	fe 68 01 30 	mov	r8,-130768
80002c7e:	70 08       	ld.w	r8,r8[0x0]
80002c80:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80002c84:	58 88       	cp.w	r8,8
80002c86:	c0 90       	breq	80002c98 <udd_interrupt+0xa0>
		udd_ctrl_stall_data();
80002c88:	f0 1f 01 58 	mcall	800031e8 <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002c8c:	30 49       	mov	r9,4
80002c8e:	fe 68 01 60 	mov	r8,-130720
80002c92:	91 09       	st.w	r8[0x0],r9
80002c94:	e0 8f 02 90 	bral	800031b4 <udd_interrupt+0x5bc>
80002c98:	fc 18 e0 00 	movh	r8,0xe000
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80002c9c:	fe fc 05 50 	ld.w	r12,pc[1360]
80002ca0:	fc 1b 20 00 	movh	r11,0x2000
80002ca4:	f0 0c 00 09 	add	r9,r8,r12
80002ca8:	11 3a       	ld.ub	r10,r8++
80002caa:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80002cae:	30 8a       	mov	r10,8
80002cb0:	ea 1a e0 00 	orh	r10,0xe000
80002cb4:	14 38       	cp.w	r8,r10
80002cb6:	cf 71       	brne	80002ca4 <udd_interrupt+0xac>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002cb8:	fe f8 05 34 	ld.w	r8,pc[1332]
80002cbc:	90 19       	ld.sh	r9,r8[0x2]
80002cbe:	5c c9       	swap.bh	r9
80002cc0:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002cc2:	90 29       	ld.sh	r9,r8[0x4]
80002cc4:	5c c9       	swap.bh	r9
80002cc6:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002cc8:	90 39       	ld.sh	r9,r8[0x6]
80002cca:	5c c9       	swap.bh	r9
80002ccc:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80002cce:	f0 1f 01 49 	mcall	800031f0 <udd_interrupt+0x5f8>
80002cd2:	c0 91       	brne	80002ce4 <udd_interrupt+0xec>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
80002cd4:	f0 1f 01 45 	mcall	800031e8 <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002cd8:	30 49       	mov	r9,4
80002cda:	fe 68 01 60 	mov	r8,-130720
80002cde:	91 09       	st.w	r8[0x0],r9
80002ce0:	e0 8f 02 6a 	bral	800031b4 <udd_interrupt+0x5bc>
		return;
	}
	udd_ack_setup_received(0);
80002ce4:	30 49       	mov	r9,4
80002ce6:	fe 68 01 60 	mov	r8,-130720
80002cea:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002cec:	fe f8 05 00 	ld.w	r8,pc[1280]
80002cf0:	11 89       	ld.ub	r9,r8[0x0]
80002cf2:	30 08       	mov	r8,0
80002cf4:	f0 09 18 00 	cp.b	r9,r8
80002cf8:	c1 94       	brge	80002d2a <udd_interrupt+0x132>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80002cfa:	fe f8 04 f2 	ld.w	r8,pc[1266]
80002cfe:	90 e8       	ld.uh	r8,r8[0xc]
80002d00:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002d04:	5f 09       	sreq	r9
80002d06:	fe f8 04 ee 	ld.w	r8,pc[1262]
80002d0a:	b0 89       	st.b	r8[0x0],r9
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d0c:	30 08       	mov	r8,0
80002d0e:	fe f9 04 ea 	ld.w	r9,pc[1258]
80002d12:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d14:	fe f9 04 e8 	ld.w	r9,pc[1256]
80002d18:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002d1a:	30 29       	mov	r9,2
80002d1c:	fe f8 04 c0 	ld.w	r8,pc[1216]
80002d20:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent();	// Send first data transfer
80002d22:	f0 1f 01 38 	mcall	80003200 <udd_interrupt+0x608>
80002d26:	e0 8f 02 47 	bral	800031b4 <udd_interrupt+0x5bc>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002d2a:	fe f8 04 c2 	ld.w	r8,pc[1218]
80002d2e:	90 39       	ld.sh	r9,r8[0x6]
80002d30:	30 08       	mov	r8,0
80002d32:	f0 09 19 00 	cp.h	r9,r8
80002d36:	c0 51       	brne	80002d40 <udd_interrupt+0x148>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80002d38:	f0 1f 01 33 	mcall	80003204 <udd_interrupt+0x60c>
80002d3c:	e0 8f 02 3c 	bral	800031b4 <udd_interrupt+0x5bc>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d40:	30 08       	mov	r8,0
80002d42:	fe f9 04 b6 	ld.w	r9,pc[1206]
80002d46:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d48:	fe f9 04 b4 	ld.w	r9,pc[1204]
80002d4c:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80002d4e:	30 19       	mov	r9,1
80002d50:	fe f8 04 8c 	ld.w	r8,pc[1164]
80002d54:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80002d56:	31 08       	mov	r8,16
80002d58:	fe 69 01 60 	mov	r9,-130720
80002d5c:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d5e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002d62:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80002d64:	fe 6a 01 f0 	mov	r10,-130576
80002d68:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002d6a:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002d6e:	e0 8f 02 23 	bral	800031b4 <udd_interrupt+0x5bc>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80002d72:	fe 68 01 30 	mov	r8,-130768
80002d76:	70 08       	ld.w	r8,r8[0x0]
80002d78:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002d7c:	c0 b0       	breq	80002d92 <udd_interrupt+0x19a>
80002d7e:	fe 68 01 c0 	mov	r8,-130624
80002d82:	70 08       	ld.w	r8,r8[0x0]
80002d84:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002d88:	c0 50       	breq	80002d92 <udd_interrupt+0x19a>
		// IN packet sent
		udd_ctrl_in_sent();
80002d8a:	f0 1f 01 1e 	mcall	80003200 <udd_interrupt+0x608>
80002d8e:	e0 8f 02 13 	bral	800031b4 <udd_interrupt+0x5bc>
		return true;
	}
	if (Is_udd_out_received(0)) {
80002d92:	fe 68 01 30 	mov	r8,-130768
80002d96:	70 08       	ld.w	r8,r8[0x0]
80002d98:	e2 18 00 02 	andl	r8,0x2,COH
80002d9c:	e0 80 00 a3 	breq	80002ee2 <udd_interrupt+0x2ea>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80002da0:	fe f8 04 3c 	ld.w	r8,pc[1084]
80002da4:	70 08       	ld.w	r8,r8[0x0]
80002da6:	58 18       	cp.w	r8,1
80002da8:	c1 10       	breq	80002dca <udd_interrupt+0x1d2>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80002daa:	58 28       	cp.w	r8,2
80002dac:	5f 09       	sreq	r9
80002dae:	58 48       	cp.w	r8,4
80002db0:	5f 08       	sreq	r8
80002db2:	f3 e8 10 08 	or	r8,r9,r8
80002db6:	c0 40       	breq	80002dbe <udd_interrupt+0x1c6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
80002db8:	f0 1f 01 0a 	mcall	800031e0 <udd_interrupt+0x5e8>
80002dbc:	c0 38       	rjmp	80002dc2 <udd_interrupt+0x1ca>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80002dbe:	f0 1f 01 0b 	mcall	800031e8 <udd_interrupt+0x5f0>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002dc2:	f0 1f 01 09 	mcall	800031e4 <udd_interrupt+0x5ec>
80002dc6:	e0 8f 01 f7 	bral	800031b4 <udd_interrupt+0x5bc>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80002dca:	fe 68 01 30 	mov	r8,-130768
80002dce:	70 0b       	ld.w	r11,r8[0x0]
80002dd0:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002dd4:	fe f8 04 18 	ld.w	r8,pc[1048]
80002dd8:	90 69       	ld.sh	r9,r8[0xc]
80002dda:	fe f8 04 22 	ld.w	r8,pc[1058]
80002dde:	90 08       	ld.sh	r8,r8[0x0]
80002de0:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80002de4:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80002de8:	f6 0a 00 0a 	add	r10,r11,r10
80002dec:	14 3c       	cp.w	r12,r10
80002dee:	c0 44       	brge	80002df6 <udd_interrupt+0x1fe>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80002df0:	10 19       	sub	r9,r8
80002df2:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002df6:	fe f9 03 f6 	ld.w	r9,pc[1014]
80002dfa:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
80002dfc:	58 0b       	cp.w	r11,0
80002dfe:	e0 80 01 e2 	breq	800031c2 <udd_interrupt+0x5ca>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002e02:	5c 78       	castu.h	r8
80002e04:	10 09       	add	r9,r8
80002e06:	fc 18 e0 00 	movh	r8,0xe000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80002e0a:	11 3a       	ld.ub	r10,r8++
80002e0c:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80002e0e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80002e12:	f6 0a 19 00 	cp.h	r10,r11
80002e16:	cf a3       	brcs	80002e0a <udd_interrupt+0x212>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80002e18:	fe f9 03 e4 	ld.w	r9,pc[996]
80002e1c:	92 08       	ld.sh	r8,r9[0x0]
80002e1e:	16 08       	add	r8,r11
80002e20:	5c 88       	casts.h	r8
80002e22:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80002e24:	34 09       	mov	r9,64
80002e26:	f2 0b 19 00 	cp.h	r11,r9
80002e2a:	c0 e1       	brne	80002e46 <udd_interrupt+0x24e>
80002e2c:	fe f9 03 c0 	ld.w	r9,pc[960]
80002e30:	92 ba       	ld.uh	r10,r9[0x6]
80002e32:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80002e36:	fe f9 03 c2 	ld.w	r9,pc[962]
80002e3a:	92 89       	ld.uh	r9,r9[0x0]
80002e3c:	f6 09 00 09 	add	r9,r11,r9
80002e40:	12 3a       	cp.w	r10,r9
80002e42:	e0 89 00 1a 	brgt	80002e76 <udd_interrupt+0x27e>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80002e46:	fe f9 03 a6 	ld.w	r9,pc[934]
80002e4a:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80002e4c:	72 5c       	ld.w	r12,r9[0x14]
80002e4e:	58 0c       	cp.w	r12,0
80002e50:	c0 b0       	breq	80002e66 <udd_interrupt+0x26e>
			if (!udd_g_ctrlreq.over_under_run()) {
80002e52:	5d 1c       	icall	r12
80002e54:	c0 91       	brne	80002e66 <udd_interrupt+0x26e>
				// Stall ZLP
				udd_ctrl_stall_data();
80002e56:	f0 1f 00 e5 	mcall	800031e8 <udd_interrupt+0x5f0>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80002e5a:	30 29       	mov	r9,2
80002e5c:	fe 68 01 60 	mov	r8,-130720
80002e60:	91 09       	st.w	r8[0x0],r9
80002e62:	e0 8f 01 a9 	bral	800031b4 <udd_interrupt+0x5bc>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002e66:	30 29       	mov	r9,2
80002e68:	fe 68 01 60 	mov	r8,-130720
80002e6c:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80002e6e:	f0 1f 00 e6 	mcall	80003204 <udd_interrupt+0x60c>
80002e72:	e0 8f 01 a1 	bral	800031b4 <udd_interrupt+0x5bc>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80002e76:	fe f9 03 76 	ld.w	r9,pc[886]
80002e7a:	92 69       	ld.sh	r9,r9[0xc]
80002e7c:	f0 09 19 00 	cp.h	r9,r8
80002e80:	c2 21       	brne	80002ec4 <udd_interrupt+0x2cc>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80002e82:	fe f8 03 6a 	ld.w	r8,pc[874]
80002e86:	70 5c       	ld.w	r12,r8[0x14]
80002e88:	58 0c       	cp.w	r12,0
80002e8a:	c0 91       	brne	80002e9c <udd_interrupt+0x2a4>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
80002e8c:	f0 1f 00 d7 	mcall	800031e8 <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002e90:	30 29       	mov	r9,2
80002e92:	fe 68 01 60 	mov	r8,-130720
80002e96:	91 09       	st.w	r8[0x0],r9
80002e98:	e0 8f 01 8e 	bral	800031b4 <udd_interrupt+0x5bc>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80002e9c:	5d 1c       	icall	r12
80002e9e:	c0 81       	brne	80002eae <udd_interrupt+0x2b6>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80002ea0:	f0 1f 00 d2 	mcall	800031e8 <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002ea4:	30 29       	mov	r9,2
80002ea6:	fe 68 01 60 	mov	r8,-130720
80002eaa:	91 09       	st.w	r8[0x0],r9
80002eac:	c8 49       	rjmp	800031b4 <udd_interrupt+0x5bc>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002eae:	fe f9 03 4a 	ld.w	r9,pc[842]
80002eb2:	fe f8 03 4a 	ld.w	r8,pc[842]
80002eb6:	90 0b       	ld.sh	r11,r8[0x0]
80002eb8:	92 0a       	ld.sh	r10,r9[0x0]
80002eba:	f6 0a 00 0a 	add	r10,r11,r10
80002ebe:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80002ec0:	30 09       	mov	r9,0
80002ec2:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80002ec4:	fe 69 01 60 	mov	r9,-130720
80002ec8:	30 28       	mov	r8,2
80002eca:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80002ecc:	31 08       	mov	r8,16
80002ece:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ed0:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002ed4:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80002ed6:	fe 6a 01 f0 	mov	r10,-130576
80002eda:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002edc:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002ee0:	c6 a9       	rjmp	800031b4 <udd_interrupt+0x5bc>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80002ee2:	fe 68 01 30 	mov	r8,-130768
80002ee6:	70 08       	ld.w	r8,r8[0x0]
80002ee8:	e2 18 00 08 	andl	r8,0x8,COH
80002eec:	c1 80       	breq	80002f1c <udd_interrupt+0x324>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80002eee:	30 89       	mov	r9,8
80002ef0:	fe 68 01 60 	mov	r8,-130720
80002ef4:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80002ef6:	fe 68 01 30 	mov	r8,-130768
80002efa:	70 08       	ld.w	r8,r8[0x0]
80002efc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002f00:	e0 81 01 5a 	brne	800031b4 <udd_interrupt+0x5bc>
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002f04:	fe f8 02 d8 	ld.w	r8,pc[728]
80002f08:	70 08       	ld.w	r8,r8[0x0]
80002f0a:	58 38       	cp.w	r8,3
80002f0c:	e0 81 01 54 	brne	800031b4 <udd_interrupt+0x5bc>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80002f10:	e8 69 00 00 	mov	r9,524288
80002f14:	fe 68 01 f0 	mov	r8,-130576
80002f18:	91 09       	st.w	r8[0x0],r9
80002f1a:	c4 d9       	rjmp	800031b4 <udd_interrupt+0x5bc>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80002f1c:	fe 68 01 30 	mov	r8,-130768
80002f20:	70 08       	ld.w	r8,r8[0x0]
80002f22:	e2 18 00 10 	andl	r8,0x10,COH
80002f26:	c0 e1       	brne	80002f42 <udd_interrupt+0x34a>
80002f28:	fe f7 02 e0 	ld.w	r7,pc[736]
80002f2c:	0e 9a       	mov	r10,r7
80002f2e:	fe 69 01 34 	mov	r9,-130764
80002f32:	30 0b       	mov	r11,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f34:	fe 66 00 00 	mov	r6,-131072
80002f38:	fc 14 02 00 	movh	r4,0x200
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002f3c:	e0 63 10 00 	mov	r3,4096
80002f40:	c1 e8       	rjmp	80002f7c <udd_interrupt+0x384>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80002f42:	31 09       	mov	r9,16
80002f44:	fe 68 01 60 	mov	r8,-130720
80002f48:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80002f4a:	fe 68 01 30 	mov	r8,-130768
80002f4e:	70 08       	ld.w	r8,r8[0x0]
80002f50:	e2 18 00 02 	andl	r8,0x2,COH
80002f54:	e0 81 01 30 	brne	800031b4 <udd_interrupt+0x5bc>
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80002f58:	fe f8 02 84 	ld.w	r8,pc[644]
80002f5c:	70 08       	ld.w	r8,r8[0x0]
80002f5e:	58 18       	cp.w	r8,1
80002f60:	c0 41       	brne	80002f68 <udd_interrupt+0x370>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80002f62:	f0 1f 00 a9 	mcall	80003204 <udd_interrupt+0x60c>
80002f66:	c2 79       	rjmp	800031b4 <udd_interrupt+0x5bc>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80002f68:	58 48       	cp.w	r8,4
80002f6a:	e0 81 01 25 	brne	800031b4 <udd_interrupt+0x5bc>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002f6e:	e8 69 00 00 	mov	r9,524288
80002f72:	fe 68 01 f0 	mov	r8,-130576
80002f76:	91 09       	st.w	r8[0x0],r9
80002f78:	c1 e9       	rjmp	800031b4 <udd_interrupt+0x5bc>
80002f7a:	10 9b       	mov	r11,r8
80002f7c:	f6 c8 ff ff 	sub	r8,r11,-1
80002f80:	14 9c       	mov	r12,r10
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f82:	6c 45       	ld.w	r5,r6[0x10]
80002f84:	10 9e       	mov	lr,r8
80002f86:	e8 0b 09 4b 	lsl	r11,r4,r11
80002f8a:	f7 e5 00 05 	and	r5,r11,r5
80002f8e:	c4 b0       	breq	80003024 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80002f90:	6c 15       	ld.w	r5,r6[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f92:	f7 e5 00 05 	and	r5,r11,r5
80002f96:	c4 70       	breq	80003024 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80002f98:	fe 69 00 00 	mov	r9,-131072
80002f9c:	93 5b       	st.w	r9[0x14],r11
			if (ptr_job->b_raise_dma) {
80002f9e:	74 09       	ld.w	r9,r10[0x0]
80002fa0:	e6 19 20 00 	andh	r9,0x2000,COH
80002fa4:	c0 50       	breq	80002fae <udd_interrupt+0x3b6>
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
80002fa6:	fe 69 00 00 	mov	r9,-131072
80002faa:	93 3b       	st.w	r9[0xc],r11
80002fac:	c0 a8       	rjmp	80002fc0 <udd_interrupt+0x3c8>
			}else{
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
80002fae:	f0 09 15 04 	lsl	r9,r8,0x4
80002fb2:	e0 39 fd 00 	sub	r9,130304
80002fb6:	72 39       	ld.w	r9,r9[0xc]
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002fb8:	b1 89       	lsr	r9,0x10
80002fba:	74 2a       	ld.w	r10,r10[0x8]
80002fbc:	12 1a       	sub	r10,r9
80002fbe:	99 2a       	st.w	r12[0x8],r10
			}

			if (Is_udd_endpoint_in(ep)) {
80002fc0:	a3 68       	lsl	r8,0x2
80002fc2:	fe 6b 01 00 	mov	r11,-130816
80002fc6:	f0 0b 00 09 	add	r9,r8,r11
80002fca:	72 09       	ld.w	r9,r9[0x0]
80002fcc:	e2 19 01 00 	andl	r9,0x100,COH
80002fd0:	c2 60       	breq	8000301c <udd_interrupt+0x424>
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
80002fd2:	78 09       	ld.w	r9,r12[0x0]
80002fd4:	e6 19 40 00 	andh	r9,0x4000,COH
80002fd8:	c2 20       	breq	8000301c <udd_interrupt+0x424>
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
80002fda:	fe 6a 01 60 	mov	r10,-130720
80002fde:	f0 0a 00 09 	add	r9,r8,r10
80002fe2:	30 1a       	mov	r10,1
80002fe4:	93 0a       	st.w	r9[0x0],r10
					if (Is_udd_write_enabled(ep)) {
80002fe6:	fe 6b 01 30 	mov	r11,-130768
80002fea:	f0 0b 00 09 	add	r9,r8,r11
80002fee:	72 0a       	ld.w	r10,r9[0x0]
						udd_raise_in_send(ep);
80002ff0:	fe 6b 01 90 	mov	r11,-130672
80002ff4:	f0 0b 00 09 	add	r9,r8,r11
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002ff8:	e6 1a 00 01 	andh	r10,0x1,COH
						udd_raise_in_send(ep);
80002ffc:	f9 ba 01 01 	movne	r10,1
80003000:	f3 fa 1a 00 	st.wne	r9[0x0],r10
					}
					udd_enable_in_send_interrupt(ep);
80003004:	e0 38 fe 10 	sub	r8,130576
80003008:	30 19       	mov	r9,1
8000300a:	91 09       	st.w	r8[0x0],r9
					udd_enable_endpoint_interrupt(ep);
8000300c:	e0 68 10 00 	mov	r8,4096
80003010:	f0 0e 09 4e 	lsl	lr,r8,lr
80003014:	fe 68 00 00 	mov	r8,-131072
80003018:	91 6e       	st.w	r8[0x18],lr
8000301a:	cc d8       	rjmp	800031b4 <udd_interrupt+0x5bc>
					return true;
				}
			}
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
8000301c:	30 0b       	mov	r11,0
8000301e:	f0 1f 00 7c 	mcall	8000320c <udd_interrupt+0x614>
80003022:	cc 98       	rjmp	800031b4 <udd_interrupt+0x5bc>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80003024:	6c 4b       	ld.w	r11,r6[0x10]
80003026:	e6 0e 09 4e 	lsl	lr,r3,lr
8000302a:	fd eb 00 0b 	and	r11,lr,r11
8000302e:	c4 60       	breq	800030ba <udd_interrupt+0x4c2>
80003030:	e0 7b fe d0 	mov	r11,130768
80003034:	f2 0b 00 02 	add	r2,r9,r11
80003038:	f2 cb ff 70 	sub	r11,r9,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
8000303c:	76 05       	ld.w	r5,r11[0x0]
8000303e:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
80003042:	c1 50       	breq	8000306c <udd_interrupt+0x474>
80003044:	72 05       	ld.w	r5,r9[0x0]
80003046:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8000304a:	c1 10       	breq	8000306c <udd_interrupt+0x474>
				udd_disable_in_send_interrupt(ep);
8000304c:	fe 6a 02 20 	mov	r10,-130528
80003050:	e4 0a 00 08 	add	r8,r2,r10
80003054:	30 19       	mov	r9,1
80003056:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
80003058:	e0 32 fe a0 	sub	r2,130720
8000305c:	85 09       	st.w	r2[0x0],r9
				udd_ack_fifocon(ep);
8000305e:	e0 69 40 00 	mov	r9,16384
80003062:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false);
80003064:	30 0b       	mov	r11,0
80003066:	f0 1f 00 6a 	mcall	8000320c <udd_interrupt+0x614>
8000306a:	ca 58       	rjmp	800031b4 <udd_interrupt+0x5bc>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0==udd_nb_busy_bank(ep))) {
8000306c:	76 0b       	ld.w	r11,r11[0x0]
8000306e:	e2 1b 10 00 	andl	r11,0x1000,COH
80003072:	c2 40       	breq	800030ba <udd_interrupt+0x4c2>
80003074:	72 0b       	ld.w	r11,r9[0x0]
80003076:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
8000307a:	c2 01       	brne	800030ba <udd_interrupt+0x4c2>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
8000307c:	fe 69 02 20 	mov	r9,-130528
80003080:	e4 09 00 08 	add	r8,r2,r9
80003084:	e0 69 10 00 	mov	r9,4096
80003088:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
8000308a:	fe 68 00 00 	mov	r8,-131072
8000308e:	91 5e       	st.w	r8[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
80003090:	78 08       	ld.w	r8,r12[0x0]
80003092:	30 09       	mov	r9,0
80003094:	f1 d9 d3 81 	bfins	r8,r9,0x1c,0x1
80003098:	99 08       	st.w	r12[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
8000309a:	fe 6b 01 00 	mov	r11,-130816
8000309e:	e4 0b 00 08 	add	r8,r2,r11
800030a2:	70 09       	ld.w	r9,r8[0x0]
800030a4:	a9 d9       	cbr	r9,0x9
800030a6:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
800030a8:	e0 32 fe 10 	sub	r2,130576
800030ac:	e8 68 00 00 	mov	r8,524288
800030b0:	85 08       	st.w	r2[0x0],r8
				udd_reset_data_toggle(ep);
800030b2:	e4 68 00 00 	mov	r8,262144
800030b6:	85 08       	st.w	r2[0x0],r8
800030b8:	c7 e8       	rjmp	800031b4 <udd_interrupt+0x5bc>
800030ba:	2f 0a       	sub	r10,-16
800030bc:	2f c9       	sub	r9,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
800030be:	58 38       	cp.w	r8,3
800030c0:	fe 91 ff 5d 	brne	80002f7a <udd_interrupt+0x382>
800030c4:	c8 38       	rjmp	800031ca <udd_interrupt+0x5d2>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
800030c6:	30 89       	mov	r9,8
800030c8:	fe 68 00 00 	mov	r8,-131072
800030cc:	91 29       	st.w	r8[0x8],r9
#if __ICCAVR32__
#if !defined(AVR32_USBB_IRQ_GROUP)
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
800030ce:	ee c6 ff d0 	sub	r6,r7,-48
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
800030d2:	30 15       	mov	r5,1
800030d4:	0a 9b       	mov	r11,r5
800030d6:	0e 9c       	mov	r12,r7
800030d8:	f0 1f 00 4d 	mcall	8000320c <udd_interrupt+0x614>
800030dc:	2f 07       	sub	r7,-16

static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
800030de:	0c 37       	cp.w	r7,r6
800030e0:	cf a1       	brne	800030d4 <udd_interrupt+0x4dc>
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
800030e2:	f0 1f 00 4c 	mcall	80003210 <udd_interrupt+0x618>
		// Reset endpoint control
		udd_reset_ep_ctrl();
800030e6:	f0 1f 00 4c 	mcall	80003214 <udd_interrupt+0x61c>
		// Reset endpoint control management
		udd_ctrl_init();
800030ea:	f0 1f 00 3f 	mcall	800031e4 <udd_interrupt+0x5ec>
		goto udd_interrupt_end;
800030ee:	c6 38       	rjmp	800031b4 <udd_interrupt+0x5bc>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
800030f0:	fe 68 00 00 	mov	r8,-131072
800030f4:	70 48       	ld.w	r8,r8[0x10]
800030f6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800030fa:	c1 b0       	breq	80003130 <udd_interrupt+0x538>
800030fc:	fe 68 00 00 	mov	r8,-131072
80003100:	70 18       	ld.w	r8,r8[0x4]
80003102:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003106:	c1 50       	breq	80003130 <udd_interrupt+0x538>
		otg_unfreeze_clock();
80003108:	fe 68 00 00 	mov	r8,-131072
8000310c:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003110:	af c9       	cbr	r9,0xe
80003112:	f1 49 08 00 	st.w	r8[2048],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80003116:	30 19       	mov	r9,1
80003118:	91 59       	st.w	r8[0x14],r9
		udd_enable_wake_up_interrupt();
8000311a:	31 09       	mov	r9,16
8000311c:	91 69       	st.w	r8[0x18],r9
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
8000311e:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003122:	af a9       	sbr	r9,0xe
80003124:	f1 49 08 00 	st.w	r8[2048],r9
		udd_sleep_mode(false);	// Enter in SUSPEND mode
80003128:	30 0c       	mov	r12,0
8000312a:	f0 1f 00 3c 	mcall	80003218 <udd_interrupt+0x620>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
8000312e:	c4 38       	rjmp	800031b4 <udd_interrupt+0x5bc>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80003130:	fe 68 00 00 	mov	r8,-131072
80003134:	70 48       	ld.w	r8,r8[0x10]
80003136:	e2 18 00 10 	andl	r8,0x10,COH
8000313a:	c2 10       	breq	8000317c <udd_interrupt+0x584>
8000313c:	fe 68 00 00 	mov	r8,-131072
80003140:	70 18       	ld.w	r8,r8[0x4]
80003142:	e2 18 00 10 	andl	r8,0x10,COH
80003146:	c1 b0       	breq	8000317c <udd_interrupt+0x584>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80003148:	fe 68 00 00 	mov	r8,-131072
8000314c:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003150:	af c9       	cbr	r9,0xe
80003152:	f1 49 08 00 	st.w	r8[2048],r9
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80003156:	c0 58       	rjmp	80003160 <udd_interrupt+0x568>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
80003158:	70 19       	ld.w	r9,r8[0x4]
8000315a:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8000315e:	c0 61       	brne	8000316a <udd_interrupt+0x572>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80003160:	f0 f9 08 04 	ld.w	r9,r8[2052]
80003164:	e2 19 40 00 	andl	r9,0x4000,COH
80003168:	cf 80       	breq	80003158 <udd_interrupt+0x560>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
8000316a:	fe 68 00 00 	mov	r8,-131072
8000316e:	31 09       	mov	r9,16
80003170:	91 59       	st.w	r8[0x14],r9
		udd_enable_suspend_interrupt();
80003172:	30 1c       	mov	r12,1
80003174:	91 6c       	st.w	r8[0x18],r12
		udd_sleep_mode(true);	// Enter in IDLE mode
80003176:	f0 1f 00 29 	mcall	80003218 <udd_interrupt+0x620>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
8000317a:	c1 d8       	rjmp	800031b4 <udd_interrupt+0x5bc>
	}

	if (Is_udd_vbus_transition()) {
8000317c:	fe 68 00 00 	mov	r8,-131072
80003180:	f0 f8 08 04 	ld.w	r8,r8[2052]
80003184:	e2 18 00 02 	andl	r8,0x2,COH
80003188:	c1 60       	breq	800031b4 <udd_interrupt+0x5bc>
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
8000318a:	fe 68 00 00 	mov	r8,-131072
8000318e:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003192:	af c9       	cbr	r9,0xe
80003194:	f1 49 08 00 	st.w	r8[2048],r9
		udd_ack_vbus_transition();
80003198:	30 29       	mov	r9,2
8000319a:	f1 49 08 08 	st.w	r8[2056],r9
		otg_freeze_clock();
8000319e:	f0 f9 08 00 	ld.w	r9,r8[2048]
800031a2:	af a9       	sbr	r9,0xe
800031a4:	f1 49 08 00 	st.w	r8[2048],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_udd_vbus_high());
800031a8:	f0 fc 08 04 	ld.w	r12,r8[2052]
800031ac:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
800031b0:	f0 1f 00 1b 	mcall	8000321c <udd_interrupt+0x624>
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
800031b4:	fe 68 00 00 	mov	r8,-131072
800031b8:	f0 f8 08 18 	ld.w	r8,r8[2072]
	return;
}
800031bc:	e3 cd 40 fc 	ldm	sp++,r2-r7,lr
800031c0:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800031c2:	48 f9       	lddpc	r9,800031fc <udd_interrupt+0x604>
800031c4:	b2 08       	st.h	r9[0x0],r8
800031c6:	fe 9f fe 40 	bral	80002e46 <udd_interrupt+0x24e>
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
800031ca:	fe 68 00 00 	mov	r8,-131072
800031ce:	70 18       	ld.w	r8,r8[0x4]
800031d0:	e2 18 00 08 	andl	r8,0x8,COH
800031d4:	c8 e0       	breq	800030f0 <udd_interrupt+0x4f8>
800031d6:	c7 8b       	rjmp	800030c6 <udd_interrupt+0x4ce>
800031d8:	80 00       	ld.sh	r0,r0[0x0]
800031da:	37 9c       	mov	r12,121
800031dc:	00 00       	add	r0,r0
800031de:	07 5c       	ld.sh	r12,--r3
800031e0:	80 00       	ld.sh	r0,r0[0x0]
800031e2:	25 1c       	sub	r12,81
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	27 5c       	sub	r12,117
800031e8:	80 00       	ld.sh	r0,r0[0x0]
800031ea:	25 04       	sub	r4,80
800031ec:	00 00       	add	r0,r0
800031ee:	0a 10       	sub	r0,r5
800031f0:	80 00       	ld.sh	r0,r0[0x0]
800031f2:	3a 1c       	mov	r12,-95
800031f4:	00 00       	add	r0,r0
800031f6:	07 60       	ld.uh	r0,--r3
800031f8:	00 00       	add	r0,r0
800031fa:	07 24       	ld.uh	r4,r3++
800031fc:	00 00       	add	r0,r0
800031fe:	07 5a       	ld.sh	r10,--r3
80003200:	80 00       	ld.sh	r0,r0[0x0]
80003202:	27 bc       	sub	r12,123
80003204:	80 00       	ld.sh	r0,r0[0x0]
80003206:	27 90       	sub	r0,121
80003208:	00 00       	add	r0,r0
8000320a:	07 28       	ld.uh	r8,r3++
8000320c:	80 00       	ld.sh	r0,r0[0x0]
8000320e:	25 30       	sub	r0,83
80003210:	80 00       	ld.sh	r0,r0[0x0]
80003212:	39 bc       	mov	r12,-101
80003214:	80 00       	ld.sh	r0,r0[0x0]
80003216:	2a 1a       	sub	r10,-95
80003218:	80 00       	ld.sh	r0,r0[0x0]
8000321a:	26 e8       	sub	r8,110
8000321c:	80 00       	ld.sh	r0,r0[0x0]
8000321e:	3f 1c       	mov	r12,-15

80003220 <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003220:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003224:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80003226:	fe 78 0c 00 	mov	r8,-62464
8000322a:	71 59       	ld.w	r9,r8[0x54]
8000322c:	e2 19 00 40 	andl	r9,0x40,COH
80003230:	cf d0       	breq	8000322a <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80003232:	a3 6c       	lsl	r12,0x2
80003234:	e0 2c f3 f8 	sub	r12,62456
80003238:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
8000323a:	30 19       	mov	r9,1
8000323c:	f2 0b 09 4b 	lsl	r11,r9,r11
80003240:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80003242:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003244:	e3 ba 00 00 	mtsr	0x0,r10

	cpu_irq_restore(flags);
}
80003248:	5e fc       	retal	r12
8000324a:	d7 03       	nop

8000324c <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
8000324c:	eb cd 40 e0 	pushm	r5-r7,lr
80003250:	18 96       	mov	r6,r12
80003252:	58 9c       	cp.w	r12,9
80003254:	5f 07       	sreq	r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003256:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
8000325a:	d3 03       	ssrf	0x10
		pbus_id = 1;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_bus_refcount[pbus_id])
8000325c:	48 f8       	lddpc	r8,80003298 <sysclk_enable_pbb_module+0x4c>
8000325e:	f0 07 07 09 	ld.ub	r9,r8[r7]
80003262:	30 08       	mov	r8,0
80003264:	f0 09 18 00 	cp.b	r9,r8
80003268:	c0 a1       	brne	8000327c <sysclk_enable_pbb_module+0x30>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000326a:	ee 0b 15 01 	lsl	r11,r7,0x1
8000326e:	f9 bb 01 06 	movne	r11,6
80003272:	f9 bb 00 02 	moveq	r11,2
80003276:	30 1c       	mov	r12,1
80003278:	f0 1f 00 09 	mcall	8000329c <sysclk_enable_pbb_module+0x50>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
	sysclk_bus_refcount[pbus_id]++;
8000327c:	48 78       	lddpc	r8,80003298 <sysclk_enable_pbb_module+0x4c>
8000327e:	f0 07 07 09 	ld.ub	r9,r8[r7]
80003282:	2f f9       	sub	r9,-1
80003284:	f0 07 0b 09 	st.b	r8[r7],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003288:	e3 b5 00 00 	mtsr	0x0,r5

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
8000328c:	0c 9b       	mov	r11,r6
8000328e:	30 3c       	mov	r12,3
80003290:	f0 1f 00 03 	mcall	8000329c <sysclk_enable_pbb_module+0x50>
}
80003294:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003298:	00 00       	add	r0,r0
8000329a:	07 64       	ld.uh	r4,--r3
8000329c:	80 00       	ld.sh	r0,r0[0x0]
8000329e:	32 20       	mov	r0,34

800032a0 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
800032a0:	d4 01       	pushm	lr
	struct genclk_config gcfg;

	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
800032a2:	30 1c       	mov	r12,1
800032a4:	f0 1f 00 0f 	mcall	800032e0 <sysclk_enable_usb+0x40>
800032a8:	30 3b       	mov	r11,3
800032aa:	30 1c       	mov	r12,1
800032ac:	f0 1f 00 0e 	mcall	800032e4 <sysclk_enable_usb+0x44>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032b0:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032b4:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800032b6:	fe 78 0c 00 	mov	r8,-62464
800032ba:	e0 6a 03 07 	mov	r10,775
800032be:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800032c0:	70 0a       	ld.w	r10,r8[0x0]
800032c2:	a3 aa       	sbr	r10,0x2
800032c4:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800032c6:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
800032ca:	71 59       	ld.w	r9,r8[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800032cc:	e2 19 00 80 	andl	r9,0x80,COH
800032d0:	cf d0       	breq	800032ca <sysclk_enable_usb+0x2a>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800032d2:	30 49       	mov	r9,4
800032d4:	fe 78 0c 00 	mov	r8,-62464
800032d8:	f1 49 00 70 	st.w	r8[112],r9
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
800032dc:	d8 02       	popm	pc
800032de:	00 00       	add	r0,r0
800032e0:	80 00       	ld.sh	r0,r0[0x0]
800032e2:	32 4c       	mov	r12,36
800032e4:	80 00       	ld.sh	r0,r0[0x0]
800032e6:	32 20       	mov	r0,34

800032e8 <udi_cdc_data_disable>:
	UDI_CDC_DISABLE_EXT();
}

void udi_cdc_data_disable(void)
{
}
800032e8:	5e fc       	retal	r12
800032ea:	d7 03       	nop

800032ec <udi_cdc_comm_setup>:


bool udi_cdc_comm_setup(void)
{
	if (Udd_setup_is_in()) {
800032ec:	49 e8       	lddpc	r8,80003364 <udi_cdc_comm_setup+0x78>
800032ee:	11 88       	ld.ub	r8,r8[0x0]
800032f0:	30 09       	mov	r9,0
800032f2:	f2 08 18 00 	cp.b	r8,r9
800032f6:	c1 84       	brge	80003326 <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests 
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800032f8:	e2 18 00 60 	andl	r8,0x60,COH
800032fc:	e0 48 00 20 	cp.w	r8,32
80003300:	c3 11       	brne	80003362 <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
80003302:	49 98       	lddpc	r8,80003364 <udi_cdc_comm_setup+0x78>
80003304:	11 99       	ld.ub	r9,r8[0x1]
80003306:	32 18       	mov	r8,33
80003308:	f0 09 18 00 	cp.b	r9,r8
8000330c:	c2 b1       	brne	80003362 <udi_cdc_comm_setup+0x76>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000330e:	49 68       	lddpc	r8,80003364 <udi_cdc_comm_setup+0x78>
80003310:	90 39       	ld.sh	r9,r8[0x6]
80003312:	30 78       	mov	r8,7
80003314:	f0 09 19 00 	cp.h	r9,r8
80003318:	c2 51       	brne	80003362 <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.payload =
8000331a:	49 38       	lddpc	r8,80003364 <udi_cdc_comm_setup+0x78>
8000331c:	49 39       	lddpc	r9,80003368 <udi_cdc_comm_setup+0x7c>
8000331e:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003320:	30 79       	mov	r9,7
80003322:	b0 69       	st.h	r8[0xc],r9
80003324:	5e ff       	retal	1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests  
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80003326:	e2 18 00 60 	andl	r8,0x60,COH
8000332a:	e0 48 00 20 	cp.w	r8,32
8000332e:	c1 a1       	brne	80003362 <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
80003330:	48 d8       	lddpc	r8,80003364 <udi_cdc_comm_setup+0x78>
80003332:	11 98       	ld.ub	r8,r8[0x1]
80003334:	32 09       	mov	r9,32
80003336:	f2 08 18 00 	cp.b	r8,r9
8000333a:	c0 60       	breq	80003346 <udi_cdc_comm_setup+0x5a>
8000333c:	32 29       	mov	r9,34
8000333e:	f2 08 18 00 	cp.b	r8,r9
80003342:	c1 01       	brne	80003362 <udi_cdc_comm_setup+0x76>
80003344:	5e ff       	retal	1
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003346:	48 88       	lddpc	r8,80003364 <udi_cdc_comm_setup+0x78>
80003348:	90 39       	ld.sh	r9,r8[0x6]
8000334a:	30 78       	mov	r8,7
8000334c:	f0 09 19 00 	cp.h	r9,r8
80003350:	c0 91       	brne	80003362 <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.callback =
80003352:	48 58       	lddpc	r8,80003364 <udi_cdc_comm_setup+0x78>
80003354:	48 69       	lddpc	r9,8000336c <udi_cdc_comm_setup+0x80>
80003356:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80003358:	48 49       	lddpc	r9,80003368 <udi_cdc_comm_setup+0x7c>
8000335a:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
8000335c:	30 79       	mov	r9,7
8000335e:	b0 69       	st.h	r8[0xc],r9
80003360:	5e ff       	retal	1
						sizeof(udi_cdc_line_coding);
				return true;
80003362:	5e fd       	retal	0
80003364:	00 00       	add	r0,r0
80003366:	0a 10       	sub	r0,r5
80003368:	00 00       	add	r0,r0
8000336a:	07 68       	ld.uh	r8,--r3
8000336c:	80 00       	ld.sh	r0,r0[0x0]
8000336e:	33 74       	mov	r4,55

80003370 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
80003370:	5e fd       	retal	0

80003372 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
80003372:	5e fd       	retal	0

80003374 <udi_cdc_line_coding_received>:

void udi_cdc_line_coding_received(void)
{
	// Send line coding to component associated to CDC
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));
}
80003374:	5e fc       	retal	r12
80003376:	d7 03       	nop

80003378 <udi_cdc_is_rx_ready>:
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
80003378:	48 68       	lddpc	r8,80003390 <udi_cdc_is_rx_ready+0x18>
8000337a:	11 8a       	ld.ub	r10,r8[0x0]
8000337c:	48 68       	lddpc	r8,80003394 <udi_cdc_is_rx_ready+0x1c>
8000337e:	90 08       	ld.sh	r8,r8[0x0]
80003380:	48 69       	lddpc	r9,80003398 <udi_cdc_is_rx_ready+0x20>
80003382:	f2 0a 04 19 	ld.sh	r9,r9[r10<<0x1]
80003386:	f0 09 19 00 	cp.h	r9,r8
}
8000338a:	5f bc       	srhi	r12
8000338c:	5e fc       	retal	r12
8000338e:	00 00       	add	r0,r0
80003390:	00 00       	add	r0,r0
80003392:	07 fc       	ld.ub	r12,r3[0x7]
80003394:	00 00       	add	r0,r0
80003396:	07 f8       	ld.ub	r8,r3[0x7]
80003398:	00 00       	add	r0,r0
8000339a:	07 f4       	ld.ub	r4,r3[0x7]

8000339c <udi_cdc_is_tx_ready>:


bool udi_cdc_is_tx_ready(void)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS) {
8000339c:	49 58       	lddpc	r8,800033f0 <udi_cdc_is_tx_ready+0x54>
8000339e:	11 89       	ld.ub	r9,r8[0x0]
800033a0:	49 58       	lddpc	r8,800033f4 <udi_cdc_is_tx_ready+0x58>
800033a2:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800033a6:	34 08       	mov	r8,64
800033a8:	f0 09 19 00 	cp.h	r9,r8
800033ac:	c0 20       	breq	800033b0 <udi_cdc_is_tx_ready+0x14>
800033ae:	5e ff       	retal	1
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send) {
800033b0:	49 28       	lddpc	r8,800033f8 <udi_cdc_is_tx_ready+0x5c>
800033b2:	11 88       	ld.ub	r8,r8[0x0]
800033b4:	58 08       	cp.w	r8,0
800033b6:	c1 21       	brne	800033da <udi_cdc_is_tx_ready+0x3e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800033b8:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800033bc:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing) {
800033be:	49 09       	lddpc	r9,800033fc <udi_cdc_is_tx_ready+0x60>
800033c0:	13 89       	ld.ub	r9,r9[0x0]
800033c2:	58 09       	cp.w	r9,0
800033c4:	c0 91       	brne	800033d6 <udi_cdc_is_tx_ready+0x3a>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send = true;
800033c6:	30 1a       	mov	r10,1
800033c8:	48 c9       	lddpc	r9,800033f8 <udi_cdc_is_tx_ready+0x5c>
800033ca:	b2 8a       	st.b	r9[0x0],r10
			udi_cdc_tx_buf_sel = (udi_cdc_tx_buf_sel==0)?1:0;
800033cc:	48 99       	lddpc	r9,800033f0 <udi_cdc_is_tx_ready+0x54>
800033ce:	13 8a       	ld.ub	r10,r9[0x0]
800033d0:	58 0a       	cp.w	r10,0
800033d2:	5f 0a       	sreq	r10
800033d4:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800033d6:	e3 b8 00 00 	mtsr	0x0,r8
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
800033da:	48 68       	lddpc	r8,800033f0 <udi_cdc_is_tx_ready+0x54>
800033dc:	11 89       	ld.ub	r9,r8[0x0]
800033de:	48 68       	lddpc	r8,800033f4 <udi_cdc_is_tx_ready+0x58>
800033e0:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800033e4:	34 08       	mov	r8,64
800033e6:	f0 09 19 00 	cp.h	r9,r8
800033ea:	5f 1c       	srne	r12
}
800033ec:	5e fc       	retal	r12
800033ee:	00 00       	add	r0,r0
800033f0:	00 00       	add	r0,r0
800033f2:	07 6f       	ld.uh	pc,--r3
800033f4:	00 00       	add	r0,r0
800033f6:	07 70       	ld.ub	r0,--r3
800033f8:	00 00       	add	r0,r0
800033fa:	08 81       	andn	r1,r4
800033fc:	00 00       	add	r0,r0
800033fe:	07 fe       	ld.ub	lr,r3[0x7]

80003400 <udi_cdc_putc>:


int udi_cdc_putc(int value)
{
80003400:	eb cd 40 fe 	pushm	r1-r7,lr
80003404:	18 97       	mov	r7,r12
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003406:	49 88       	lddpc	r8,80003464 <udi_cdc_putc+0x64>
80003408:	11 e9       	ld.ub	r9,r8[0x6]
8000340a:	30 98       	mov	r8,9
8000340c:	f0 09 18 00 	cp.b	r9,r8
80003410:	5f 04       	sreq	r4

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
		if (!udi_cdc_running) {
80003412:	49 66       	lddpc	r6,80003468 <udi_cdc_putc+0x68>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003414:	49 63       	lddpc	r3,8000346c <udi_cdc_putc+0x6c>
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003416:	49 75       	lddpc	r5,80003470 <udi_cdc_putc+0x70>
80003418:	49 72       	lddpc	r2,80003474 <udi_cdc_putc+0x74>
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
8000341a:	30 01       	mov	r1,0

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
8000341c:	f0 1f 00 17 	mcall	80003478 <udi_cdc_putc+0x78>
80003420:	c0 51       	brne	8000342a <udi_cdc_putc+0x2a>
		if (!udi_cdc_running) {
80003422:	0d 88       	ld.ub	r8,r6[0x0]
80003424:	58 08       	cp.w	r8,0
80003426:	cf b1       	brne	8000341c <udi_cdc_putc+0x1c>
80003428:	c1 b8       	rjmp	8000345e <udi_cdc_putc+0x5e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000342a:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000342e:	d3 03       	ssrf	0x10
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003430:	07 88       	ld.ub	r8,r3[0x0]
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003432:	ea 08 04 19 	ld.sh	r9,r5[r8<<0x1]
80003436:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
8000343a:	f0 0c 15 06 	lsl	r12,r8,0x6
8000343e:	f8 0b 00 0b 	add	r11,r12,r11
80003442:	e4 0b 0b 07 	st.b	r2[r11],r7
80003446:	2f f9       	sub	r9,-1
80003448:	ea 08 0a 19 	st.h	r5[r8<<0x1],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000344c:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);

	if (b_databit_9) {
80003450:	58 04       	cp.w	r4,0
80003452:	c0 31       	brne	80003458 <udi_cdc_putc+0x58>
80003454:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
80003458:	a9 47       	asr	r7,0x8
8000345a:	02 94       	mov	r4,r1
8000345c:	ce 0b       	rjmp	8000341c <udi_cdc_putc+0x1c>
		goto udi_cdc_putc_process_one_byte;
8000345e:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80003462:	00 00       	add	r0,r0
80003464:	00 00       	add	r0,r0
80003466:	07 68       	ld.uh	r8,--r3
80003468:	00 00       	add	r0,r0
8000346a:	07 fd       	ld.ub	sp,r3[0x7]
8000346c:	00 00       	add	r0,r0
8000346e:	07 6f       	ld.uh	pc,--r3
80003470:	00 00       	add	r0,r0
80003472:	07 70       	ld.ub	r0,--r3
80003474:	00 00       	add	r0,r0
80003476:	07 74       	ld.ub	r4,--r3
80003478:	80 00       	ld.sh	r0,r0[0x0]
8000347a:	33 9c       	mov	r12,57

8000347c <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(void)
{
8000347c:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003480:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003484:	d3 03       	ssrf	0x10
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel;
80003486:	49 78       	lddpc	r8,800034e0 <udi_cdc_rx_start+0x64>
80003488:	11 87       	ld.ub	r7,r8[0x0]
	if (udi_cdc_rx_trans_ongoing ||
8000348a:	49 78       	lddpc	r8,800034e4 <udi_cdc_rx_start+0x68>
8000348c:	11 88       	ld.ub	r8,r8[0x0]
8000348e:	58 08       	cp.w	r8,0
80003490:	c0 a1       	brne	800034a4 <udi_cdc_rx_start+0x28>
		(udi_cdc_rx_pos < udi_cdc_rx_buf_nb[buf_sel_trans])) {
80003492:	49 68       	lddpc	r8,800034e8 <udi_cdc_rx_start+0x6c>
80003494:	90 08       	ld.sh	r8,r8[0x0]
80003496:	49 6a       	lddpc	r10,800034ec <udi_cdc_rx_start+0x70>
80003498:	f4 07 04 1a 	ld.sh	r10,r10[r7<<0x1]
8000349c:	f0 0a 19 00 	cp.h	r10,r8
800034a0:	e0 88 00 06 	brls	800034ac <udi_cdc_rx_start+0x30>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034a4:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
800034a8:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos = 0;
800034ac:	30 0a       	mov	r10,0
800034ae:	48 f8       	lddpc	r8,800034e8 <udi_cdc_rx_start+0x6c>
800034b0:	b0 0a       	st.h	r8[0x0],r10
	udi_cdc_rx_buf_sel = (buf_sel_trans==0)?1:0;
800034b2:	58 07       	cp.w	r7,0
800034b4:	5f 0a       	sreq	r10
800034b6:	48 b8       	lddpc	r8,800034e0 <udi_cdc_rx_start+0x64>
800034b8:	b0 8a       	st.b	r8[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing = true;
800034ba:	30 1a       	mov	r10,1
800034bc:	48 a8       	lddpc	r8,800034e4 <udi_cdc_rx_start+0x68>
800034be:	b0 8a       	st.b	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034c0:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
	
	if (udi_cdc_is_rx_ready()) {
800034c4:	f0 1f 00 0b 	mcall	800034f0 <udi_cdc_rx_start+0x74>
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
800034c8:	a7 67       	lsl	r7,0x6
800034ca:	48 b8       	lddpc	r8,800034f4 <udi_cdc_rx_start+0x78>
800034cc:	34 09       	mov	r9,64
800034ce:	48 ba       	lddpc	r10,800034f8 <udi_cdc_rx_start+0x7c>
800034d0:	0e 0a       	add	r10,r7
800034d2:	30 1b       	mov	r11,1
800034d4:	30 2c       	mov	r12,2
800034d6:	f0 1f 00 0a 	mcall	800034fc <udi_cdc_rx_start+0x80>
					true,
					udi_cdc_rx_buf[buf_sel_trans],
					UDI_CDC_RX_BUFFERS,
					udi_cdc_data_recevied);
}
800034da:	e3 cd 80 80 	ldm	sp++,r7,pc
800034de:	00 00       	add	r0,r0
800034e0:	00 00       	add	r0,r0
800034e2:	07 fc       	ld.ub	r12,r3[0x7]
800034e4:	00 00       	add	r0,r0
800034e6:	08 80       	andn	r0,r4
800034e8:	00 00       	add	r0,r0
800034ea:	07 f8       	ld.ub	r8,r3[0x7]
800034ec:	00 00       	add	r0,r0
800034ee:	07 f4       	ld.ub	r4,r3[0x7]
800034f0:	80 00       	ld.sh	r0,r0[0x0]
800034f2:	33 78       	mov	r8,55
800034f4:	80 00       	ld.sh	r0,r0[0x0]
800034f6:	35 7c       	mov	r12,87
800034f8:	00 00       	add	r0,r0
800034fa:	08 00       	add	r0,r4
800034fc:	80 00       	ld.sh	r0,r0[0x0]
800034fe:	25 a0       	sub	r0,90

80003500 <udi_cdc_getc>:
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
}


int udi_cdc_getc(void)
{
80003500:	d4 31       	pushm	r0-r7,lr
	int rx_data = 0;
	bool b_databit_9;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003502:	49 88       	lddpc	r8,80003560 <udi_cdc_getc+0x60>
80003504:	11 e9       	ld.ub	r9,r8[0x6]
80003506:	30 98       	mov	r8,9
80003508:	f0 09 18 00 	cp.b	r9,r8
8000350c:	5f 02       	sreq	r2
8000350e:	30 03       	mov	r3,0

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003510:	49 56       	lddpc	r6,80003564 <udi_cdc_getc+0x64>
80003512:	49 67       	lddpc	r7,80003568 <udi_cdc_getc+0x68>
80003514:	49 65       	lddpc	r5,8000356c <udi_cdc_getc+0x6c>
		if (!udi_cdc_running) {
80003516:	49 74       	lddpc	r4,80003570 <udi_cdc_getc+0x70>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003518:	49 71       	lddpc	r1,80003574 <udi_cdc_getc+0x74>
	udi_cdc_rx_start();

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
8000351a:	06 90       	mov	r0,r3
8000351c:	c0 48       	rjmp	80003524 <udi_cdc_getc+0x24>
	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
		if (!udi_cdc_running) {
8000351e:	09 88       	ld.ub	r8,r4[0x0]
80003520:	58 08       	cp.w	r8,0
80003522:	c1 b0       	breq	80003558 <udi_cdc_getc+0x58>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003524:	0d 89       	ld.ub	r9,r6[0x0]
80003526:	8e 08       	ld.sh	r8,r7[0x0]
80003528:	ea 09 04 19 	ld.sh	r9,r5[r9<<0x1]
8000352c:	f0 09 19 00 	cp.h	r9,r8
80003530:	fe 98 ff f7 	brls	8000351e <udi_cdc_getc+0x1e>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003534:	0d 88       	ld.ub	r8,r6[0x0]
80003536:	8e 09       	ld.sh	r9,r7[0x0]
80003538:	5c 79       	castu.h	r9
8000353a:	a7 68       	lsl	r8,0x6
8000353c:	12 08       	add	r8,r9
8000353e:	e2 08 07 08 	ld.ub	r8,r1[r8]
80003542:	10 43       	or	r3,r8
	udi_cdc_rx_pos++;
80003544:	8e 08       	ld.sh	r8,r7[0x0]
80003546:	2f f8       	sub	r8,-1
80003548:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start();
8000354a:	f0 1f 00 0c 	mcall	80003578 <udi_cdc_getc+0x78>

	if (b_databit_9) {
8000354e:	58 02       	cp.w	r2,0
80003550:	c0 50       	breq	8000355a <udi_cdc_getc+0x5a>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
80003552:	a9 63       	lsl	r3,0x8
80003554:	00 92       	mov	r2,r0
80003556:	ce 7b       	rjmp	80003524 <udi_cdc_getc+0x24>
		goto udi_cdc_getc_process_one_byte;
80003558:	30 03       	mov	r3,0
	}
	return rx_data;
}
8000355a:	06 9c       	mov	r12,r3
8000355c:	d8 32       	popm	r0-r7,pc
8000355e:	00 00       	add	r0,r0
80003560:	00 00       	add	r0,r0
80003562:	07 68       	ld.uh	r8,--r3
80003564:	00 00       	add	r0,r0
80003566:	07 fc       	ld.ub	r12,r3[0x7]
80003568:	00 00       	add	r0,r0
8000356a:	07 f8       	ld.ub	r8,r3[0x7]
8000356c:	00 00       	add	r0,r0
8000356e:	07 f4       	ld.ub	r4,r3[0x7]
80003570:	00 00       	add	r0,r0
80003572:	07 fd       	ld.ub	sp,r3[0x7]
80003574:	00 00       	add	r0,r0
80003576:	08 00       	add	r0,r4
80003578:	80 00       	ld.sh	r0,r0[0x0]
8000357a:	34 7c       	mov	r12,71

8000357c <udi_cdc_data_recevied>:
					udi_cdc_data_recevied);
}


void udi_cdc_data_recevied(udd_ep_status_t status, iram_size_t n)
{
8000357c:	d4 01       	pushm	lr
	uint8_t buf_sel_trans;

	if (UDD_EP_TRANSFER_OK != status) {
8000357e:	58 0c       	cp.w	r12,0
80003580:	c1 01       	brne	800035a0 <udi_cdc_data_recevied+0x24>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel==0)?1:0;
80003582:	48 98       	lddpc	r8,800035a4 <udi_cdc_data_recevied+0x28>
80003584:	11 88       	ld.ub	r8,r8[0x0]
	udi_cdc_rx_buf_nb[buf_sel_trans] = n;
80003586:	58 08       	cp.w	r8,0
80003588:	f9 b8 01 00 	movne	r8,0
8000358c:	f9 b8 00 02 	moveq	r8,2
80003590:	48 69       	lddpc	r9,800035a8 <udi_cdc_data_recevied+0x2c>
80003592:	f2 08 0a 0b 	st.h	r9[r8],r11
	udi_cdc_rx_trans_ongoing = false;
80003596:	30 09       	mov	r9,0
80003598:	48 58       	lddpc	r8,800035ac <udi_cdc_data_recevied+0x30>
8000359a:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start();
8000359c:	f0 1f 00 05 	mcall	800035b0 <udi_cdc_data_recevied+0x34>
800035a0:	d8 02       	popm	pc
800035a2:	00 00       	add	r0,r0
800035a4:	00 00       	add	r0,r0
800035a6:	07 fc       	ld.ub	r12,r3[0x7]
800035a8:	00 00       	add	r0,r0
800035aa:	07 f4       	ld.ub	r4,r3[0x7]
800035ac:	00 00       	add	r0,r0
800035ae:	08 80       	andn	r0,r4
800035b0:	80 00       	ld.sh	r0,r0[0x0]
800035b2:	34 7c       	mov	r12,71

800035b4 <udi_cdc_tx_send>:
	udi_cdc_tx_send();
}


static void udi_cdc_tx_send(void)
{
800035b4:	eb cd 40 e0 	pushm	r5-r7,lr
	irqflags_t flags;
	uint8_t buf_sel_trans;
	bool b_short_packet;

	if (udi_cdc_tx_trans_ongoing) {
800035b8:	4a a8       	lddpc	r8,80003660 <udi_cdc_tx_send+0xac>
800035ba:	11 88       	ld.ub	r8,r8[0x0]
800035bc:	58 08       	cp.w	r8,0
800035be:	c4 f1       	brne	8000365c <udi_cdc_tx_send+0xa8>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
800035c0:	f0 1f 00 29 	mcall	80003664 <udi_cdc_tx_send+0xb0>
800035c4:	c0 a0       	breq	800035d8 <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num == udd_get_micro_frame_number()) {
800035c6:	f0 1f 00 29 	mcall	80003668 <udi_cdc_tx_send+0xb4>
800035ca:	4a 98       	lddpc	r8,8000366c <udi_cdc_tx_send+0xb8>
800035cc:	90 08       	ld.sh	r8,r8[0x0]
800035ce:	f8 08 19 00 	cp.h	r8,r12
800035d2:	c0 a1       	brne	800035e6 <udi_cdc_tx_send+0x32>
800035d4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num == udd_get_frame_number()) {
800035d8:	f0 1f 00 26 	mcall	80003670 <udi_cdc_tx_send+0xbc>
800035dc:	4a 48       	lddpc	r8,8000366c <udi_cdc_tx_send+0xb8>
800035de:	90 08       	ld.sh	r8,r8[0x0]
800035e0:	f8 08 19 00 	cp.h	r8,r12
800035e4:	c3 c0       	breq	8000365c <udi_cdc_tx_send+0xa8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800035e6:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800035ea:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel;
800035ec:	4a 29       	lddpc	r9,80003674 <udi_cdc_tx_send+0xc0>
800035ee:	13 87       	ld.ub	r7,r9[0x0]
	if (!udi_cdc_tx_both_buf_to_send) {
800035f0:	4a 29       	lddpc	r9,80003678 <udi_cdc_tx_send+0xc4>
800035f2:	13 89       	ld.ub	r9,r9[0x0]
800035f4:	58 09       	cp.w	r9,0
800035f6:	c0 61       	brne	80003602 <udi_cdc_tx_send+0x4e>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel = (buf_sel_trans==0)?1:0;
800035f8:	58 07       	cp.w	r7,0
800035fa:	5f 0a       	sreq	r10
800035fc:	49 e9       	lddpc	r9,80003674 <udi_cdc_tx_send+0xc0>
800035fe:	b2 8a       	st.b	r9[0x0],r10
80003600:	c0 38       	rjmp	80003606 <udi_cdc_tx_send+0x52>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
80003602:	58 07       	cp.w	r7,0
80003604:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing = true;
80003606:	30 1a       	mov	r10,1
80003608:	49 69       	lddpc	r9,80003660 <udi_cdc_tx_send+0xac>
8000360a:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000360c:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[buf_sel_trans] != UDI_CDC_TX_BUFFERS);
80003610:	0e 95       	mov	r5,r7
80003612:	49 b8       	lddpc	r8,8000367c <udi_cdc_tx_send+0xc8>
80003614:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
80003618:	34 08       	mov	r8,64
8000361a:	f0 09 19 00 	cp.h	r9,r8
8000361e:	5f 16       	srne	r6
	if (b_short_packet) {
80003620:	58 06       	cp.w	r6,0
80003622:	c0 e0       	breq	8000363e <udi_cdc_tx_send+0x8a>
		if (udd_is_high_speed()) {
80003624:	f0 1f 00 10 	mcall	80003664 <udi_cdc_tx_send+0xb0>
80003628:	c0 60       	breq	80003634 <udi_cdc_tx_send+0x80>
			udi_cdc_tx_sof_num = udd_get_micro_frame_number();
8000362a:	f0 1f 00 10 	mcall	80003668 <udi_cdc_tx_send+0xb4>
8000362e:	49 08       	lddpc	r8,8000366c <udi_cdc_tx_send+0xb8>
80003630:	b0 0c       	st.h	r8[0x0],r12
80003632:	c0 98       	rjmp	80003644 <udi_cdc_tx_send+0x90>
		}else{
			udi_cdc_tx_sof_num = udd_get_frame_number();
80003634:	f0 1f 00 0f 	mcall	80003670 <udi_cdc_tx_send+0xbc>
80003638:	48 d8       	lddpc	r8,8000366c <udi_cdc_tx_send+0xb8>
8000363a:	b0 0c       	st.h	r8[0x0],r12
8000363c:	c0 48       	rjmp	80003644 <udi_cdc_tx_send+0x90>
		}
	}else{
		udi_cdc_tx_sof_num = 0; // Force next transfer without wait SOF
8000363e:	30 09       	mov	r9,0
80003640:	48 b8       	lddpc	r8,8000366c <udi_cdc_tx_send+0xb8>
80003642:	b0 09       	st.h	r8[0x0],r9
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_IN,
80003644:	a7 67       	lsl	r7,0x6
80003646:	48 f8       	lddpc	r8,80003680 <udi_cdc_tx_send+0xcc>
80003648:	48 d9       	lddpc	r9,8000367c <udi_cdc_tx_send+0xc8>
8000364a:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
8000364e:	48 ea       	lddpc	r10,80003684 <udi_cdc_tx_send+0xd0>
80003650:	0e 0a       	add	r10,r7
80003652:	0c 9b       	mov	r11,r6
80003654:	e0 6c 00 81 	mov	r12,129
80003658:	f0 1f 00 0c 	mcall	80003688 <udi_cdc_tx_send+0xd4>
8000365c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003660:	00 00       	add	r0,r0
80003662:	07 fe       	ld.ub	lr,r3[0x7]
80003664:	80 00       	ld.sh	r0,r0[0x0]
80003666:	23 aa       	sub	r10,58
80003668:	80 00       	ld.sh	r0,r0[0x0]
8000366a:	23 e6       	sub	r6,62
8000366c:	00 00       	add	r0,r0
8000366e:	07 fa       	ld.ub	r10,r3[0x7]
80003670:	80 00       	ld.sh	r0,r0[0x0]
80003672:	23 da       	sub	r10,61
80003674:	00 00       	add	r0,r0
80003676:	07 6f       	ld.uh	pc,--r3
80003678:	00 00       	add	r0,r0
8000367a:	08 81       	andn	r1,r4
8000367c:	00 00       	add	r0,r0
8000367e:	07 70       	ld.ub	r0,--r3
80003680:	80 00       	ld.sh	r0,r0[0x0]
80003682:	36 8c       	mov	r12,104
80003684:	00 00       	add	r0,r0
80003686:	07 74       	ld.ub	r4,--r3
80003688:	80 00       	ld.sh	r0,r0[0x0]
8000368a:	25 a0       	sub	r0,90

8000368c <udi_cdc_data_sent>:
	udi_cdc_rx_start();
}


void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n)
{
8000368c:	d4 01       	pushm	lr
	if (UDD_EP_TRANSFER_OK != status) {
8000368e:	58 0c       	cp.w	r12,0
80003690:	c1 21       	brne	800036b4 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
80003692:	48 a8       	lddpc	r8,800036b8 <udi_cdc_data_sent+0x2c>
80003694:	11 88       	ld.ub	r8,r8[0x0]
80003696:	58 08       	cp.w	r8,0
80003698:	f9 b9 01 00 	movne	r9,0
8000369c:	f9 b9 00 02 	moveq	r9,2
800036a0:	30 08       	mov	r8,0
800036a2:	48 7a       	lddpc	r10,800036bc <udi_cdc_data_sent+0x30>
800036a4:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send = false;
800036a8:	48 69       	lddpc	r9,800036c0 <udi_cdc_data_sent+0x34>
800036aa:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing = false;
800036ac:	48 69       	lddpc	r9,800036c4 <udi_cdc_data_sent+0x38>
800036ae:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_send();
800036b0:	f0 1f 00 06 	mcall	800036c8 <udi_cdc_data_sent+0x3c>
800036b4:	d8 02       	popm	pc
800036b6:	00 00       	add	r0,r0
800036b8:	00 00       	add	r0,r0
800036ba:	07 6f       	ld.uh	pc,--r3
800036bc:	00 00       	add	r0,r0
800036be:	07 70       	ld.ub	r0,--r3
800036c0:	00 00       	add	r0,r0
800036c2:	08 81       	andn	r1,r4
800036c4:	00 00       	add	r0,r0
800036c6:	07 fe       	ld.ub	lr,r3[0x7]
800036c8:	80 00       	ld.sh	r0,r0[0x0]
800036ca:	35 b4       	mov	r4,91

800036cc <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
800036cc:	d4 01       	pushm	lr
	udi_cdc_tx_send();
800036ce:	f0 1f 00 02 	mcall	800036d4 <udi_cdc_data_sof_notify+0x8>
}
800036d2:	d8 02       	popm	pc
800036d4:	80 00       	ld.sh	r0,r0[0x0]
800036d6:	35 b4       	mov	r4,91

800036d8 <udi_cdc_data_enable>:
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
}

bool udi_cdc_data_enable(void)
{
800036d8:	eb cd 40 c0 	pushm	r6-r7,lr
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
800036dc:	30 06       	mov	r6,0
800036de:	48 f8       	lddpc	r8,80003718 <udi_cdc_data_enable+0x40>
800036e0:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_both_buf_to_send = false;
800036e2:	48 f8       	lddpc	r8,8000371c <udi_cdc_data_enable+0x44>
800036e4:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_sel = 0;
800036e6:	48 f8       	lddpc	r8,80003720 <udi_cdc_data_enable+0x48>
800036e8:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_nb[0] = 0;
800036ea:	48 f8       	lddpc	r8,80003724 <udi_cdc_data_enable+0x4c>
800036ec:	30 07       	mov	r7,0
800036ee:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_buf_nb[1] = 0;
800036f0:	b0 17       	st.h	r8[0x2],r7
	udi_cdc_tx_sof_num = 0;
800036f2:	48 e8       	lddpc	r8,80003728 <udi_cdc_data_enable+0x50>
800036f4:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_send();
800036f6:	f0 1f 00 0e 	mcall	8000372c <udi_cdc_data_enable+0x54>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing = false;
800036fa:	48 e8       	lddpc	r8,80003730 <udi_cdc_data_enable+0x58>
800036fc:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_sel = 0;
800036fe:	48 e8       	lddpc	r8,80003734 <udi_cdc_data_enable+0x5c>
80003700:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_nb[0] = 0;
80003702:	48 e8       	lddpc	r8,80003738 <udi_cdc_data_enable+0x60>
80003704:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_rx_pos = 0;
80003706:	48 e8       	lddpc	r8,8000373c <udi_cdc_data_enable+0x64>
80003708:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_running = udi_cdc_rx_start();
8000370a:	f0 1f 00 0e 	mcall	80003740 <udi_cdc_data_enable+0x68>
8000370e:	48 e8       	lddpc	r8,80003744 <udi_cdc_data_enable+0x6c>
80003710:	b0 8c       	st.b	r8[0x0],r12
	return udi_cdc_running;
80003712:	11 8c       	ld.ub	r12,r8[0x0]
}
80003714:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003718:	00 00       	add	r0,r0
8000371a:	07 fe       	ld.ub	lr,r3[0x7]
8000371c:	00 00       	add	r0,r0
8000371e:	08 81       	andn	r1,r4
80003720:	00 00       	add	r0,r0
80003722:	07 6f       	ld.uh	pc,--r3
80003724:	00 00       	add	r0,r0
80003726:	07 70       	ld.ub	r0,--r3
80003728:	00 00       	add	r0,r0
8000372a:	07 fa       	ld.ub	r10,r3[0x7]
8000372c:	80 00       	ld.sh	r0,r0[0x0]
8000372e:	35 b4       	mov	r4,91
80003730:	00 00       	add	r0,r0
80003732:	08 80       	andn	r0,r4
80003734:	00 00       	add	r0,r0
80003736:	07 fc       	ld.ub	r12,r3[0x7]
80003738:	00 00       	add	r0,r0
8000373a:	07 f4       	ld.ub	r4,r3[0x7]
8000373c:	00 00       	add	r0,r0
8000373e:	07 f8       	ld.ub	r8,r3[0x7]
80003740:	80 00       	ld.sh	r0,r0[0x0]
80003742:	34 7c       	mov	r12,71
80003744:	00 00       	add	r0,r0
80003746:	07 fd       	ld.ub	sp,r3[0x7]

80003748 <udi_cdc_comm_disable>:


void udi_cdc_comm_disable(void)
{
80003748:	d4 01       	pushm	lr
	udi_cdc_running = false;
8000374a:	30 09       	mov	r9,0
8000374c:	48 38       	lddpc	r8,80003758 <udi_cdc_comm_disable+0x10>
8000374e:	b0 89       	st.b	r8[0x0],r9
	UDI_CDC_DISABLE_EXT();
80003750:	f0 1f 00 03 	mcall	8000375c <udi_cdc_comm_disable+0x14>
}
80003754:	d8 02       	popm	pc
80003756:	00 00       	add	r0,r0
80003758:	00 00       	add	r0,r0
8000375a:	07 fd       	ld.ub	sp,r3[0x7]
8000375c:	80 00       	ld.sh	r0,r0[0x0]
8000375e:	3f 10       	mov	r0,-15

80003760 <udi_cdc_comm_enable>:

//@}


bool udi_cdc_comm_enable(void)
{
80003760:	d4 01       	pushm	lr
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
80003762:	30 0a       	mov	r10,0
80003764:	48 a8       	lddpc	r8,8000378c <udi_cdc_comm_enable+0x2c>
80003766:	b0 0a       	st.h	r8[0x0],r10
	uid_cdc_state_msg.value = CPU_TO_LE16(0);
80003768:	48 a8       	lddpc	r8,80003790 <udi_cdc_comm_enable+0x30>
8000376a:	b0 4a       	st.h	r8[0x8],r10

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
8000376c:	48 a8       	lddpc	r8,80003794 <udi_cdc_comm_enable+0x34>
8000376e:	30 09       	mov	r9,0
80003770:	b0 8a       	st.b	r8[0x0],r10
80003772:	3c 2a       	mov	r10,-62
80003774:	b0 9a       	st.b	r8[0x1],r10
80003776:	30 1a       	mov	r10,1
80003778:	b0 aa       	st.b	r8[0x2],r10
8000377a:	b0 b9       	st.b	r8[0x3],r9
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
8000377c:	b0 c9       	st.b	r8[0x4],r9
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
8000377e:	b0 d9       	st.b	r8[0x5],r9
	udi_cdc_line_coding.bDataBits = UDI_CDC_DEFAULT_DATABITS;
80003780:	30 89       	mov	r9,8
80003782:	b0 e9       	st.b	r8[0x6],r9
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));

	// Call application callback
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
80003784:	f0 1f 00 05 	mcall	80003798 <udi_cdc_comm_enable+0x38>
}
80003788:	d8 02       	popm	pc
8000378a:	00 00       	add	r0,r0
8000378c:	00 00       	add	r0,r0
8000378e:	08 82       	andn	r2,r4
80003790:	00 00       	add	r0,r0
80003792:	00 44       	or	r4,r0
80003794:	00 00       	add	r0,r0
80003796:	07 68       	ld.uh	r8,--r3
80003798:	80 00       	ld.sh	r0,r0[0x0]
8000379a:	3f 04       	mov	r4,-16

8000379c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
8000379c:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800037a0:	49 18       	lddpc	r8,800037e4 <udc_sof_notify+0x48>
800037a2:	11 89       	ld.ub	r9,r8[0x0]
800037a4:	30 08       	mov	r8,0
800037a6:	f0 09 18 00 	cp.b	r9,r8
800037aa:	c1 b0       	breq	800037e0 <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037ac:	48 f8       	lddpc	r8,800037e8 <udc_sof_notify+0x4c>
800037ae:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037b0:	70 09       	ld.w	r9,r8[0x0]
800037b2:	13 ca       	ld.ub	r10,r9[0x4]
800037b4:	30 09       	mov	r9,0
800037b6:	f2 0a 18 00 	cp.b	r10,r9
800037ba:	c1 30       	breq	800037e0 <udc_sof_notify+0x44>
800037bc:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037be:	48 b6       	lddpc	r6,800037e8 <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
800037c0:	70 18       	ld.w	r8,r8[0x4]
800037c2:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800037c6:	70 48       	ld.w	r8,r8[0x10]
800037c8:	58 08       	cp.w	r8,0
800037ca:	c0 20       	breq	800037ce <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
800037cc:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800037ce:	2f f7       	sub	r7,-1
800037d0:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037d2:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037d4:	70 09       	ld.w	r9,r8[0x0]
800037d6:	13 c9       	ld.ub	r9,r9[0x4]
800037d8:	ee 09 18 00 	cp.b	r9,r7
800037dc:	fe 9b ff f2 	brhi	800037c0 <udc_sof_notify+0x24>
800037e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800037e4:	00 00       	add	r0,r0
800037e6:	08 8e       	andn	lr,r4
800037e8:	00 00       	add	r0,r0
800037ea:	08 88       	andn	r8,r4

800037ec <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
800037ec:	48 78       	lddpc	r8,80003808 <udc_get_eof_conf+0x1c>
800037ee:	70 08       	ld.w	r8,r8[0x0]
800037f0:	70 08       	ld.w	r8,r8[0x0]
800037f2:	11 aa       	ld.ub	r10,r8[0x2]
800037f4:	11 b9       	ld.ub	r9,r8[0x3]
800037f6:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800037fa:	5c c9       	swap.bh	r9
800037fc:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
80003800:	f0 0c 00 0c 	add	r12,r8,r12
80003804:	5e fc       	retal	r12
80003806:	00 00       	add	r0,r0
80003808:	00 00       	add	r0,r0
8000380a:	08 88       	andn	r8,r4

8000380c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
8000380c:	eb cd 40 e0 	pushm	r5-r7,lr
80003810:	18 97       	mov	r7,r12
80003812:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
80003814:	49 b8       	lddpc	r8,80003880 <udc_update_iface_desc+0x74>
80003816:	11 89       	ld.ub	r9,r8[0x0]
80003818:	30 08       	mov	r8,0
8000381a:	f0 09 18 00 	cp.b	r9,r8
8000381e:	c2 f0       	breq	8000387c <udc_update_iface_desc+0x70>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003820:	49 98       	lddpc	r8,80003884 <udc_update_iface_desc+0x78>
80003822:	70 08       	ld.w	r8,r8[0x0]
80003824:	70 08       	ld.w	r8,r8[0x0]
80003826:	11 c9       	ld.ub	r9,r8[0x4]
80003828:	18 9e       	mov	lr,r12
8000382a:	f8 09 18 00 	cp.b	r9,r12
8000382e:	e0 88 00 27 	brls	8000387c <udc_update_iface_desc+0x70>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80003832:	49 65       	lddpc	r5,80003888 <udc_update_iface_desc+0x7c>
80003834:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
80003836:	f0 1f 00 16 	mcall	8000388c <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
8000383a:	6a 08       	ld.w	r8,r5[0x0]
8000383c:	10 3c       	cp.w	r12,r8
8000383e:	e0 88 00 1f 	brls	8000387c <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003842:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003844:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003846:	11 9a       	ld.ub	r10,r8[0x1]
80003848:	f6 0a 18 00 	cp.b	r10,r11
8000384c:	c0 a1       	brne	80003860 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
8000384e:	11 aa       	ld.ub	r10,r8[0x2]
80003850:	0e 9e       	mov	lr,r7
80003852:	ee 0a 18 00 	cp.b	r10,r7
80003856:	c0 51       	brne	80003860 <udc_update_iface_desc+0x54>
					&& (setting_num ==
							udc_ptr_iface->
80003858:	11 ba       	ld.ub	r10,r8[0x3]
8000385a:	ec 0a 18 00 	cp.b	r10,r6
8000385e:	c0 b0       	breq	80003874 <udc_update_iface_desc+0x68>
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
80003860:	13 88       	ld.ub	r8,r9[0x0]
80003862:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003866:	10 3c       	cp.w	r12,r8
80003868:	fe 9b ff ee 	brhi	80003844 <udc_update_iface_desc+0x38>
8000386c:	48 79       	lddpc	r9,80003888 <udc_update_iface_desc+0x7c>
8000386e:	93 08       	st.w	r9[0x0],r8
80003870:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003874:	48 59       	lddpc	r9,80003888 <udc_update_iface_desc+0x7c>
80003876:	93 08       	st.w	r9[0x0],r8
80003878:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
8000387c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003880:	00 00       	add	r0,r0
80003882:	08 8e       	andn	lr,r4
80003884:	00 00       	add	r0,r0
80003886:	08 88       	andn	r8,r4
80003888:	00 00       	add	r0,r0
8000388a:	08 94       	mov	r4,r4
8000388c:	80 00       	ld.sh	r0,r0[0x0]
8000388e:	37 ec       	mov	r12,126

80003890 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
80003890:	eb cd 40 c0 	pushm	r6-r7,lr
80003894:	18 96       	mov	r6,r12
80003896:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
80003898:	f0 1f 00 11 	mcall	800038dc <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000389c:	0d 88       	ld.ub	r8,r6[0x0]
8000389e:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800038a0:	0c 3c       	cp.w	r12,r6
800038a2:	e0 88 00 19 	brls	800038d4 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038a6:	0d 98       	ld.ub	r8,r6[0x1]
800038a8:	30 49       	mov	r9,4
800038aa:	f2 08 18 00 	cp.b	r8,r9
800038ae:	c1 30       	breq	800038d4 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038b0:	ee 08 18 00 	cp.b	r8,r7
800038b4:	c0 a1       	brne	800038c8 <udc_next_desc_in_iface+0x38>
800038b6:	c1 08       	rjmp	800038d6 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038b8:	0d 98       	ld.ub	r8,r6[0x1]
800038ba:	f2 08 18 00 	cp.b	r8,r9
800038be:	c0 b0       	breq	800038d4 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038c0:	ee 08 18 00 	cp.b	r8,r7
800038c4:	c0 31       	brne	800038ca <udc_next_desc_in_iface+0x3a>
800038c6:	c0 88       	rjmp	800038d6 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038c8:	30 49       	mov	r9,4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800038ca:	0d 88       	ld.ub	r8,r6[0x0]
800038cc:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800038ce:	0c 3c       	cp.w	r12,r6
800038d0:	fe 9b ff f4 	brhi	800038b8 <udc_next_desc_in_iface+0x28>
800038d4:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL;	// No specific descriptor found
}
800038d6:	0c 9c       	mov	r12,r6
800038d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800038dc:	80 00       	ld.sh	r0,r0[0x0]
800038de:	37 ec       	mov	r12,126

800038e0 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
800038e0:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
800038e2:	48 48       	lddpc	r8,800038f0 <udc_valid_address+0x10>
800038e4:	11 bc       	ld.ub	r12,r8[0x3]
800038e6:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800038ea:	f0 1f 00 03 	mcall	800038f4 <udc_valid_address+0x14>
}
800038ee:	d8 02       	popm	pc
800038f0:	00 00       	add	r0,r0
800038f2:	0a 10       	sub	r0,r5
800038f4:	80 00       	ld.sh	r0,r0[0x0]
800038f6:	23 ac       	sub	r12,58

800038f8 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
800038f8:	eb cd 40 e0 	pushm	r5-r7,lr
800038fc:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
800038fe:	f0 1f 00 12 	mcall	80003944 <udc_iface_enable+0x4c>
80003902:	c1 f0       	breq	80003940 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003904:	49 18       	lddpc	r8,80003948 <udc_iface_enable+0x50>
80003906:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003908:	30 56       	mov	r6,5
8000390a:	0c 9b       	mov	r11,r6
8000390c:	0e 9c       	mov	r12,r7
8000390e:	f0 1f 00 10 	mcall	8000394c <udc_iface_enable+0x54>
80003912:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80003914:	c0 d0       	breq	8000392e <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
80003916:	19 ca       	ld.ub	r10,r12[0x4]
80003918:	19 d8       	ld.ub	r8,r12[0x5]
8000391a:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
8000391e:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80003920:	5c 7a       	castu.h	r10
80003922:	19 bb       	ld.ub	r11,r12[0x3]
80003924:	19 ac       	ld.ub	r12,r12[0x2]
80003926:	f0 1f 00 0b 	mcall	80003950 <udc_iface_enable+0x58>
8000392a:	cf 01       	brne	8000390a <udc_iface_enable+0x12>
8000392c:	c0 a8       	rjmp	80003940 <udc_iface_enable+0x48>
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000392e:	48 a8       	lddpc	r8,80003954 <udc_iface_enable+0x5c>
80003930:	70 08       	ld.w	r8,r8[0x0]
80003932:	70 18       	ld.w	r8,r8[0x4]
80003934:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
80003938:	70 0c       	ld.w	r12,r8[0x0]
8000393a:	5d 1c       	icall	r12
8000393c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003940:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003944:	80 00       	ld.sh	r0,r0[0x0]
80003946:	38 0c       	mov	r12,-128
80003948:	00 00       	add	r0,r0
8000394a:	08 94       	mov	r4,r4
8000394c:	80 00       	ld.sh	r0,r0[0x0]
8000394e:	38 90       	mov	r0,-119
80003950:	80 00       	ld.sh	r0,r0[0x0]
80003952:	28 f8       	sub	r8,-113
80003954:	00 00       	add	r0,r0
80003956:	08 88       	andn	r8,r4

80003958 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80003958:	eb cd 40 e0 	pushm	r5-r7,lr
8000395c:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
8000395e:	18 97       	mov	r7,r12
80003960:	30 0b       	mov	r11,0
80003962:	f0 1f 00 12 	mcall	800039a8 <udc_iface_disable+0x50>
80003966:	c1 e0       	breq	800039a2 <udc_iface_disable+0x4a>
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003968:	49 18       	lddpc	r8,800039ac <udc_iface_disable+0x54>
8000396a:	70 08       	ld.w	r8,r8[0x0]
8000396c:	70 18       	ld.w	r8,r8[0x4]
8000396e:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003972:	6a 3c       	ld.w	r12,r5[0xc]
80003974:	5d 1c       	icall	r12
80003976:	18 9b       	mov	r11,r12
80003978:	0c 9c       	mov	r12,r6
8000397a:	f0 1f 00 0c 	mcall	800039a8 <udc_iface_disable+0x50>
8000397e:	c1 20       	breq	800039a2 <udc_iface_disable+0x4a>
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003980:	48 c8       	lddpc	r8,800039b0 <udc_iface_disable+0x58>
80003982:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003984:	30 56       	mov	r6,5
80003986:	0c 9b       	mov	r11,r6
80003988:	0e 9c       	mov	r12,r7
8000398a:	f0 1f 00 0b 	mcall	800039b4 <udc_iface_disable+0x5c>
8000398e:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
80003990:	c0 50       	breq	8000399a <udc_iface_disable+0x42>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80003992:	19 ac       	ld.ub	r12,r12[0x2]
80003994:	f0 1f 00 09 	mcall	800039b8 <udc_iface_disable+0x60>
		}
80003998:	cf 7b       	rjmp	80003986 <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
8000399a:	6a 18       	ld.w	r8,r5[0x4]
8000399c:	5d 18       	icall	r8
8000399e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
800039a2:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800039a6:	00 00       	add	r0,r0
800039a8:	80 00       	ld.sh	r0,r0[0x0]
800039aa:	38 0c       	mov	r12,-128
800039ac:	00 00       	add	r0,r0
800039ae:	08 88       	andn	r8,r4
800039b0:	00 00       	add	r0,r0
800039b2:	08 94       	mov	r4,r4
800039b4:	80 00       	ld.sh	r0,r0[0x0]
800039b6:	38 90       	mov	r0,-119
800039b8:	80 00       	ld.sh	r0,r0[0x0]
800039ba:	25 70       	sub	r0,87

800039bc <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device, 
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
800039bc:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800039c0:	49 38       	lddpc	r8,80003a0c <udc_reset+0x50>
800039c2:	11 89       	ld.ub	r9,r8[0x0]
800039c4:	30 08       	mov	r8,0
800039c6:	f0 09 18 00 	cp.b	r9,r8
800039ca:	c1 70       	breq	800039f8 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800039cc:	49 18       	lddpc	r8,80003a10 <udc_reset+0x54>
800039ce:	70 08       	ld.w	r8,r8[0x0]
800039d0:	70 08       	ld.w	r8,r8[0x0]
800039d2:	11 c9       	ld.ub	r9,r8[0x4]
800039d4:	30 08       	mov	r8,0
800039d6:	f0 09 18 00 	cp.b	r9,r8
800039da:	c0 f0       	breq	800039f8 <udc_reset+0x3c>
800039dc:	30 07       	mov	r7,0
800039de:	48 d6       	lddpc	r6,80003a10 <udc_reset+0x54>
				iface_num++) {
			udc_iface_disable(iface_num);
800039e0:	0e 9c       	mov	r12,r7
800039e2:	f0 1f 00 0d 	mcall	80003a14 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800039e6:	2f f7       	sub	r7,-1
800039e8:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800039ea:	6c 08       	ld.w	r8,r6[0x0]
800039ec:	70 08       	ld.w	r8,r8[0x0]
800039ee:	11 c8       	ld.ub	r8,r8[0x4]
800039f0:	ee 08 18 00 	cp.b	r8,r7
800039f4:	fe 9b ff f6 	brhi	800039e0 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
800039f8:	30 09       	mov	r9,0
800039fa:	48 58       	lddpc	r8,80003a0c <udc_reset+0x50>
800039fc:	b0 89       	st.b	r8[0x0],r9
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
800039fe:	e0 69 01 00 	mov	r9,256
80003a02:	48 68       	lddpc	r8,80003a18 <udc_reset+0x5c>
80003a04:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80003a06:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003a0a:	00 00       	add	r0,r0
80003a0c:	00 00       	add	r0,r0
80003a0e:	08 8e       	andn	lr,r4
80003a10:	00 00       	add	r0,r0
80003a12:	08 88       	andn	r8,r4
80003a14:	80 00       	ld.sh	r0,r0[0x0]
80003a16:	39 58       	mov	r8,-107
80003a18:	00 00       	add	r0,r0
80003a1a:	08 8c       	andn	r12,r4

80003a1c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80003a1c:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80003a20:	fe f8 04 3c 	ld.w	r8,pc[1084]
80003a24:	30 09       	mov	r9,0
80003a26:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80003a28:	30 0a       	mov	r10,0
80003a2a:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80003a2c:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80003a2e:	11 88       	ld.ub	r8,r8[0x0]
80003a30:	10 9a       	mov	r10,r8
80003a32:	f2 08 18 00 	cp.b	r8,r9
80003a36:	c0 94       	brge	80003a48 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0)
80003a38:	fe f9 04 24 	ld.w	r9,pc[1060]
80003a3c:	92 3b       	ld.sh	r11,r9[0x6]
80003a3e:	30 09       	mov	r9,0
80003a40:	f2 0b 19 00 	cp.h	r11,r9
80003a44:	e0 80 02 0a 	breq	80003e58 <udc_process_setup+0x43c>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80003a48:	10 99       	mov	r9,r8
80003a4a:	e2 19 00 60 	andl	r9,0x60,COH
80003a4e:	e0 81 01 d9 	brne	80003e00 <udc_process_setup+0x3e4>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80003a52:	f2 0a 18 00 	cp.b	r10,r9
80003a56:	e0 84 01 01 	brge	80003c58 <udc_process_setup+0x23c>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
80003a5a:	fe f9 04 02 	ld.w	r9,pc[1026]
80003a5e:	92 39       	ld.sh	r9,r9[0x6]
80003a60:	58 09       	cp.w	r9,0
80003a62:	e0 80 01 cf 	breq	80003e00 <udc_process_setup+0x3e4>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003a66:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a6a:	e0 81 00 9e 	brne	80003ba6 <udc_process_setup+0x18a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003a6e:	fe fa 03 ee 	ld.w	r10,pc[1006]
80003a72:	15 9a       	ld.ub	r10,r10[0x1]
80003a74:	30 6b       	mov	r11,6
80003a76:	f6 0a 18 00 	cp.b	r10,r11
80003a7a:	c1 a0       	breq	80003aae <udc_process_setup+0x92>
80003a7c:	30 8b       	mov	r11,8
80003a7e:	f6 0a 18 00 	cp.b	r10,r11
80003a82:	e0 80 00 85 	breq	80003b8c <udc_process_setup+0x170>
80003a86:	30 0b       	mov	r11,0
80003a88:	f6 0a 18 00 	cp.b	r10,r11
80003a8c:	e0 81 00 8d 	brne	80003ba6 <udc_process_setup+0x18a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
80003a90:	30 28       	mov	r8,2
80003a92:	f0 09 19 00 	cp.h	r9,r8
80003a96:	c0 40       	breq	80003a9e <udc_process_setup+0x82>
80003a98:	30 0c       	mov	r12,0
80003a9a:	e0 8f 01 af 	bral	80003df8 <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(
80003a9e:	30 2b       	mov	r11,2
80003aa0:	fe fc 03 c0 	ld.w	r12,pc[960]
80003aa4:	f0 1f 00 f0 	mcall	80003e64 <udc_process_setup+0x448>
80003aa8:	30 1c       	mov	r12,1
80003aaa:	e0 8f 01 a7 	bral	80003df8 <udc_process_setup+0x3dc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003aae:	fe f8 03 ae 	ld.w	r8,pc[942]
80003ab2:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80003ab4:	f2 08 16 08 	lsr	r8,r9,0x8
80003ab8:	30 2a       	mov	r10,2
80003aba:	f4 08 18 00 	cp.b	r8,r10
80003abe:	c1 00       	breq	80003ade <udc_process_setup+0xc2>
80003ac0:	30 3a       	mov	r10,3
80003ac2:	f4 08 18 00 	cp.b	r8,r10
80003ac6:	c2 a0       	breq	80003b1a <udc_process_setup+0xfe>
80003ac8:	30 19       	mov	r9,1
80003aca:	f2 08 18 00 	cp.b	r8,r9
80003ace:	c5 d1       	brne	80003b88 <udc_process_setup+0x16c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80003ad0:	fe f8 03 98 	ld.w	r8,pc[920]
80003ad4:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80003ad6:	19 8b       	ld.ub	r11,r12[0x0]
80003ad8:	f0 1f 00 e3 	mcall	80003e64 <udc_process_setup+0x448>
80003adc:	c4 78       	rjmp	80003b6a <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003ade:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80003ae0:	fe f8 03 88 	ld.w	r8,pc[904]
80003ae4:	70 08       	ld.w	r8,r8[0x0]
80003ae6:	f1 38 00 11 	ld.ub	r8,r8[17]
80003aea:	f2 08 18 00 	cp.b	r8,r9
80003aee:	e0 88 00 4d 	brls	80003b88 <udc_process_setup+0x16c>
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80003af2:	fe f8 03 76 	ld.w	r8,pc[886]
80003af6:	70 18       	ld.w	r8,r8[0x4]
80003af8:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80003afc:	19 a9       	ld.ub	r9,r12[0x2]
80003afe:	19 b8       	ld.ub	r8,r12[0x3]
80003b00:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003b04:	5c c8       	swap.bh	r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
80003b06:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003b0a:	f0 1f 00 d7 	mcall	80003e64 <udc_process_setup+0x448>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80003b0e:	fe f8 03 4e 	ld.w	r8,pc[846]
80003b12:	70 28       	ld.w	r8,r8[0x8]
80003b14:	30 29       	mov	r9,2
80003b16:	b0 99       	st.b	r8[0x1],r9
80003b18:	c2 98       	rjmp	80003b6a <udc_process_setup+0x14e>
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80003b1a:	5c 59       	castu.b	r9
80003b1c:	58 19       	cp.w	r9,1
80003b1e:	c1 00       	breq	80003b3e <udc_process_setup+0x122>
80003b20:	58 29       	cp.w	r9,2
80003b22:	c0 40       	breq	80003b2a <udc_process_setup+0x10e>
80003b24:	58 09       	cp.w	r9,0
80003b26:	c0 60       	breq	80003b32 <udc_process_setup+0x116>
80003b28:	c3 08       	rjmp	80003b88 <udc_process_setup+0x16c>
80003b2a:	fe fc 03 42 	ld.w	r12,pc[834]
80003b2e:	30 3b       	mov	r11,3
80003b30:	c0 a8       	rjmp	80003b44 <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload(
80003b32:	30 4b       	mov	r11,4
80003b34:	fe fc 03 3c 	ld.w	r12,pc[828]
80003b38:	f0 1f 00 cb 	mcall	80003e64 <udc_process_setup+0x448>
80003b3c:	c1 78       	rjmp	80003b6a <udc_process_setup+0x14e>
80003b3e:	fe fc 03 36 	ld.w	r12,pc[822]
80003b42:	30 9b       	mov	r11,9
80003b44:	fe fa 03 34 	ld.w	r10,pc[820]
80003b48:	2f ea       	sub	r10,-2
80003b4a:	18 98       	mov	r8,r12
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80003b4c:	11 39       	ld.ub	r9,r8++
80003b4e:	5c c9       	swap.bh	r9
80003b50:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
80003b52:	f0 0c 01 09 	sub	r9,r8,r12
80003b56:	f6 09 18 00 	cp.b	r9,r11
80003b5a:	cf 93       	brcs	80003b4c <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
80003b5c:	a1 7b       	lsl	r11,0x1
80003b5e:	2f eb       	sub	r11,-2
80003b60:	fe fc 03 18 	ld.w	r12,pc[792]
80003b64:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
80003b66:	f0 1f 00 c0 	mcall	80003e64 <udc_process_setup+0x448>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
80003b6a:	fe f8 02 f2 	ld.w	r8,pc[754]
80003b6e:	90 39       	ld.sh	r9,r8[0x6]
80003b70:	90 68       	ld.sh	r8,r8[0xc]
80003b72:	f2 08 19 00 	cp.h	r8,r9
80003b76:	e0 8b 00 04 	brhi	80003b7e <udc_process_setup+0x162>
80003b7a:	30 1c       	mov	r12,1
80003b7c:	c3 e9       	rjmp	80003df8 <udc_process_setup+0x3dc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
80003b7e:	fe f8 02 de 	ld.w	r8,pc[734]
80003b82:	b0 69       	st.h	r8[0xc],r9
80003b84:	30 1c       	mov	r12,1
80003b86:	c3 99       	rjmp	80003df8 <udc_process_setup+0x3dc>
80003b88:	30 0c       	mov	r12,0
80003b8a:	c3 79       	rjmp	80003df8 <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
80003b8c:	30 18       	mov	r8,1
80003b8e:	f0 09 19 00 	cp.h	r9,r8
80003b92:	c0 30       	breq	80003b98 <udc_process_setup+0x17c>
80003b94:	30 0c       	mov	r12,0
80003b96:	c3 19       	rjmp	80003df8 <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
80003b98:	30 1b       	mov	r11,1
80003b9a:	fe fc 02 e2 	ld.w	r12,pc[738]
80003b9e:	f0 1f 00 b2 	mcall	80003e64 <udc_process_setup+0x448>
80003ba2:	30 1c       	mov	r12,1
80003ba4:	c2 a9       	rjmp	80003df8 <udc_process_setup+0x3dc>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003ba6:	58 18       	cp.w	r8,1
80003ba8:	c3 61       	brne	80003c14 <udc_process_setup+0x1f8>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003baa:	fe fa 02 b2 	ld.w	r10,pc[690]
80003bae:	15 9b       	ld.ub	r11,r10[0x1]
80003bb0:	30 aa       	mov	r10,10
80003bb2:	f4 0b 18 00 	cp.b	r11,r10
80003bb6:	c2 f1       	brne	80003c14 <udc_process_setup+0x1f8>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
80003bb8:	f0 09 19 00 	cp.h	r9,r8
80003bbc:	c2 a1       	brne	80003c10 <udc_process_setup+0x1f4>
		return false;	// Error in request
	if (!udc_num_configuration)
80003bbe:	fe f8 02 be 	ld.w	r8,pc[702]
80003bc2:	11 89       	ld.ub	r9,r8[0x0]
80003bc4:	30 08       	mov	r8,0
80003bc6:	f0 09 18 00 	cp.b	r9,r8
80003bca:	c2 30       	breq	80003c10 <udc_process_setup+0x1f4>
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003bcc:	fe f8 02 90 	ld.w	r8,pc[656]
80003bd0:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003bd2:	fe f8 02 ae 	ld.w	r8,pc[686]
80003bd6:	70 08       	ld.w	r8,r8[0x0]
80003bd8:	70 08       	ld.w	r8,r8[0x0]
80003bda:	11 c8       	ld.ub	r8,r8[0x4]
80003bdc:	ee 08 18 00 	cp.b	r8,r7
80003be0:	e0 88 00 18 	brls	80003c10 <udc_process_setup+0x1f4>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003be4:	30 0b       	mov	r11,0
80003be6:	0e 9c       	mov	r12,r7
80003be8:	f0 1f 00 a7 	mcall	80003e84 <udc_process_setup+0x468>
80003bec:	c1 20       	breq	80003c10 <udc_process_setup+0x1f4>
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80003bee:	fe f8 02 92 	ld.w	r8,pc[658]
80003bf2:	70 08       	ld.w	r8,r8[0x0]
80003bf4:	70 18       	ld.w	r8,r8[0x4]
80003bf6:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80003bfa:	70 3c       	ld.w	r12,r8[0xc]
80003bfc:	5d 1c       	icall	r12
80003bfe:	fe f8 02 8a 	ld.w	r8,pc[650]
80003c02:	b0 8c       	st.b	r8[0x0],r12
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80003c04:	30 1b       	mov	r11,1
80003c06:	10 9c       	mov	r12,r8
80003c08:	f0 1f 00 97 	mcall	80003e64 <udc_process_setup+0x448>
80003c0c:	30 1c       	mov	r12,1
80003c0e:	cf 58       	rjmp	80003df8 <udc_process_setup+0x3dc>
80003c10:	30 0c       	mov	r12,0
80003c12:	cf 38       	rjmp	80003df8 <udc_process_setup+0x3dc>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003c14:	58 28       	cp.w	r8,2
80003c16:	e0 81 00 f5 	brne	80003e00 <udc_process_setup+0x3e4>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c1a:	fe f8 02 42 	ld.w	r8,pc[578]
80003c1e:	11 9a       	ld.ub	r10,r8[0x1]
80003c20:	30 08       	mov	r8,0
80003c22:	f0 0a 18 00 	cp.b	r10,r8
80003c26:	e0 81 00 e8 	brne	80003df6 <udc_process_setup+0x3da>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
80003c2a:	30 28       	mov	r8,2
80003c2c:	f0 09 19 00 	cp.h	r9,r8
80003c30:	c0 30       	breq	80003c36 <udc_process_setup+0x21a>
80003c32:	30 0c       	mov	r12,0
80003c34:	ce 28       	rjmp	80003df8 <udc_process_setup+0x3dc>
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80003c36:	fe f8 02 26 	ld.w	r8,pc[550]
80003c3a:	11 dc       	ld.ub	r12,r8[0x5]
80003c3c:	f0 1f 00 94 	mcall	80003e8c <udc_process_setup+0x470>
80003c40:	e0 68 01 00 	mov	r8,256
80003c44:	f9 b8 00 00 	moveq	r8,0
80003c48:	fe fc 02 48 	ld.w	r12,pc[584]
80003c4c:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
80003c4e:	30 2b       	mov	r11,2
80003c50:	f0 1f 00 85 	mcall	80003e64 <udc_process_setup+0x448>
80003c54:	30 1c       	mov	r12,1
80003c56:	cd 18       	rjmp	80003df8 <udc_process_setup+0x3dc>
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003c58:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c5c:	c7 71       	brne	80003d4a <udc_process_setup+0x32e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c5e:	fe f9 01 fe 	ld.w	r9,pc[510]
80003c62:	13 99       	ld.ub	r9,r9[0x1]
80003c64:	30 3a       	mov	r10,3
80003c66:	f4 09 18 00 	cp.b	r9,r10
80003c6a:	e0 80 00 c6 	breq	80003df6 <udc_process_setup+0x3da>
80003c6e:	e0 8b 00 07 	brhi	80003c7c <udc_process_setup+0x260>
80003c72:	30 1a       	mov	r10,1
80003c74:	f4 09 18 00 	cp.b	r9,r10
80003c78:	c6 91       	brne	80003d4a <udc_process_setup+0x32e>
80003c7a:	c1 78       	rjmp	80003ca8 <udc_process_setup+0x28c>
80003c7c:	30 5a       	mov	r10,5
80003c7e:	f4 09 18 00 	cp.b	r9,r10
80003c82:	c0 60       	breq	80003c8e <udc_process_setup+0x272>
80003c84:	30 9a       	mov	r10,9
80003c86:	f4 09 18 00 	cp.b	r9,r10
80003c8a:	c6 01       	brne	80003d4a <udc_process_setup+0x32e>
80003c8c:	c2 28       	rjmp	80003cd0 <udc_process_setup+0x2b4>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003c8e:	4f 48       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003c90:	90 39       	ld.sh	r9,r8[0x6]
80003c92:	30 08       	mov	r8,0
80003c94:	f0 09 19 00 	cp.h	r9,r8
80003c98:	c0 30       	breq	80003c9e <udc_process_setup+0x282>
80003c9a:	30 0c       	mov	r12,0
80003c9c:	ca e8       	rjmp	80003df8 <udc_process_setup+0x3dc>
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80003c9e:	4f e9       	lddpc	r9,80003e94 <udc_process_setup+0x478>
80003ca0:	4e f8       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003ca2:	91 49       	st.w	r8[0x10],r9
80003ca4:	30 1c       	mov	r12,1
80003ca6:	ca 98       	rjmp	80003df8 <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003ca8:	4e d8       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003caa:	90 39       	ld.sh	r9,r8[0x6]
80003cac:	30 08       	mov	r8,0
80003cae:	f0 09 19 00 	cp.h	r9,r8
80003cb2:	c0 d1       	brne	80003ccc <udc_process_setup+0x2b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80003cb4:	4e a8       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003cb6:	90 19       	ld.sh	r9,r8[0x2]
80003cb8:	30 18       	mov	r8,1
80003cba:	f0 09 19 00 	cp.h	r9,r8
80003cbe:	c0 71       	brne	80003ccc <udc_process_setup+0x2b0>
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
80003cc0:	4e 88       	lddpc	r8,80003e60 <udc_process_setup+0x444>
80003cc2:	90 09       	ld.sh	r9,r8[0x0]
80003cc4:	a9 d9       	cbr	r9,0x9
80003cc6:	b0 09       	st.h	r8[0x0],r9
80003cc8:	30 1c       	mov	r12,1
80003cca:	c9 78       	rjmp	80003df8 <udc_process_setup+0x3dc>
80003ccc:	30 0c       	mov	r12,0
80003cce:	c9 58       	rjmp	80003df8 <udc_process_setup+0x3dc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
80003cd0:	4e 38       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003cd2:	90 39       	ld.sh	r9,r8[0x6]
80003cd4:	30 08       	mov	r8,0
80003cd6:	f0 09 19 00 	cp.h	r9,r8
80003cda:	c3 41       	brne	80003d42 <udc_process_setup+0x326>
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
80003cdc:	f0 1f 00 6f 	mcall	80003e98 <udc_process_setup+0x47c>
80003ce0:	c3 10       	breq	80003d42 <udc_process_setup+0x326>
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80003ce2:	4d f8       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003ce4:	11 b9       	ld.ub	r9,r8[0x3]
80003ce6:	4e 18       	lddpc	r8,80003e68 <udc_process_setup+0x44c>
80003ce8:	70 08       	ld.w	r8,r8[0x0]
80003cea:	f1 38 00 11 	ld.ub	r8,r8[17]
80003cee:	10 39       	cp.w	r9,r8
80003cf0:	e0 89 00 29 	brgt	80003d42 <udc_process_setup+0x326>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
80003cf4:	f0 1f 00 6a 	mcall	80003e9c <udc_process_setup+0x480>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80003cf8:	4d 98       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003cfa:	11 b8       	ld.ub	r8,r8[0x3]
80003cfc:	4e 09       	lddpc	r9,80003e7c <udc_process_setup+0x460>
80003cfe:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80003d00:	58 08       	cp.w	r8,0
80003d02:	c2 20       	breq	80003d46 <udc_process_setup+0x32a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80003d04:	20 18       	sub	r8,1
80003d06:	4d 99       	lddpc	r9,80003e68 <udc_process_setup+0x44c>
80003d08:	72 19       	ld.w	r9,r9[0x4]
80003d0a:	f2 08 00 38 	add	r8,r9,r8<<0x3
80003d0e:	4d d9       	lddpc	r9,80003e80 <udc_process_setup+0x464>
80003d10:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d12:	70 08       	ld.w	r8,r8[0x0]
80003d14:	11 c9       	ld.ub	r9,r8[0x4]
80003d16:	30 08       	mov	r8,0
80003d18:	f0 09 18 00 	cp.b	r9,r8
80003d1c:	c1 50       	breq	80003d46 <udc_process_setup+0x32a>
80003d1e:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d20:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d22:	4d 86       	lddpc	r6,80003e80 <udc_process_setup+0x464>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d24:	0a 9b       	mov	r11,r5
80003d26:	0e 9c       	mov	r12,r7
80003d28:	f0 1f 00 5e 	mcall	80003ea0 <udc_process_setup+0x484>
80003d2c:	c0 b0       	breq	80003d42 <udc_process_setup+0x326>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80003d2e:	2f f7       	sub	r7,-1
80003d30:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d32:	6c 08       	ld.w	r8,r6[0x0]
80003d34:	70 08       	ld.w	r8,r8[0x0]
80003d36:	11 c8       	ld.ub	r8,r8[0x4]
80003d38:	ee 08 18 00 	cp.b	r8,r7
80003d3c:	fe 9b ff f4 	brhi	80003d24 <udc_process_setup+0x308>
80003d40:	c0 38       	rjmp	80003d46 <udc_process_setup+0x32a>
80003d42:	30 0c       	mov	r12,0
80003d44:	c5 a8       	rjmp	80003df8 <udc_process_setup+0x3dc>
80003d46:	30 1c       	mov	r12,1
80003d48:	c5 88       	rjmp	80003df8 <udc_process_setup+0x3dc>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003d4a:	58 18       	cp.w	r8,1
80003d4c:	c2 21       	brne	80003d90 <udc_process_setup+0x374>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003d4e:	4c 49       	lddpc	r9,80003e5c <udc_process_setup+0x440>
80003d50:	13 9a       	ld.ub	r10,r9[0x1]
80003d52:	30 b9       	mov	r9,11
80003d54:	f2 0a 18 00 	cp.b	r10,r9
80003d58:	c1 c1       	brne	80003d90 <udc_process_setup+0x374>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
80003d5a:	4c 18       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003d5c:	90 39       	ld.sh	r9,r8[0x6]
80003d5e:	30 08       	mov	r8,0
80003d60:	f0 09 19 00 	cp.h	r9,r8
80003d64:	c1 41       	brne	80003d8c <udc_process_setup+0x370>
		return false;	// Error in request
	if (!udc_num_configuration)
80003d66:	4c 68       	lddpc	r8,80003e7c <udc_process_setup+0x460>
80003d68:	11 89       	ld.ub	r9,r8[0x0]
80003d6a:	30 08       	mov	r8,0
80003d6c:	f0 09 18 00 	cp.b	r9,r8
80003d70:	c0 e0       	breq	80003d8c <udc_process_setup+0x370>
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80003d72:	4b b8       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003d74:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num))
80003d76:	11 d7       	ld.ub	r7,r8[0x5]
80003d78:	0e 9c       	mov	r12,r7
80003d7a:	f0 1f 00 4b 	mcall	80003ea4 <udc_process_setup+0x488>
80003d7e:	c0 70       	breq	80003d8c <udc_process_setup+0x370>
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80003d80:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80003d84:	0e 9c       	mov	r12,r7
80003d86:	f0 1f 00 47 	mcall	80003ea0 <udc_process_setup+0x484>
80003d8a:	c3 78       	rjmp	80003df8 <udc_process_setup+0x3dc>
80003d8c:	30 0c       	mov	r12,0
80003d8e:	c3 58       	rjmp	80003df8 <udc_process_setup+0x3dc>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003d90:	58 28       	cp.w	r8,2
80003d92:	c3 71       	brne	80003e00 <udc_process_setup+0x3e4>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003d94:	4b 28       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003d96:	11 98       	ld.ub	r8,r8[0x1]
80003d98:	30 19       	mov	r9,1
80003d9a:	f2 08 18 00 	cp.b	r8,r9
80003d9e:	c0 60       	breq	80003daa <udc_process_setup+0x38e>
80003da0:	30 39       	mov	r9,3
80003da2:	f2 08 18 00 	cp.b	r8,r9
80003da6:	c2 81       	brne	80003df6 <udc_process_setup+0x3da>
80003da8:	c1 48       	rjmp	80003dd0 <udc_process_setup+0x3b4>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003daa:	4a d8       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003dac:	90 39       	ld.sh	r9,r8[0x6]
80003dae:	30 08       	mov	r8,0
80003db0:	f0 09 19 00 	cp.h	r9,r8
80003db4:	c0 c1       	brne	80003dcc <udc_process_setup+0x3b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003db6:	4a a8       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003db8:	90 19       	ld.sh	r9,r8[0x2]
80003dba:	30 08       	mov	r8,0
80003dbc:	f0 09 19 00 	cp.h	r9,r8
80003dc0:	c0 61       	brne	80003dcc <udc_process_setup+0x3b0>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003dc2:	4a 78       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003dc4:	11 dc       	ld.ub	r12,r8[0x5]
80003dc6:	f0 1f 00 39 	mcall	80003ea8 <udc_process_setup+0x48c>
80003dca:	c1 78       	rjmp	80003df8 <udc_process_setup+0x3dc>
80003dcc:	30 0c       	mov	r12,0
80003dce:	c1 58       	rjmp	80003df8 <udc_process_setup+0x3dc>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003dd0:	4a 38       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003dd2:	90 39       	ld.sh	r9,r8[0x6]
80003dd4:	30 08       	mov	r8,0
80003dd6:	f0 09 19 00 	cp.h	r9,r8
80003dda:	c0 c1       	brne	80003df2 <udc_process_setup+0x3d6>
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003ddc:	4a 08       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003dde:	90 19       	ld.sh	r9,r8[0x2]
80003de0:	30 08       	mov	r8,0
80003de2:	f0 09 19 00 	cp.h	r9,r8
80003de6:	c0 61       	brne	80003df2 <udc_process_setup+0x3d6>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003de8:	49 d8       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003dea:	11 dc       	ld.ub	r12,r8[0x5]
80003dec:	f0 1f 00 30 	mcall	80003eac <udc_process_setup+0x490>
80003df0:	c0 48       	rjmp	80003df8 <udc_process_setup+0x3dc>
80003df2:	30 0c       	mov	r12,0
80003df4:	c0 28       	rjmp	80003df8 <udc_process_setup+0x3dc>
80003df6:	30 0c       	mov	r12,0
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
80003df8:	58 0c       	cp.w	r12,0
80003dfa:	c0 30       	breq	80003e00 <udc_process_setup+0x3e4>
80003dfc:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80003e00:	49 78       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003e02:	11 88       	ld.ub	r8,r8[0x0]
80003e04:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003e08:	58 18       	cp.w	r8,1
80003e0a:	c2 71       	brne	80003e58 <udc_process_setup+0x43c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
80003e0c:	49 c8       	lddpc	r8,80003e7c <udc_process_setup+0x460>
80003e0e:	11 89       	ld.ub	r9,r8[0x0]
80003e10:	30 08       	mov	r8,0
80003e12:	f0 09 18 00 	cp.b	r9,r8
80003e16:	c2 10       	breq	80003e58 <udc_process_setup+0x43c>
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003e18:	49 18       	lddpc	r8,80003e5c <udc_process_setup+0x440>
80003e1a:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003e1c:	49 98       	lddpc	r8,80003e80 <udc_process_setup+0x464>
80003e1e:	70 08       	ld.w	r8,r8[0x0]
80003e20:	70 08       	ld.w	r8,r8[0x0]
80003e22:	11 c8       	ld.ub	r8,r8[0x4]
80003e24:	ee 08 18 00 	cp.b	r8,r7
80003e28:	e0 88 00 18 	brls	80003e58 <udc_process_setup+0x43c>
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003e2c:	0e 96       	mov	r6,r7
80003e2e:	30 0b       	mov	r11,0
80003e30:	0e 9c       	mov	r12,r7
80003e32:	f0 1f 00 15 	mcall	80003e84 <udc_process_setup+0x468>
80003e36:	c1 10       	breq	80003e58 <udc_process_setup+0x43c>
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003e38:	49 28       	lddpc	r8,80003e80 <udc_process_setup+0x464>
80003e3a:	70 08       	ld.w	r8,r8[0x0]
80003e3c:	70 18       	ld.w	r8,r8[0x4]
80003e3e:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003e42:	6e 3c       	ld.w	r12,r7[0xc]
80003e44:	5d 1c       	icall	r12
80003e46:	18 9b       	mov	r11,r12
80003e48:	0c 9c       	mov	r12,r6
80003e4a:	f0 1f 00 0f 	mcall	80003e84 <udc_process_setup+0x468>
80003e4e:	c0 50       	breq	80003e58 <udc_process_setup+0x43c>
		return false;

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80003e50:	6e 2c       	ld.w	r12,r7[0x8]
80003e52:	5d 1c       	icall	r12
80003e54:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e58:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003e5c:	00 00       	add	r0,r0
80003e5e:	0a 10       	sub	r0,r5
80003e60:	00 00       	add	r0,r0
80003e62:	08 8c       	andn	r12,r4
80003e64:	80 00       	ld.sh	r0,r0[0x0]
80003e66:	23 f4       	sub	r4,63
80003e68:	00 00       	add	r0,r0
80003e6a:	00 a4       	st.w	r0++,r4
80003e6c:	00 00       	add	r0,r0
80003e6e:	00 c0       	st.b	r0++,r0
80003e70:	00 00       	add	r0,r0
80003e72:	00 e4       	st.h	--r0,r4
80003e74:	00 00       	add	r0,r0
80003e76:	00 c4       	st.b	r0++,r4
80003e78:	00 00       	add	r0,r0
80003e7a:	00 d0       	st.w	--r0,r0
80003e7c:	00 00       	add	r0,r0
80003e7e:	08 8e       	andn	lr,r4
80003e80:	00 00       	add	r0,r0
80003e82:	08 88       	andn	r8,r4
80003e84:	80 00       	ld.sh	r0,r0[0x0]
80003e86:	38 0c       	mov	r12,-128
80003e88:	00 00       	add	r0,r0
80003e8a:	08 84       	andn	r4,r4
80003e8c:	80 00       	ld.sh	r0,r0[0x0]
80003e8e:	24 00       	sub	r0,64
80003e90:	00 00       	add	r0,r0
80003e92:	08 90       	mov	r0,r4
80003e94:	80 00       	ld.sh	r0,r0[0x0]
80003e96:	38 e0       	mov	r0,-114
80003e98:	80 00       	ld.sh	r0,r0[0x0]
80003e9a:	23 ce       	sub	lr,60
80003e9c:	80 00       	ld.sh	r0,r0[0x0]
80003e9e:	39 bc       	mov	r12,-101
80003ea0:	80 00       	ld.sh	r0,r0[0x0]
80003ea2:	38 f8       	mov	r8,-113
80003ea4:	80 00       	ld.sh	r0,r0[0x0]
80003ea6:	39 58       	mov	r8,-107
80003ea8:	80 00       	ld.sh	r0,r0[0x0]
80003eaa:	24 90       	sub	r0,73
80003eac:	80 00       	ld.sh	r0,r0[0x0]
80003eae:	24 14       	sub	r4,65

80003eb0 <_read>:
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
{
80003eb0:	eb cd 40 fc 	pushm	r2-r7,lr
80003eb4:	20 1d       	sub	sp,4
80003eb6:	16 94       	mov	r4,r11
80003eb8:	14 95       	mov	r5,r10
	int nChars = 0;

	if (file != 0)
80003eba:	58 0c       	cp.w	r12,0
80003ebc:	c0 30       	breq	80003ec2 <_read+0x12>
80003ebe:	3f f7       	mov	r7,-1
80003ec0:	c1 98       	rjmp	80003ef2 <_read+0x42>
		return -1;

	for (; len > 0; --len) {
80003ec2:	58 0a       	cp.w	r10,0
80003ec4:	e0 89 00 04 	brgt	80003ecc <_read+0x1c>
80003ec8:	30 07       	mov	r7,0
80003eca:	c1 48       	rjmp	80003ef2 <_read+0x42>
80003ecc:	30 07       	mov	r7,0
		int c;
		ptr_get(stdio_base,&c);
80003ece:	48 c3       	lddpc	r3,80003efc <_read+0x4c>
80003ed0:	48 c6       	lddpc	r6,80003f00 <_read+0x50>
80003ed2:	1a 92       	mov	r2,sp
80003ed4:	66 0c       	ld.w	r12,r3[0x0]
80003ed6:	6c 08       	ld.w	r8,r6[0x0]
80003ed8:	1a 9b       	mov	r11,sp
80003eda:	5d 18       	icall	r8
		if (c < 0)
80003edc:	40 08       	lddsp	r8,sp[0x0]
80003ede:	58 08       	cp.w	r8,0
80003ee0:	c0 95       	brlt	80003ef2 <_read+0x42>
		break;
		*ptr++ = c;
80003ee2:	e8 07 0b 08 	st.b	r4[r7],r8
		++nChars;
80003ee6:	2f f7       	sub	r7,-1
// GCC AVR32 implementation
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
80003ee8:	ea 07 01 08 	sub	r8,r5,r7
	int nChars = 0;

	if (file != 0)
		return -1;

	for (; len > 0; --len) {
80003eec:	58 08       	cp.w	r8,0
80003eee:	fe 99 ff f3 	brgt	80003ed4 <_read+0x24>
		break;
		*ptr++ = c;
		++nChars;
	}
	return nChars;
}
80003ef2:	0e 9c       	mov	r12,r7
80003ef4:	2f fd       	sub	sp,-4
80003ef6:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003efa:	00 00       	add	r0,r0
80003efc:	00 00       	add	r0,r0
80003efe:	0a 38       	cp.w	r8,r5
80003f00:	00 00       	add	r0,r0
80003f02:	0a 30       	cp.w	r0,r5

80003f04 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003f04:	30 19       	mov	r9,1
80003f06:	48 28       	lddpc	r8,80003f0c <stdio_usb_enable+0x8>
80003f08:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80003f0a:	5e ff       	retal	1
80003f0c:	00 00       	add	r0,r0
80003f0e:	08 98       	mov	r8,r4

80003f10 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
80003f10:	30 09       	mov	r9,0
80003f12:	48 28       	lddpc	r8,80003f18 <stdio_usb_disable+0x8>
80003f14:	b0 89       	st.b	r8[0x0],r9
}
80003f16:	5e fc       	retal	r12
80003f18:	00 00       	add	r0,r0
80003f1a:	08 98       	mov	r8,r4

80003f1c <stdio_usb_vbus_event>:
	
	*data = udi_cdc_getc ();
}

void stdio_usb_vbus_event(bool b_high)
{
80003f1c:	d4 01       	pushm	lr
	if (b_high) {
80003f1e:	58 0c       	cp.w	r12,0
80003f20:	c0 40       	breq	80003f28 <stdio_usb_vbus_event+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80003f22:	f0 1f 00 04 	mcall	80003f30 <stdio_usb_vbus_event+0x14>
80003f26:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
80003f28:	f0 1f 00 03 	mcall	80003f34 <stdio_usb_vbus_event+0x18>
80003f2c:	d8 02       	popm	pc
80003f2e:	00 00       	add	r0,r0
80003f30:	80 00       	ld.sh	r0,r0[0x0]
80003f32:	2a 88       	sub	r8,-88
80003f34:	80 00       	ld.sh	r0,r0[0x0]
80003f36:	27 38       	sub	r8,115

80003f38 <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init (volatile void * usart)
{
80003f38:	d4 01       	pushm	lr
	stdio_base = usart;
80003f3a:	48 98       	lddpc	r8,80003f5c <stdio_usb_init+0x24>
80003f3c:	91 0c       	st.w	r8[0x0],r12
	ptr_put = stdio_usb_putchar;
80003f3e:	48 99       	lddpc	r9,80003f60 <stdio_usb_init+0x28>
80003f40:	48 98       	lddpc	r8,80003f64 <stdio_usb_init+0x2c>
80003f42:	91 09       	st.w	r8[0x0],r9
	ptr_get = stdio_usb_getchar;
80003f44:	48 99       	lddpc	r9,80003f68 <stdio_usb_init+0x30>
80003f46:	48 a8       	lddpc	r8,80003f6c <stdio_usb_init+0x34>
80003f48:	91 09       	st.w	r8[0x0],r9

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
80003f4a:	f0 1f 00 0a 	mcall	80003f70 <stdio_usb_init+0x38>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
80003f4e:	f0 1f 00 0a 	mcall	80003f74 <stdio_usb_init+0x3c>
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();

	if (! udc_include_vbus_monitoring ()) {
80003f52:	c0 41       	brne	80003f5a <stdio_usb_init+0x22>
		stdio_usb_vbus_event (true);
80003f54:	30 1c       	mov	r12,1
80003f56:	f0 1f 00 09 	mcall	80003f78 <stdio_usb_init+0x40>
80003f5a:	d8 02       	popm	pc
80003f5c:	00 00       	add	r0,r0
80003f5e:	0a 38       	cp.w	r8,r5
80003f60:	80 00       	ld.sh	r0,r0[0x0]
80003f62:	3f a8       	mov	r8,-6
80003f64:	00 00       	add	r0,r0
80003f66:	0a 34       	cp.w	r4,r5
80003f68:	80 00       	ld.sh	r0,r0[0x0]
80003f6a:	3f 7c       	mov	r12,-9
80003f6c:	00 00       	add	r0,r0
80003f6e:	0a 30       	cp.w	r0,r5
80003f70:	80 00       	ld.sh	r0,r0[0x0]
80003f72:	2a f8       	sub	r8,-81
80003f74:	80 00       	ld.sh	r0,r0[0x0]
80003f76:	23 a8       	sub	r8,58
80003f78:	80 00       	ld.sh	r0,r0[0x0]
80003f7a:	3f 1c       	mov	r12,-15

80003f7c <stdio_usb_getchar>:

	return udi_cdc_putc (data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * usart, int * data)
{
80003f7c:	eb cd 40 80 	pushm	r7,lr
80003f80:	16 97       	mov	r7,r11
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003f82:	48 88       	lddpc	r8,80003fa0 <stdio_usb_getchar+0x24>
80003f84:	11 89       	ld.ub	r9,r8[0x0]
80003f86:	30 08       	mov	r8,0
80003f88:	f0 09 18 00 	cp.b	r9,r8
80003f8c:	c0 51       	brne	80003f96 <stdio_usb_getchar+0x1a>
		*data = 0;  // -1
80003f8e:	30 08       	mov	r8,0
80003f90:	97 08       	st.w	r11[0x0],r8
		return;
80003f92:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	
	*data = udi_cdc_getc ();
80003f96:	f0 1f 00 04 	mcall	80003fa4 <stdio_usb_getchar+0x28>
80003f9a:	8f 0c       	st.w	r7[0x0],r12
80003f9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fa0:	00 00       	add	r0,r0
80003fa2:	08 98       	mov	r8,r4
80003fa4:	80 00       	ld.sh	r0,r0[0x0]
80003fa6:	35 00       	mov	r0,80

80003fa8 <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * usart, int data)
{
80003fa8:	d4 01       	pushm	lr
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003faa:	48 78       	lddpc	r8,80003fc4 <stdio_usb_putchar+0x1c>
80003fac:	11 89       	ld.ub	r9,r8[0x0]
80003fae:	30 08       	mov	r8,0
80003fb0:	f0 09 18 00 	cp.b	r9,r8
80003fb4:	c0 60       	breq	80003fc0 <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc (data) ? 0 : -1;
80003fb6:	16 9c       	mov	r12,r11
80003fb8:	f0 1f 00 04 	mcall	80003fc8 <stdio_usb_putchar+0x20>
80003fbc:	c0 21       	brne	80003fc0 <stdio_usb_putchar+0x18>
80003fbe:	dc 0a       	popm	pc,r12=-1
80003fc0:	d8 0a       	popm	pc,r12=0
80003fc2:	00 00       	add	r0,r0
80003fc4:	00 00       	add	r0,r0
80003fc6:	08 98       	mov	r8,r4
80003fc8:	80 00       	ld.sh	r0,r0[0x0]
80003fca:	34 00       	mov	r0,64

80003fcc <_write>:

#elif (defined(__GNUC__) && !defined(XMEGA))

	int __attribute__((weak))
	_write (int file, char * ptr, int len)
	{
80003fcc:	eb cd 40 f8 	pushm	r3-r7,lr
80003fd0:	16 94       	mov	r4,r11
80003fd2:	14 95       	mov	r5,r10
		int nChars = 0;
	
		if ( (file != 1)
80003fd4:	20 1c       	sub	r12,1
80003fd6:	58 2c       	cp.w	r12,2
80003fd8:	e0 8b 00 13 	brhi	80003ffe <_write+0x32>
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80003fdc:	58 0a       	cp.w	r10,0
80003fde:	c0 31       	brne	80003fe4 <_write+0x18>
80003fe0:	30 07       	mov	r7,0
80003fe2:	c0 f8       	rjmp	80004000 <_write+0x34>
80003fe4:	30 07       	mov	r7,0
			if (ptr_put(stdio_base, *ptr++) < 0) {
80003fe6:	48 93       	lddpc	r3,80004008 <_write+0x3c>
80003fe8:	48 96       	lddpc	r6,8000400c <_write+0x40>
80003fea:	66 0c       	ld.w	r12,r3[0x0]
80003fec:	6c 08       	ld.w	r8,r6[0x0]
80003fee:	e8 07 07 0b 	ld.ub	r11,r4[r7]
80003ff2:	5d 18       	icall	r8
80003ff4:	c0 55       	brlt	80003ffe <_write+0x32>
				return -1;
			}
			++nChars;
80003ff6:	2f f7       	sub	r7,-1
	
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80003ff8:	0e 35       	cp.w	r5,r7
80003ffa:	cf 81       	brne	80003fea <_write+0x1e>
80003ffc:	c0 28       	rjmp	80004000 <_write+0x34>
80003ffe:	3f f7       	mov	r7,-1
				return -1;
			}
			++nChars;
		}
		return nChars;
	}
80004000:	0e 9c       	mov	r12,r7
80004002:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80004006:	00 00       	add	r0,r0
80004008:	00 00       	add	r0,r0
8000400a:	0a 38       	cp.w	r8,r5
8000400c:	00 00       	add	r0,r0
8000400e:	0a 34       	cp.w	r4,r5

80004010 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
80004010:	f8 c8 ff f8 	sub	r8,r12,-8
80004014:	99 18       	st.w	r12[0x4],r8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80004016:	3f f9       	mov	r9,-1
80004018:	99 29       	st.w	r12[0x8],r9

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
8000401a:	99 38       	st.w	r12[0xc],r8
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
8000401c:	99 48       	st.w	r12[0x10],r8

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
8000401e:	30 08       	mov	r8,0
80004020:	99 08       	st.w	r12[0x0],r8
}
80004022:	5e fc       	retal	r12

80004024 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80004024:	30 08       	mov	r8,0
80004026:	99 48       	st.w	r12[0x10],r8
}
80004028:	5e fc       	retal	r12

8000402a <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
8000402a:	78 18       	ld.w	r8,r12[0x4]

	pxNewListItem->pxNext = pxIndex->pxNext;
8000402c:	70 19       	ld.w	r9,r8[0x4]
8000402e:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxPrevious = pxList->pxIndex;
80004030:	78 19       	ld.w	r9,r12[0x4]
80004032:	97 29       	st.w	r11[0x8],r9
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80004034:	70 19       	ld.w	r9,r8[0x4]
80004036:	93 2b       	st.w	r9[0x8],r11
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
80004038:	91 1b       	st.w	r8[0x4],r11
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
8000403a:	99 1b       	st.w	r12[0x4],r11

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
8000403c:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
8000403e:	78 08       	ld.w	r8,r12[0x0]
80004040:	2f f8       	sub	r8,-1
80004042:	99 08       	st.w	r12[0x0],r8
}
80004044:	5e fc       	retal	r12

80004046 <vListInsert>:
{
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
80004046:	76 0a       	ld.w	r10,r11[0x0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80004048:	5b fa       	cp.w	r10,-1
8000404a:	c0 31       	brne	80004050 <vListInsert+0xa>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
8000404c:	78 48       	ld.w	r8,r12[0x10]
8000404e:	c0 c8       	rjmp	80004066 <vListInsert+0x20>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
80004050:	f8 c8 ff f8 	sub	r8,r12,-8
80004054:	70 19       	ld.w	r9,r8[0x4]
80004056:	72 09       	ld.w	r9,r9[0x0]
80004058:	12 3a       	cp.w	r10,r9
8000405a:	c0 63       	brcs	80004066 <vListInsert+0x20>
8000405c:	70 18       	ld.w	r8,r8[0x4]
8000405e:	70 19       	ld.w	r9,r8[0x4]
80004060:	72 09       	ld.w	r9,r9[0x0]
80004062:	12 3a       	cp.w	r10,r9
80004064:	cf c2       	brcc	8000405c <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80004066:	70 19       	ld.w	r9,r8[0x4]
80004068:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
8000406a:	93 2b       	st.w	r9[0x8],r11
	pxNewListItem->pxPrevious = pxIterator;
8000406c:	97 28       	st.w	r11[0x8],r8
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
8000406e:	91 1b       	st.w	r8[0x4],r11

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004070:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
80004072:	78 08       	ld.w	r8,r12[0x0]
80004074:	2f f8       	sub	r8,-1
80004076:	99 08       	st.w	r12[0x0],r8
}
80004078:	5e fc       	retal	r12

8000407a <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
8000407a:	78 18       	ld.w	r8,r12[0x4]
8000407c:	78 29       	ld.w	r9,r12[0x8]
8000407e:	91 29       	st.w	r8[0x8],r9
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80004080:	78 28       	ld.w	r8,r12[0x8]
80004082:	78 19       	ld.w	r9,r12[0x4]
80004084:	91 19       	st.w	r8[0x4],r9
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
80004086:	78 48       	ld.w	r8,r12[0x10]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80004088:	70 19       	ld.w	r9,r8[0x4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
8000408a:	18 39       	cp.w	r9,r12
8000408c:	f9 f9 00 02 	ld.weq	r9,r12[0x8]
80004090:	f1 f9 0a 01 	st.weq	r8[0x4],r9
	}

	pxItemToRemove->pvContainer = NULL;
80004094:	30 09       	mov	r9,0
80004096:	99 49       	st.w	r12[0x10],r9
	( pxList->uxNumberOfItems )--;
80004098:	70 09       	ld.w	r9,r8[0x0]
8000409a:	20 19       	sub	r9,1
8000409c:	91 09       	st.w	r8[0x0],r9
}
8000409e:	5e fc       	retal	r12

800040a0 <pxPortInitialiseStack>:
	/* Setup the initial stack of the task.  The stack is set exactly as
	expected by the portRESTORE_CONTEXT() macro. */

	/* When the task starts, it will expect to find the function parameter in R12. */
	pxTopOfStack--;
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x08080808;					/* R8 */
800040a0:	e0 68 08 08 	mov	r8,2056
800040a4:	ea 18 08 08 	orh	r8,0x808
800040a8:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x09090909;					/* R9 */
800040aa:	e0 68 09 09 	mov	r8,2313
800040ae:	ea 18 09 09 	orh	r8,0x909
800040b2:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0A0A0A0A;					/* R10 */
800040b4:	e0 68 0a 0a 	mov	r8,2570
800040b8:	ea 18 0a 0a 	orh	r8,0xa0a
800040bc:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0B0B0B0B;					/* R11 */
800040be:	e0 68 0b 0b 	mov	r8,2827
800040c2:	ea 18 0b 0b 	orh	r8,0xb0b
800040c6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pvParameters;					/* R12 */
800040c8:	18 da       	st.w	--r12,r10
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xDEADBEEF;					/* R14/LR */
800040ca:	e0 68 be ef 	mov	r8,48879
800040ce:	ea 18 de ad 	orh	r8,0xdead
800040d2:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE; /* R15/PC */
800040d4:	18 db       	st.w	--r12,r11
	*pxTopOfStack-- = ( portSTACK_TYPE ) portINITIAL_SR;				/* SR */
800040d6:	fc 18 00 40 	movh	r8,0x40
800040da:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xFF0000FF;					/* R0 */
800040dc:	e0 68 00 ff 	mov	r8,255
800040e0:	ea 18 ff 00 	orh	r8,0xff00
800040e4:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x01010101;					/* R1 */
800040e6:	e0 68 01 01 	mov	r8,257
800040ea:	ea 18 01 01 	orh	r8,0x101
800040ee:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x02020202;					/* R2 */
800040f0:	e0 68 02 02 	mov	r8,514
800040f4:	ea 18 02 02 	orh	r8,0x202
800040f8:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x03030303;					/* R3 */
800040fa:	e0 68 03 03 	mov	r8,771
800040fe:	ea 18 03 03 	orh	r8,0x303
80004102:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x04040404;					/* R4 */
80004104:	e0 68 04 04 	mov	r8,1028
80004108:	ea 18 04 04 	orh	r8,0x404
8000410c:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x05050505;					/* R5 */
8000410e:	e0 68 05 05 	mov	r8,1285
80004112:	ea 18 05 05 	orh	r8,0x505
80004116:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x06060606;					/* R6 */
80004118:	e0 68 06 06 	mov	r8,1542
8000411c:	ea 18 06 06 	orh	r8,0x606
80004120:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x07070707;					/* R7 */
80004122:	e0 68 07 07 	mov	r8,1799
80004126:	ea 18 07 07 	orh	r8,0x707
8000412a:	18 d8       	st.w	--r12,r8
	*pxTopOfStack = ( portSTACK_TYPE ) portNO_CRITICAL_NESTING;			/* ulCriticalNesting */
8000412c:	30 08       	mov	r8,0
8000412e:	18 d8       	st.w	--r12,r8

	return pxTopOfStack;
}
80004130:	5e fc       	retal	r12
80004132:	d7 03       	nop

80004134 <vPortEnterCritical>:
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
__attribute__((__noinline__)) void vPortEnterCritical( void )
{
	/* Disable interrupts */
	portDISABLE_INTERRUPTS();
80004134:	d3 03       	ssrf	0x10

	/* Now interrupts are disabled ulCriticalNesting can be accessed
	 directly.  Increment ulCriticalNesting to keep a count of how many times
	 portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
80004136:	48 38       	lddpc	r8,80004140 <vPortEnterCritical+0xc>
80004138:	70 09       	ld.w	r9,r8[0x0]
8000413a:	2f f9       	sub	r9,-1
8000413c:	91 09       	st.w	r8[0x0],r9
}
8000413e:	5e fc       	retal	r12
80004140:	00 00       	add	r0,r0
80004142:	00 e8       	st.h	--r0,r8

80004144 <xPortStartScheduler>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
80004144:	d4 01       	pushm	lr
	};

#endif

	/* Disable all interrupt/exception. */
	portDISABLE_INTERRUPTS();
80004146:	d3 03       	ssrf	0x10
		/* Start the timer/counter. */
		tc_start(tc, configTICK_TC_CHANNEL);
	}
	#else
	{
		INTC_register_interrupt(&vTick, AVR32_CORE_COMPARE_IRQ, AVR32_INTC_INT0);
80004148:	30 0a       	mov	r10,0
8000414a:	14 9b       	mov	r11,r10
8000414c:	49 2c       	lddpc	r12,80004194 <xPortStartScheduler+0x50>
8000414e:	f0 1f 00 13 	mcall	80004198 <xPortStartScheduler+0x54>
/* Schedule the COUNT&COMPARE match interrupt in (configCPU_CLOCK_HZ/configTICK_RATE_HZ)
clock cycles from now. */
#if( configTICK_USE_TC==0 )
	static void prvScheduleFirstTick(void)
	{
		Set_system_register(AVR32_COMPARE, configCPU_CLOCK_HZ/configTICK_RATE_HZ);
80004152:	e0 68 2e e0 	mov	r8,12000
80004156:	e3 b8 00 43 	mtsr	0x10c,r8
		Set_system_register(AVR32_COUNT, 0);
8000415a:	30 08       	mov	r8,0
8000415c:	e3 b8 00 42 	mtsr	0x108,r8
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
	portRESTORE_CONTEXT();
80004160:	e0 68 09 6c 	mov	r8,2412
80004164:	ea 18 00 00 	orh	r8,0x0
80004168:	70 00       	ld.w	r0,r8[0x0]
8000416a:	60 0d       	ld.w	sp,r0[0x0]
8000416c:	1b 00       	ld.w	r0,sp++
8000416e:	e0 68 00 e8 	mov	r8,232
80004172:	ea 18 00 00 	orh	r8,0x0
80004176:	91 00       	st.w	r8[0x0],r0
80004178:	e3 cd 00 ff 	ldm	sp++,r0-r7
8000417c:	2f ed       	sub	sp,-8
8000417e:	e3 cd 5f 00 	ldm	sp++,r8-r12,lr
80004182:	fa f0 ff e0 	ld.w	r0,sp[-32]
80004186:	e3 b0 00 00 	mtsr	0x0,r0
8000418a:	fa f0 ff dc 	ld.w	r0,sp[-36]
8000418e:	fa ff ff e4 	ld.w	pc,sp[-28]

	/* Should not get here! */
	return 0;
}
80004192:	d8 0a       	popm	pc,r12=0
80004194:	80 00       	ld.sh	r0,r0[0x0]
80004196:	42 60       	lddsp	r0,sp[0x98]
80004198:	80 00       	ld.sh	r0,r0[0x0]
8000419a:	22 18       	sub	r8,33

8000419c <SCALLYield>:
/*-----------------------------------------------------------*/
__attribute__((__naked__)) void SCALLYield( void );
__attribute__((__naked__)) void SCALLYield( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_SCALL();
8000419c:	20 6d       	sub	sp,24
8000419e:	eb cd 00 ff 	pushm	r0-r7
800041a2:	fa c7 ff c0 	sub	r7,sp,-64
800041a6:	ee f0 ff f8 	ld.w	r0,r7[-8]
800041aa:	ef 40 ff e0 	st.w	r7[-32],r0
800041ae:	ee f0 ff fc 	ld.w	r0,r7[-4]
800041b2:	ef 40 ff e4 	st.w	r7[-28],r0
800041b6:	eb c7 5f 00 	stm	--r7,r8-r12,lr
800041ba:	e0 68 00 e8 	mov	r8,232
800041be:	ea 18 00 00 	orh	r8,0x0
800041c2:	70 00       	ld.w	r0,r8[0x0]
800041c4:	1a d0       	st.w	--sp,r0
800041c6:	f0 1f 00 1a 	mcall	8000422c <LABEL_RET_SCALL_266+0x14>
800041ca:	e0 68 09 6c 	mov	r8,2412
800041ce:	ea 18 00 00 	orh	r8,0x0
800041d2:	70 00       	ld.w	r0,r8[0x0]
800041d4:	81 0d       	st.w	r0[0x0],sp
	vTaskSwitchContext();
800041d6:	f0 1f 00 17 	mcall	80004230 <LABEL_RET_SCALL_266+0x18>
	portRESTORE_CONTEXT_SCALL();
800041da:	e0 68 09 6c 	mov	r8,2412
800041de:	ea 18 00 00 	orh	r8,0x0
800041e2:	70 00       	ld.w	r0,r8[0x0]
800041e4:	60 0d       	ld.w	sp,r0[0x0]
800041e6:	1b 00       	ld.w	r0,sp++
800041e8:	e0 68 00 e8 	mov	r8,232
800041ec:	ea 18 00 00 	orh	r8,0x0
800041f0:	91 00       	st.w	r8[0x0],r0
800041f2:	fa c7 ff d8 	sub	r7,sp,-40
800041f6:	e3 c7 5f 00 	ldm	r7++,r8-r12,lr
800041fa:	ee f0 ff e0 	ld.w	r0,r7[-32]
800041fe:	e0 61 00 e8 	mov	r1,232
80004202:	ea 11 00 00 	orh	r1,0x0
80004206:	62 02       	ld.w	r2,r1[0x0]
80004208:	58 02       	cp.w	r2,0
8000420a:	c0 70       	breq	80004218 <LABEL_RET_SCALL_266>
8000420c:	e4 c2 00 01 	sub	r2,r2,1
80004210:	83 02       	st.w	r1[0x0],r2
80004212:	58 02       	cp.w	r2,0
80004214:	c0 21       	brne	80004218 <LABEL_RET_SCALL_266>
80004216:	b1 c0       	cbr	r0,0x10

80004218 <LABEL_RET_SCALL_266>:
80004218:	ef 40 ff f8 	st.w	r7[-8],r0
8000421c:	ee f0 ff e4 	ld.w	r0,r7[-28]
80004220:	ef 40 ff fc 	st.w	r7[-4],r0
80004224:	e3 cd 00 ff 	ldm	sp++,r0-r7
80004228:	2f ad       	sub	sp,-24
8000422a:	d6 13       	rets
8000422c:	80 00       	ld.sh	r0,r0[0x0]
8000422e:	41 34       	lddsp	r4,sp[0x4c]
80004230:	80 00       	ld.sh	r0,r0[0x0]
80004232:	43 74       	lddsp	r4,sp[0xdc]

80004234 <prvClearCcInt>:
		Set_system_register(AVR32_COUNT, 0);
	}

	__attribute__((__noinline__)) static void prvClearCcInt(void)
	{
		Set_system_register(AVR32_COMPARE, Get_system_register(AVR32_COMPARE));
80004234:	e1 b8 00 43 	mfsr	r8,0x10c
80004238:	e3 b8 00 43 	mtsr	0x10c,r8
	}
8000423c:	5e fc       	retal	r12
8000423e:	d7 03       	nop

80004240 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

__attribute__((__noinline__)) void vPortExitCritical( void )
{
	if(ulCriticalNesting > portNO_CRITICAL_NESTING)
80004240:	48 78       	lddpc	r8,8000425c <vPortExitCritical+0x1c>
80004242:	70 08       	ld.w	r8,r8[0x0]
80004244:	58 08       	cp.w	r8,0
80004246:	5e 0c       	reteq	r12
	{
		ulCriticalNesting--;
80004248:	48 58       	lddpc	r8,8000425c <vPortExitCritical+0x1c>
8000424a:	70 09       	ld.w	r9,r8[0x0]
8000424c:	20 19       	sub	r9,1
8000424e:	91 09       	st.w	r8[0x0],r9
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
80004250:	70 08       	ld.w	r8,r8[0x0]
80004252:	58 08       	cp.w	r8,0
80004254:	5e 1c       	retne	r12
		{
			/* Enable all interrupt/exception. */
			portENABLE_INTERRUPTS();
80004256:	d5 03       	csrf	0x10
80004258:	5e fc       	retal	r12
8000425a:	00 00       	add	r0,r0
8000425c:	00 00       	add	r0,r0
8000425e:	00 e8       	st.h	--r0,r8

80004260 <vTick>:
/* The preemptive scheduler is defined as "naked" as the full context is saved
on entry as part of the context switch. */
__attribute__((__naked__)) static void vTick( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_OS_INT();
80004260:	eb cd 00 ff 	pushm	r0-r7
80004264:	e0 68 00 e8 	mov	r8,232
80004268:	ea 18 00 00 	orh	r8,0x0
8000426c:	70 00       	ld.w	r0,r8[0x0]
8000426e:	1a d0       	st.w	--sp,r0
80004270:	7a 90       	ld.w	r0,sp[0x24]
80004272:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
80004276:	58 10       	cp.w	r0,1
80004278:	e0 8b 00 08 	brhi	80004288 <LABEL_INT_SKIP_SAVE_CONTEXT_240>
8000427c:	e0 68 09 6c 	mov	r8,2412
80004280:	ea 18 00 00 	orh	r8,0x0
80004284:	70 00       	ld.w	r0,r8[0x0]
80004286:	81 0d       	st.w	r0[0x0],sp

80004288 <LABEL_INT_SKIP_SAVE_CONTEXT_240>:
	#if( configTICK_USE_TC==1 )
		/* Clear the interrupt flag. */
		prvClearTcInt();
	#else
		/* Clear the interrupt flag. */
		prvClearCcInt();
80004288:	f0 1f 00 12 	mcall	800042d0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x14>
	#endif

	/* Because FreeRTOS is not supposed to run with nested interrupts, put all OS
	calls in a critical section . */
	portENTER_CRITICAL();
8000428c:	f0 1f 00 12 	mcall	800042d4 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
		vTaskIncrementTick();
80004290:	f0 1f 00 12 	mcall	800042d8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x1c>
	portEXIT_CRITICAL();
80004294:	f0 1f 00 12 	mcall	800042dc <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>

	/* Restore the context of the "elected task". */
	portRESTORE_CONTEXT_OS_INT();
80004298:	7a 90       	ld.w	r0,sp[0x24]
8000429a:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
8000429e:	58 10       	cp.w	r0,1
800042a0:	e0 8b 00 0e 	brhi	800042bc <LABEL_INT_SKIP_RESTORE_CONTEXT_257>
800042a4:	f0 1f 00 0c 	mcall	800042d4 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
800042a8:	f0 1f 00 0e 	mcall	800042e0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x24>
800042ac:	f0 1f 00 0c 	mcall	800042dc <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>
800042b0:	e0 68 09 6c 	mov	r8,2412
800042b4:	ea 18 00 00 	orh	r8,0x0
800042b8:	70 00       	ld.w	r0,r8[0x0]
800042ba:	60 0d       	ld.w	sp,r0[0x0]

800042bc <LABEL_INT_SKIP_RESTORE_CONTEXT_257>:
800042bc:	1b 00       	ld.w	r0,sp++
800042be:	e0 68 00 e8 	mov	r8,232
800042c2:	ea 18 00 00 	orh	r8,0x0
800042c6:	91 00       	st.w	r8[0x0],r0
800042c8:	e3 cd 00 ff 	ldm	sp++,r0-r7
800042cc:	d6 03       	rete
800042ce:	00 00       	add	r0,r0
800042d0:	80 00       	ld.sh	r0,r0[0x0]
800042d2:	42 34       	lddsp	r4,sp[0x8c]
800042d4:	80 00       	ld.sh	r0,r0[0x0]
800042d6:	41 34       	lddsp	r4,sp[0x4c]
800042d8:	80 00       	ld.sh	r0,r0[0x0]
800042da:	43 f0       	lddsp	r0,sp[0xfc]
800042dc:	80 00       	ld.sh	r0,r0[0x0]
800042de:	42 40       	lddsp	r0,sp[0x90]
800042e0:	80 00       	ld.sh	r0,r0[0x0]
800042e2:	43 74       	lddsp	r4,sp[0xdc]

800042e4 <__malloc_lock>:
 * safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_lock(struct _reent *ptr);
void __malloc_lock(struct _reent *ptr)
{
800042e4:	d4 01       	pushm	lr
	vTaskSuspendAll();
800042e6:	f0 1f 00 02 	mcall	800042ec <__malloc_lock+0x8>
}
800042ea:	d8 02       	popm	pc
800042ec:	80 00       	ld.sh	r0,r0[0x0]
800042ee:	43 64       	lddsp	r4,sp[0xd8]

800042f0 <__malloc_unlock>:
 * a safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_unlock(struct _reent *ptr);
void __malloc_unlock(struct _reent *ptr)
{
800042f0:	d4 01       	pushm	lr
	xTaskResumeAll();
800042f2:	f0 1f 00 02 	mcall	800042f8 <__malloc_unlock+0x8>
}
800042f6:	d8 02       	popm	pc
800042f8:	80 00       	ld.sh	r0,r0[0x0]
800042fa:	45 08       	lddsp	r8,sp[0x140]

800042fc <_init_startup>:
 * exception vectors are not compatible with the SCALL management in the current
 * FreeRTOS port. More low-level initializations are besides added here.
 */
int _init_startup(void);
int _init_startup(void)
{
800042fc:	d4 01       	pushm	lr
		extern void __heap_end__;
		portBASE_TYPE *pxMem;
	#endif

	/* Load the Exception Vector Base Address in the corresponding system register. */
	Set_system_register( AVR32_EVBA, ( int ) &_evba );
800042fe:	48 48       	lddpc	r8,8000430c <_init_startup+0x10>
80004300:	e3 b8 00 01 	mtsr	0x4,r8

	/* Enable exceptions. */
	ENABLE_ALL_EXCEPTIONS();
80004304:	d5 53       	csrf	0x15

	/* Initialize interrupt handling. */
	INTC_init_interrupts();
80004306:	f0 1f 00 03 	mcall	80004310 <_init_startup+0x14>
	}
	#endif

  // Don't-care value for GCC.
  return 1;
}
8000430a:	da 0a       	popm	pc,r12=1
8000430c:	80 00       	ld.sh	r0,r0[0x0]
8000430e:	5a 00       	cp.w	r0,-32
80004310:	80 00       	ld.sh	r0,r0[0x0]
80004312:	22 48       	sub	r8,36

80004314 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80004314:	eb cd 40 80 	pushm	r7,lr
80004318:	18 97       	mov	r7,r12
	if( pv )
8000431a:	58 0c       	cp.w	r12,0
8000431c:	c0 80       	breq	8000432c <vPortFree+0x18>
	{
		vTaskSuspendAll();
8000431e:	f0 1f 00 05 	mcall	80004330 <vPortFree+0x1c>
		{
			free( pv );
80004322:	0e 9c       	mov	r12,r7
80004324:	f0 1f 00 04 	mcall	80004334 <vPortFree+0x20>
		}
		xTaskResumeAll();
80004328:	f0 1f 00 04 	mcall	80004338 <vPortFree+0x24>
8000432c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004330:	80 00       	ld.sh	r0,r0[0x0]
80004332:	43 64       	lddsp	r4,sp[0xd8]
80004334:	80 00       	ld.sh	r0,r0[0x0]
80004336:	4b 28       	lddpc	r8,800043fc <vTaskIncrementTick+0xc>
80004338:	80 00       	ld.sh	r0,r0[0x0]
8000433a:	45 08       	lddsp	r8,sp[0x140]

8000433c <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
8000433c:	eb cd 40 80 	pushm	r7,lr
80004340:	18 97       	mov	r7,r12
void *pvReturn;

	vTaskSuspendAll();
80004342:	f0 1f 00 06 	mcall	80004358 <pvPortMalloc+0x1c>
	{
		pvReturn = malloc( xWantedSize );
80004346:	0e 9c       	mov	r12,r7
80004348:	f0 1f 00 05 	mcall	8000435c <pvPortMalloc+0x20>
8000434c:	18 97       	mov	r7,r12
	}
	xTaskResumeAll();
8000434e:	f0 1f 00 05 	mcall	80004360 <pvPortMalloc+0x24>
		}
	}
	#endif
	
	return pvReturn;
}
80004352:	0e 9c       	mov	r12,r7
80004354:	e3 cd 80 80 	ldm	sp++,r7,pc
80004358:	80 00       	ld.sh	r0,r0[0x0]
8000435a:	43 64       	lddsp	r4,sp[0xd8]
8000435c:	80 00       	ld.sh	r0,r0[0x0]
8000435e:	4b 3c       	lddpc	r12,80004428 <vTaskIncrementTick+0x38>
80004360:	80 00       	ld.sh	r0,r0[0x0]
80004362:	45 08       	lddsp	r8,sp[0x140]

80004364 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
80004364:	48 38       	lddpc	r8,80004370 <vTaskSuspendAll+0xc>
80004366:	70 09       	ld.w	r9,r8[0x0]
80004368:	2f f9       	sub	r9,-1
8000436a:	91 09       	st.w	r8[0x0],r9
}
8000436c:	5e fc       	retal	r12
8000436e:	00 00       	add	r0,r0
80004370:	00 00       	add	r0,r0
80004372:	09 9c       	ld.ub	r12,r4[0x1]

80004374 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
80004374:	49 a8       	lddpc	r8,800043dc <vTaskSwitchContext+0x68>
80004376:	70 08       	ld.w	r8,r8[0x0]
80004378:	58 08       	cp.w	r8,0
8000437a:	c0 b1       	brne	80004390 <vTaskSwitchContext+0x1c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
8000437c:	49 98       	lddpc	r8,800043e0 <vTaskSwitchContext+0x6c>
8000437e:	70 08       	ld.w	r8,r8[0x0]
80004380:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004384:	49 89       	lddpc	r9,800043e4 <vTaskSwitchContext+0x70>
80004386:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000438a:	58 08       	cp.w	r8,0
8000438c:	c0 60       	breq	80004398 <vTaskSwitchContext+0x24>
8000438e:	c1 18       	rjmp	800043b0 <vTaskSwitchContext+0x3c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
80004390:	30 19       	mov	r9,1
80004392:	49 68       	lddpc	r8,800043e8 <vTaskSwitchContext+0x74>
80004394:	91 09       	st.w	r8[0x0],r9
80004396:	5e fc       	retal	r12
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
80004398:	49 28       	lddpc	r8,800043e0 <vTaskSwitchContext+0x6c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
8000439a:	49 3a       	lddpc	r10,800043e4 <vTaskSwitchContext+0x70>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
8000439c:	70 09       	ld.w	r9,r8[0x0]
8000439e:	20 19       	sub	r9,1
800043a0:	91 09       	st.w	r8[0x0],r9
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
800043a2:	70 09       	ld.w	r9,r8[0x0]
800043a4:	f2 09 00 29 	add	r9,r9,r9<<0x2
800043a8:	f4 09 03 29 	ld.w	r9,r10[r9<<0x2]
800043ac:	58 09       	cp.w	r9,0
800043ae:	cf 70       	breq	8000439c <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
800043b0:	48 c8       	lddpc	r8,800043e0 <vTaskSwitchContext+0x6c>
800043b2:	70 08       	ld.w	r8,r8[0x0]
800043b4:	f0 08 00 28 	add	r8,r8,r8<<0x2
800043b8:	48 b9       	lddpc	r9,800043e4 <vTaskSwitchContext+0x70>
800043ba:	f2 08 00 28 	add	r8,r9,r8<<0x2
800043be:	70 19       	ld.w	r9,r8[0x4]
800043c0:	72 19       	ld.w	r9,r9[0x4]
800043c2:	91 19       	st.w	r8[0x4],r9
800043c4:	f0 ca ff f8 	sub	r10,r8,-8
800043c8:	14 39       	cp.w	r9,r10
800043ca:	f3 f9 00 01 	ld.weq	r9,r9[0x4]
800043ce:	f1 f9 0a 01 	st.weq	r8[0x4],r9
800043d2:	70 18       	ld.w	r8,r8[0x4]
800043d4:	70 39       	ld.w	r9,r8[0xc]
800043d6:	48 68       	lddpc	r8,800043ec <vTaskSwitchContext+0x78>
800043d8:	91 09       	st.w	r8[0x0],r9
800043da:	5e fc       	retal	r12
800043dc:	00 00       	add	r0,r0
800043de:	09 9c       	ld.ub	r12,r4[0x1]
800043e0:	00 00       	add	r0,r0
800043e2:	09 d4       	ld.ub	r4,r4[0x5]
800043e4:	00 00       	add	r0,r0
800043e6:	08 b8       	st.h	r4++,r8
800043e8:	00 00       	add	r0,r0
800043ea:	09 bc       	ld.ub	r12,r4[0x3]
800043ec:	00 00       	add	r0,r0
800043ee:	09 6c       	ld.uh	r12,--r4

800043f0 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
800043f0:	eb cd 40 fe 	pushm	r1-r7,lr
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
800043f4:	4b a8       	lddpc	r8,800044dc <vTaskIncrementTick+0xec>
800043f6:	70 08       	ld.w	r8,r8[0x0]
800043f8:	58 08       	cp.w	r8,0
800043fa:	c6 a1       	brne	800044ce <vTaskIncrementTick+0xde>
	{
		++xTickCount;
800043fc:	4b 98       	lddpc	r8,800044e0 <vTaskIncrementTick+0xf0>
800043fe:	70 09       	ld.w	r9,r8[0x0]
80004400:	2f f9       	sub	r9,-1
80004402:	91 09       	st.w	r8[0x0],r9
		if( xTickCount == ( portTickType ) 0 )
80004404:	70 08       	ld.w	r8,r8[0x0]
80004406:	58 08       	cp.w	r8,0
80004408:	c1 a1       	brne	8000443c <vTaskIncrementTick+0x4c>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
8000440a:	4b 78       	lddpc	r8,800044e4 <vTaskIncrementTick+0xf4>
8000440c:	70 0a       	ld.w	r10,r8[0x0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
8000440e:	4b 79       	lddpc	r9,800044e8 <vTaskIncrementTick+0xf8>
80004410:	72 0b       	ld.w	r11,r9[0x0]
80004412:	91 0b       	st.w	r8[0x0],r11
			pxOverflowDelayedTaskList = pxTemp;
80004414:	93 0a       	st.w	r9[0x0],r10
			xNumOfOverflows++;
80004416:	4b 69       	lddpc	r9,800044ec <vTaskIncrementTick+0xfc>
80004418:	72 0a       	ld.w	r10,r9[0x0]
8000441a:	2f fa       	sub	r10,-1
8000441c:	93 0a       	st.w	r9[0x0],r10
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
8000441e:	70 08       	ld.w	r8,r8[0x0]
80004420:	70 08       	ld.w	r8,r8[0x0]
80004422:	58 08       	cp.w	r8,0
80004424:	c0 51       	brne	8000442e <vTaskIncrementTick+0x3e>
				/* The new current delayed list is empty.  Set 
				xNextTaskUnblockTime to the maximum possible value so it is 
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until 
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
80004426:	3f f9       	mov	r9,-1
80004428:	4b 28       	lddpc	r8,800044f0 <vTaskIncrementTick+0x100>
8000442a:	91 09       	st.w	r8[0x0],r9
8000442c:	c0 88       	rjmp	8000443c <vTaskIncrementTick+0x4c>
			{
				/* The new current delayed list is not empty, get the value of 
				the item at the head of the delayed list.  This is the time at 
				which the task at the head of the delayed list should be removed 
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
8000442e:	4a e8       	lddpc	r8,800044e4 <vTaskIncrementTick+0xf4>
80004430:	70 08       	ld.w	r8,r8[0x0]
80004432:	70 38       	ld.w	r8,r8[0xc]
80004434:	70 38       	ld.w	r8,r8[0xc]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80004436:	70 19       	ld.w	r9,r8[0x4]
80004438:	4a e8       	lddpc	r8,800044f0 <vTaskIncrementTick+0x100>
8000443a:	91 09       	st.w	r8[0x0],r9
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
8000443c:	4a 98       	lddpc	r8,800044e0 <vTaskIncrementTick+0xf0>
8000443e:	70 09       	ld.w	r9,r8[0x0]
80004440:	4a c8       	lddpc	r8,800044f0 <vTaskIncrementTick+0x100>
80004442:	70 08       	ld.w	r8,r8[0x0]
80004444:	10 39       	cp.w	r9,r8
80004446:	c4 83       	brcs	800044d6 <vTaskIncrementTick+0xe6>
80004448:	4a 78       	lddpc	r8,800044e4 <vTaskIncrementTick+0xf4>
8000444a:	70 08       	ld.w	r8,r8[0x0]
8000444c:	70 08       	ld.w	r8,r8[0x0]
8000444e:	58 08       	cp.w	r8,0
80004450:	c0 c0       	breq	80004468 <vTaskIncrementTick+0x78>
80004452:	4a 58       	lddpc	r8,800044e4 <vTaskIncrementTick+0xf4>
80004454:	70 08       	ld.w	r8,r8[0x0]
80004456:	70 38       	ld.w	r8,r8[0xc]
80004458:	70 37       	ld.w	r7,r8[0xc]
8000445a:	6e 18       	ld.w	r8,r7[0x4]
8000445c:	4a 19       	lddpc	r9,800044e0 <vTaskIncrementTick+0xf0>
8000445e:	72 09       	ld.w	r9,r9[0x0]
80004460:	12 38       	cp.w	r8,r9
80004462:	e0 88 00 14 	brls	8000448a <vTaskIncrementTick+0x9a>
80004466:	c0 e8       	rjmp	80004482 <vTaskIncrementTick+0x92>
80004468:	3f f9       	mov	r9,-1
8000446a:	4a 28       	lddpc	r8,800044f0 <vTaskIncrementTick+0x100>
8000446c:	91 09       	st.w	r8[0x0],r9
8000446e:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80004472:	6a 08       	ld.w	r8,r5[0x0]
80004474:	70 38       	ld.w	r8,r8[0xc]
80004476:	70 37       	ld.w	r7,r8[0xc]
80004478:	6e 18       	ld.w	r8,r7[0x4]
8000447a:	64 09       	ld.w	r9,r2[0x0]
8000447c:	12 38       	cp.w	r8,r9
8000447e:	e0 88 00 0b 	brls	80004494 <vTaskIncrementTick+0xa4>
80004482:	49 c9       	lddpc	r9,800044f0 <vTaskIncrementTick+0x100>
80004484:	93 08       	st.w	r9[0x0],r8
80004486:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8000448a:	49 b4       	lddpc	r4,800044f4 <vTaskIncrementTick+0x104>
8000448c:	08 91       	mov	r1,r4
8000448e:	49 b3       	lddpc	r3,800044f8 <vTaskIncrementTick+0x108>
80004490:	49 55       	lddpc	r5,800044e4 <vTaskIncrementTick+0xf4>
80004492:	49 42       	lddpc	r2,800044e0 <vTaskIncrementTick+0xf0>
80004494:	ee c6 ff fc 	sub	r6,r7,-4
80004498:	0c 9c       	mov	r12,r6
8000449a:	f0 1f 00 19 	mcall	800044fc <vTaskIncrementTick+0x10c>
8000449e:	6e a8       	ld.w	r8,r7[0x28]
800044a0:	58 08       	cp.w	r8,0
800044a2:	c0 50       	breq	800044ac <vTaskIncrementTick+0xbc>
800044a4:	ee cc ff e8 	sub	r12,r7,-24
800044a8:	f0 1f 00 15 	mcall	800044fc <vTaskIncrementTick+0x10c>
800044ac:	6e bc       	ld.w	r12,r7[0x2c]
800044ae:	68 08       	ld.w	r8,r4[0x0]
800044b0:	10 3c       	cp.w	r12,r8
800044b2:	e3 fc ba 00 	st.whi	r1[0x0],r12
800044b6:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
800044ba:	0c 9b       	mov	r11,r6
800044bc:	e6 0c 00 2c 	add	r12,r3,r12<<0x2
800044c0:	f0 1f 00 10 	mcall	80004500 <vTaskIncrementTick+0x110>
800044c4:	6a 08       	ld.w	r8,r5[0x0]
800044c6:	70 08       	ld.w	r8,r8[0x0]
800044c8:	58 08       	cp.w	r8,0
800044ca:	cd 41       	brne	80004472 <vTaskIncrementTick+0x82>
800044cc:	cc eb       	rjmp	80004468 <vTaskIncrementTick+0x78>
	}
	else
	{
		++uxMissedTicks;
800044ce:	48 e8       	lddpc	r8,80004504 <vTaskIncrementTick+0x114>
800044d0:	70 09       	ld.w	r9,r8[0x0]
800044d2:	2f f9       	sub	r9,-1
800044d4:	91 09       	st.w	r8[0x0],r9
800044d6:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800044da:	00 00       	add	r0,r0
800044dc:	00 00       	add	r0,r0
800044de:	09 9c       	ld.ub	r12,r4[0x1]
800044e0:	00 00       	add	r0,r0
800044e2:	09 98       	ld.ub	r8,r4[0x1]
800044e4:	00 00       	add	r0,r0
800044e6:	08 a4       	st.w	r4++,r4
800044e8:	00 00       	add	r0,r0
800044ea:	08 b4       	st.h	r4++,r4
800044ec:	00 00       	add	r0,r0
800044ee:	08 b0       	st.h	r4++,r0
800044f0:	00 00       	add	r0,r0
800044f2:	00 ec       	st.h	--r0,r12
800044f4:	00 00       	add	r0,r0
800044f6:	09 d4       	ld.ub	r4,r4[0x5]
800044f8:	00 00       	add	r0,r0
800044fa:	08 b8       	st.h	r4++,r8
800044fc:	80 00       	ld.sh	r0,r0[0x0]
800044fe:	40 7a       	lddsp	r10,sp[0x1c]
80004500:	80 00       	ld.sh	r0,r0[0x0]
80004502:	40 2a       	lddsp	r10,sp[0x8]
80004504:	00 00       	add	r0,r0
80004506:	08 9c       	mov	r12,r4

80004508 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
80004508:	d4 31       	pushm	r0-r7,lr
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
8000450a:	f0 1f 00 2c 	mcall	800045b8 <xTaskResumeAll+0xb0>
	{
		--uxSchedulerSuspended;
8000450e:	4a c8       	lddpc	r8,800045bc <xTaskResumeAll+0xb4>
80004510:	70 09       	ld.w	r9,r8[0x0]
80004512:	20 19       	sub	r9,1
80004514:	91 09       	st.w	r8[0x0],r9

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80004516:	70 08       	ld.w	r8,r8[0x0]
80004518:	58 08       	cp.w	r8,0
8000451a:	c4 a1       	brne	800045ae <xTaskResumeAll+0xa6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
8000451c:	4a 98       	lddpc	r8,800045c0 <xTaskResumeAll+0xb8>
8000451e:	70 08       	ld.w	r8,r8[0x0]
80004520:	58 08       	cp.w	r8,0
80004522:	c4 60       	breq	800045ae <xTaskResumeAll+0xa6>
80004524:	30 04       	mov	r4,0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80004526:	4a 85       	lddpc	r5,800045c4 <xTaskResumeAll+0xbc>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
80004528:	4a 83       	lddpc	r3,800045c8 <xTaskResumeAll+0xc0>
8000452a:	06 90       	mov	r0,r3
8000452c:	4a 82       	lddpc	r2,800045cc <xTaskResumeAll+0xc4>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
8000452e:	4a 91       	lddpc	r1,800045d0 <xTaskResumeAll+0xc8>
80004530:	c1 e8       	rjmp	8000456c <xTaskResumeAll+0x64>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
80004532:	6a 38       	ld.w	r8,r5[0xc]
80004534:	70 37       	ld.w	r7,r8[0xc]
					vListRemove( &( pxTCB->xEventListItem ) );
80004536:	ee cc ff e8 	sub	r12,r7,-24
8000453a:	f0 1f 00 27 	mcall	800045d4 <xTaskResumeAll+0xcc>
					vListRemove( &( pxTCB->xGenericListItem ) );
8000453e:	ee c6 ff fc 	sub	r6,r7,-4
80004542:	0c 9c       	mov	r12,r6
80004544:	f0 1f 00 24 	mcall	800045d4 <xTaskResumeAll+0xcc>
					prvAddTaskToReadyQueue( pxTCB );
80004548:	6e bc       	ld.w	r12,r7[0x2c]
8000454a:	66 08       	ld.w	r8,r3[0x0]
8000454c:	10 3c       	cp.w	r12,r8
8000454e:	e1 fc ba 00 	st.whi	r0[0x0],r12
80004552:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80004556:	0c 9b       	mov	r11,r6
80004558:	e4 0c 00 2c 	add	r12,r2,r12<<0x2
8000455c:	f0 1f 00 1f 	mcall	800045d8 <xTaskResumeAll+0xd0>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80004560:	62 08       	ld.w	r8,r1[0x0]
80004562:	6e b9       	ld.w	r9,r7[0x2c]
80004564:	70 b8       	ld.w	r8,r8[0x2c]
80004566:	10 39       	cp.w	r9,r8
80004568:	f9 b4 02 01 	movhs	r4,1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
8000456c:	6a 08       	ld.w	r8,r5[0x0]
8000456e:	58 08       	cp.w	r8,0
80004570:	ce 11       	brne	80004532 <xTaskResumeAll+0x2a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80004572:	49 b8       	lddpc	r8,800045dc <xTaskResumeAll+0xd4>
80004574:	70 08       	ld.w	r8,r8[0x0]
80004576:	58 08       	cp.w	r8,0
80004578:	c0 f0       	breq	80004596 <xTaskResumeAll+0x8e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
8000457a:	49 98       	lddpc	r8,800045dc <xTaskResumeAll+0xd4>
8000457c:	70 08       	ld.w	r8,r8[0x0]
8000457e:	58 08       	cp.w	r8,0
80004580:	c1 10       	breq	800045a2 <xTaskResumeAll+0x9a>
					{
						vTaskIncrementTick();
						--uxMissedTicks;
80004582:	49 77       	lddpc	r7,800045dc <xTaskResumeAll+0xd4>
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
80004584:	f0 1f 00 17 	mcall	800045e0 <xTaskResumeAll+0xd8>
						--uxMissedTicks;
80004588:	6e 08       	ld.w	r8,r7[0x0]
8000458a:	20 18       	sub	r8,1
8000458c:	8f 08       	st.w	r7[0x0],r8
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
8000458e:	6e 08       	ld.w	r8,r7[0x0]
80004590:	58 08       	cp.w	r8,0
80004592:	cf 91       	brne	80004584 <xTaskResumeAll+0x7c>
80004594:	c0 78       	rjmp	800045a2 <xTaskResumeAll+0x9a>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
80004596:	58 14       	cp.w	r4,1
80004598:	c0 50       	breq	800045a2 <xTaskResumeAll+0x9a>
8000459a:	49 38       	lddpc	r8,800045e4 <xTaskResumeAll+0xdc>
8000459c:	70 08       	ld.w	r8,r8[0x0]
8000459e:	58 18       	cp.w	r8,1
800045a0:	c0 71       	brne	800045ae <xTaskResumeAll+0xa6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
800045a2:	30 09       	mov	r9,0
800045a4:	49 08       	lddpc	r8,800045e4 <xTaskResumeAll+0xdc>
800045a6:	91 09       	st.w	r8[0x0],r9
					portYIELD_WITHIN_API();
800045a8:	d7 33       	scall
800045aa:	30 17       	mov	r7,1
800045ac:	c0 28       	rjmp	800045b0 <xTaskResumeAll+0xa8>
800045ae:	30 07       	mov	r7,0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
800045b0:	f0 1f 00 0e 	mcall	800045e8 <xTaskResumeAll+0xe0>

	return xAlreadyYielded;
}
800045b4:	0e 9c       	mov	r12,r7
800045b6:	d8 32       	popm	r0-r7,pc
800045b8:	80 00       	ld.sh	r0,r0[0x0]
800045ba:	41 34       	lddsp	r4,sp[0x4c]
800045bc:	00 00       	add	r0,r0
800045be:	09 9c       	ld.ub	r12,r4[0x1]
800045c0:	00 00       	add	r0,r0
800045c2:	09 b8       	ld.ub	r8,r4[0x3]
800045c4:	00 00       	add	r0,r0
800045c6:	09 70       	ld.ub	r0,--r4
800045c8:	00 00       	add	r0,r0
800045ca:	09 d4       	ld.ub	r4,r4[0x5]
800045cc:	00 00       	add	r0,r0
800045ce:	08 b8       	st.h	r4++,r8
800045d0:	00 00       	add	r0,r0
800045d2:	09 6c       	ld.uh	r12,--r4
800045d4:	80 00       	ld.sh	r0,r0[0x0]
800045d6:	40 7a       	lddsp	r10,sp[0x1c]
800045d8:	80 00       	ld.sh	r0,r0[0x0]
800045da:	40 2a       	lddsp	r10,sp[0x8]
800045dc:	00 00       	add	r0,r0
800045de:	08 9c       	mov	r12,r4
800045e0:	80 00       	ld.sh	r0,r0[0x0]
800045e2:	43 f0       	lddsp	r0,sp[0xfc]
800045e4:	00 00       	add	r0,r0
800045e6:	09 bc       	ld.ub	r12,r4[0x3]
800045e8:	80 00       	ld.sh	r0,r0[0x0]
800045ea:	42 40       	lddsp	r0,sp[0x90]

800045ec <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
800045ec:	eb cd 40 80 	pushm	r7,lr
800045f0:	18 97       	mov	r7,r12
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
800045f2:	49 08       	lddpc	r8,80004630 <prvAddCurrentTaskToDelayedList+0x44>
800045f4:	70 08       	ld.w	r8,r8[0x0]
800045f6:	91 1c       	st.w	r8[0x4],r12

	if( xTimeToWake < xTickCount )
800045f8:	48 f8       	lddpc	r8,80004634 <prvAddCurrentTaskToDelayedList+0x48>
800045fa:	70 08       	ld.w	r8,r8[0x0]
800045fc:	10 3c       	cp.w	r12,r8
800045fe:	c0 a2       	brcc	80004612 <prvAddCurrentTaskToDelayedList+0x26>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80004600:	48 c8       	lddpc	r8,80004630 <prvAddCurrentTaskToDelayedList+0x44>
80004602:	70 0b       	ld.w	r11,r8[0x0]
80004604:	48 d8       	lddpc	r8,80004638 <prvAddCurrentTaskToDelayedList+0x4c>
80004606:	70 0c       	ld.w	r12,r8[0x0]
80004608:	2f cb       	sub	r11,-4
8000460a:	f0 1f 00 0d 	mcall	8000463c <prvAddCurrentTaskToDelayedList+0x50>
8000460e:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80004612:	48 88       	lddpc	r8,80004630 <prvAddCurrentTaskToDelayedList+0x44>
80004614:	70 0b       	ld.w	r11,r8[0x0]
80004616:	48 b8       	lddpc	r8,80004640 <prvAddCurrentTaskToDelayedList+0x54>
80004618:	70 0c       	ld.w	r12,r8[0x0]
8000461a:	2f cb       	sub	r11,-4
8000461c:	f0 1f 00 08 	mcall	8000463c <prvAddCurrentTaskToDelayedList+0x50>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
80004620:	48 98       	lddpc	r8,80004644 <prvAddCurrentTaskToDelayedList+0x58>
80004622:	70 08       	ld.w	r8,r8[0x0]
80004624:	10 37       	cp.w	r7,r8
80004626:	c0 32       	brcc	8000462c <prvAddCurrentTaskToDelayedList+0x40>
		{
			xNextTaskUnblockTime = xTimeToWake;
80004628:	48 78       	lddpc	r8,80004644 <prvAddCurrentTaskToDelayedList+0x58>
8000462a:	91 07       	st.w	r8[0x0],r7
8000462c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004630:	00 00       	add	r0,r0
80004632:	09 6c       	ld.uh	r12,--r4
80004634:	00 00       	add	r0,r0
80004636:	09 98       	ld.ub	r8,r4[0x1]
80004638:	00 00       	add	r0,r0
8000463a:	08 b4       	st.h	r4++,r4
8000463c:	80 00       	ld.sh	r0,r0[0x0]
8000463e:	40 46       	lddsp	r6,sp[0x10]
80004640:	00 00       	add	r0,r0
80004642:	08 a4       	st.w	r4++,r4
80004644:	00 00       	add	r0,r0
80004646:	00 ec       	st.h	--r0,r12

80004648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
80004648:	eb cd 40 c0 	pushm	r6-r7,lr
8000464c:	18 97       	mov	r7,r12
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
8000464e:	58 0c       	cp.w	r12,0
80004650:	c1 10       	breq	80004672 <vTaskDelay+0x2a>
		{
			vTaskSuspendAll();
80004652:	f0 1f 00 0a 	mcall	80004678 <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80004656:	48 a8       	lddpc	r8,8000467c <vTaskDelay+0x34>
80004658:	70 06       	ld.w	r6,r8[0x0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
8000465a:	48 a8       	lddpc	r8,80004680 <vTaskDelay+0x38>
8000465c:	70 0c       	ld.w	r12,r8[0x0]
8000465e:	2f cc       	sub	r12,-4
80004660:	f0 1f 00 09 	mcall	80004684 <vTaskDelay+0x3c>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80004664:	ee 06 00 0c 	add	r12,r7,r6
80004668:	f0 1f 00 08 	mcall	80004688 <vTaskDelay+0x40>
			}
			xAlreadyYielded = xTaskResumeAll();
8000466c:	f0 1f 00 08 	mcall	8000468c <vTaskDelay+0x44>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
80004670:	c0 21       	brne	80004674 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
80004672:	d7 33       	scall
80004674:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004678:	80 00       	ld.sh	r0,r0[0x0]
8000467a:	43 64       	lddsp	r4,sp[0xd8]
8000467c:	00 00       	add	r0,r0
8000467e:	09 98       	ld.ub	r8,r4[0x1]
80004680:	00 00       	add	r0,r0
80004682:	09 6c       	ld.uh	r12,--r4
80004684:	80 00       	ld.sh	r0,r0[0x0]
80004686:	40 7a       	lddsp	r10,sp[0x1c]
80004688:	80 00       	ld.sh	r0,r0[0x0]
8000468a:	45 ec       	lddsp	r12,sp[0x178]
8000468c:	80 00       	ld.sh	r0,r0[0x0]
8000468e:	45 08       	lddsp	r8,sp[0x140]

80004690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80004690:	eb cd 40 f8 	pushm	r3-r7,lr
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
80004694:	49 57       	lddpc	r7,800046e8 <prvIdleTask+0x58>
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80004696:	49 64       	lddpc	r4,800046ec <prvIdleTask+0x5c>

				taskENTER_CRITICAL();
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					--uxCurrentNumberOfTasks;
80004698:	49 63       	lddpc	r3,800046f0 <prvIdleTask+0x60>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
8000469a:	49 75       	lddpc	r5,800046f4 <prvIdleTask+0x64>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
8000469c:	6e 08       	ld.w	r8,r7[0x0]
8000469e:	58 08       	cp.w	r8,0
800046a0:	c1 e0       	breq	800046dc <prvIdleTask+0x4c>
		{
			vTaskSuspendAll();
800046a2:	f0 1f 00 16 	mcall	800046f8 <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800046a6:	68 06       	ld.w	r6,r4[0x0]
			xTaskResumeAll();
800046a8:	f0 1f 00 15 	mcall	800046fc <prvIdleTask+0x6c>

			if( xListIsEmpty == pdFALSE )
800046ac:	58 06       	cp.w	r6,0
800046ae:	c1 70       	breq	800046dc <prvIdleTask+0x4c>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
800046b0:	f0 1f 00 14 	mcall	80004700 <prvIdleTask+0x70>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
800046b4:	68 38       	ld.w	r8,r4[0xc]
800046b6:	70 36       	ld.w	r6,r8[0xc]
					vListRemove( &( pxTCB->xGenericListItem ) );
800046b8:	ec cc ff fc 	sub	r12,r6,-4
800046bc:	f0 1f 00 12 	mcall	80004704 <prvIdleTask+0x74>
					--uxCurrentNumberOfTasks;
800046c0:	66 08       	ld.w	r8,r3[0x0]
800046c2:	20 18       	sub	r8,1
800046c4:	87 08       	st.w	r3[0x0],r8
					--uxTasksDeleted;
800046c6:	6e 08       	ld.w	r8,r7[0x0]
800046c8:	20 18       	sub	r8,1
800046ca:	8f 08       	st.w	r7[0x0],r8
				}
				taskEXIT_CRITICAL();
800046cc:	f0 1f 00 0f 	mcall	80004708 <prvIdleTask+0x78>

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
800046d0:	6c cc       	ld.w	r12,r6[0x30]
800046d2:	f0 1f 00 0f 	mcall	8000470c <prvIdleTask+0x7c>
		vPortFree( pxTCB );
800046d6:	0c 9c       	mov	r12,r6
800046d8:	f0 1f 00 0d 	mcall	8000470c <prvIdleTask+0x7c>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
800046dc:	6a 08       	ld.w	r8,r5[0x0]
800046de:	58 18       	cp.w	r8,1
800046e0:	fe 98 ff de 	brls	8000469c <prvIdleTask+0xc>
			{
				taskYIELD();
800046e4:	d7 33       	scall
800046e6:	cd bb       	rjmp	8000469c <prvIdleTask+0xc>
800046e8:	00 00       	add	r0,r0
800046ea:	08 ac       	st.w	r4++,r12
800046ec:	00 00       	add	r0,r0
800046ee:	09 58       	ld.sh	r8,--r4
800046f0:	00 00       	add	r0,r0
800046f2:	09 b8       	ld.ub	r8,r4[0x3]
800046f4:	00 00       	add	r0,r0
800046f6:	08 b8       	st.h	r4++,r8
800046f8:	80 00       	ld.sh	r0,r0[0x0]
800046fa:	43 64       	lddsp	r4,sp[0xd8]
800046fc:	80 00       	ld.sh	r0,r0[0x0]
800046fe:	45 08       	lddsp	r8,sp[0x140]
80004700:	80 00       	ld.sh	r0,r0[0x0]
80004702:	41 34       	lddsp	r4,sp[0x4c]
80004704:	80 00       	ld.sh	r0,r0[0x0]
80004706:	40 7a       	lddsp	r10,sp[0x1c]
80004708:	80 00       	ld.sh	r0,r0[0x0]
8000470a:	42 40       	lddsp	r0,sp[0x90]
8000470c:	80 00       	ld.sh	r0,r0[0x0]
8000470e:	43 14       	lddsp	r4,sp[0xc4]

80004710 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
80004710:	d4 31       	pushm	r0-r7,lr
80004712:	20 1d       	sub	sp,4
80004714:	fa c4 ff d8 	sub	r4,sp,-40
80004718:	50 0c       	stdsp	sp[0x0],r12
8000471a:	16 91       	mov	r1,r11
8000471c:	14 97       	mov	r7,r10
8000471e:	12 90       	mov	r0,r9
80004720:	10 93       	mov	r3,r8
80004722:	68 02       	ld.w	r2,r4[0x0]
80004724:	68 16       	ld.w	r6,r4[0x4]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
80004726:	34 4c       	mov	r12,68
80004728:	f0 1f 00 5b 	mcall	80004894 <xTaskGenericCreate+0x184>
8000472c:	18 95       	mov	r5,r12

	if( pxNewTCB != NULL )
8000472e:	c0 31       	brne	80004734 <xTaskGenericCreate+0x24>
80004730:	3f fc       	mov	r12,-1
80004732:	ca d8       	rjmp	8000488c <xTaskGenericCreate+0x17c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
80004734:	58 06       	cp.w	r6,0
80004736:	e0 81 00 ad 	brne	80004890 <xTaskGenericCreate+0x180>
8000473a:	0e 9c       	mov	r12,r7
8000473c:	5c 7c       	castu.h	r12
8000473e:	a3 6c       	lsl	r12,0x2
80004740:	f0 1f 00 55 	mcall	80004894 <xTaskGenericCreate+0x184>
80004744:	18 96       	mov	r6,r12
80004746:	8b cc       	st.w	r5[0x30],r12

		if( pxNewTCB->pxStack == NULL )
80004748:	c0 61       	brne	80004754 <xTaskGenericCreate+0x44>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
8000474a:	0a 9c       	mov	r12,r5
8000474c:	f0 1f 00 53 	mcall	80004898 <xTaskGenericCreate+0x188>
80004750:	3f fc       	mov	r12,-1
80004752:	c9 d8       	rjmp	8000488c <xTaskGenericCreate+0x17c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
80004754:	5c 77       	castu.h	r7
80004756:	ee 0a 15 02 	lsl	r10,r7,0x2
8000475a:	e0 6b 00 a5 	mov	r11,165
8000475e:	0c 9c       	mov	r12,r6
80004760:	f0 1f 00 4f 	mcall	8000489c <xTaskGenericCreate+0x18c>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
80004764:	ee c6 00 01 	sub	r6,r7,1
80004768:	6a c8       	ld.w	r8,r5[0x30]
8000476a:	f0 06 00 26 	add	r6,r8,r6<<0x2
8000476e:	e0 16 ff fc 	andl	r6,0xfffc
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
80004772:	31 0a       	mov	r10,16
80004774:	02 9b       	mov	r11,r1
80004776:	ea cc ff cc 	sub	r12,r5,-52
8000477a:	f0 1f 00 4a 	mcall	800048a0 <xTaskGenericCreate+0x190>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
8000477e:	30 08       	mov	r8,0
80004780:	eb 68 00 43 	st.b	r5[67],r8
80004784:	58 73       	cp.w	r3,7
80004786:	e6 07 17 80 	movls	r7,r3
8000478a:	f9 b7 0b 07 	movhi	r7,7
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
8000478e:	8b b7       	st.w	r5[0x2c],r7
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80004790:	ea c4 ff fc 	sub	r4,r5,-4
80004794:	08 9c       	mov	r12,r4
80004796:	f0 1f 00 44 	mcall	800048a4 <xTaskGenericCreate+0x194>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
8000479a:	ea cc ff e8 	sub	r12,r5,-24
8000479e:	f0 1f 00 42 	mcall	800048a4 <xTaskGenericCreate+0x194>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
800047a2:	8b 45       	st.w	r5[0x10],r5

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
800047a4:	ee 07 11 08 	rsub	r7,r7,8
800047a8:	8b 67       	st.w	r5[0x18],r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
800047aa:	8b 95       	st.w	r5[0x24],r5
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
800047ac:	00 9a       	mov	r10,r0
800047ae:	40 0b       	lddsp	r11,sp[0x0]
800047b0:	0c 9c       	mov	r12,r6
800047b2:	f0 1f 00 3e 	mcall	800048a8 <xTaskGenericCreate+0x198>
800047b6:	8b 0c       	st.w	r5[0x0],r12
		if( ( void * ) pxCreatedTask != NULL )
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
800047b8:	58 02       	cp.w	r2,0
800047ba:	e5 f5 1a 00 	st.wne	r2[0x0],r5
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
800047be:	f0 1f 00 3c 	mcall	800048ac <xTaskGenericCreate+0x19c>
		{
			uxCurrentNumberOfTasks++;
800047c2:	4b c8       	lddpc	r8,800048b0 <xTaskGenericCreate+0x1a0>
800047c4:	70 09       	ld.w	r9,r8[0x0]
800047c6:	2f f9       	sub	r9,-1
800047c8:	91 09       	st.w	r8[0x0],r9
			if( pxCurrentTCB == NULL )
800047ca:	4b b8       	lddpc	r8,800048b4 <xTaskGenericCreate+0x1a4>
800047cc:	70 08       	ld.w	r8,r8[0x0]
800047ce:	58 08       	cp.w	r8,0
800047d0:	c2 61       	brne	8000481c <xTaskGenericCreate+0x10c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
800047d2:	4b 98       	lddpc	r8,800048b4 <xTaskGenericCreate+0x1a4>
800047d4:	91 05       	st.w	r8[0x0],r5

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
800047d6:	4b 78       	lddpc	r8,800048b0 <xTaskGenericCreate+0x1a0>
800047d8:	70 08       	ld.w	r8,r8[0x0]
800047da:	58 18       	cp.w	r8,1
800047dc:	c2 b1       	brne	80004832 <xTaskGenericCreate+0x122>
800047de:	4b 77       	lddpc	r7,800048b8 <xTaskGenericCreate+0x1a8>

/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
800047e0:	ee c6 ff 60 	sub	r6,r7,-160
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
800047e4:	0e 9c       	mov	r12,r7
800047e6:	f0 1f 00 36 	mcall	800048bc <xTaskGenericCreate+0x1ac>
800047ea:	2e c7       	sub	r7,-20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
800047ec:	0c 37       	cp.w	r7,r6
800047ee:	cf b1       	brne	800047e4 <xTaskGenericCreate+0xd4>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
800047f0:	4b 47       	lddpc	r7,800048c0 <xTaskGenericCreate+0x1b0>
800047f2:	0e 9c       	mov	r12,r7
800047f4:	f0 1f 00 32 	mcall	800048bc <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
800047f8:	4b 36       	lddpc	r6,800048c4 <xTaskGenericCreate+0x1b4>
800047fa:	0c 9c       	mov	r12,r6
800047fc:	f0 1f 00 30 	mcall	800048bc <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xPendingReadyList );
80004800:	4b 2c       	lddpc	r12,800048c8 <xTaskGenericCreate+0x1b8>
80004802:	f0 1f 00 2f 	mcall	800048bc <xTaskGenericCreate+0x1ac>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
80004806:	4b 2c       	lddpc	r12,800048cc <xTaskGenericCreate+0x1bc>
80004808:	f0 1f 00 2d 	mcall	800048bc <xTaskGenericCreate+0x1ac>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
8000480c:	4b 1c       	lddpc	r12,800048d0 <xTaskGenericCreate+0x1c0>
8000480e:	f0 1f 00 2c 	mcall	800048bc <xTaskGenericCreate+0x1ac>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80004812:	4b 18       	lddpc	r8,800048d4 <xTaskGenericCreate+0x1c4>
80004814:	91 07       	st.w	r8[0x0],r7
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80004816:	4b 18       	lddpc	r8,800048d8 <xTaskGenericCreate+0x1c8>
80004818:	91 06       	st.w	r8[0x0],r6
8000481a:	c0 c8       	rjmp	80004832 <xTaskGenericCreate+0x122>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
8000481c:	4b 08       	lddpc	r8,800048dc <xTaskGenericCreate+0x1cc>
8000481e:	70 08       	ld.w	r8,r8[0x0]
80004820:	58 08       	cp.w	r8,0
80004822:	c0 81       	brne	80004832 <xTaskGenericCreate+0x122>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80004824:	4a 48       	lddpc	r8,800048b4 <xTaskGenericCreate+0x1a4>
80004826:	70 08       	ld.w	r8,r8[0x0]
80004828:	70 b8       	ld.w	r8,r8[0x2c]
8000482a:	10 33       	cp.w	r3,r8
8000482c:	c0 33       	brcs	80004832 <xTaskGenericCreate+0x122>
					{
						pxCurrentTCB = pxNewTCB;
8000482e:	4a 28       	lddpc	r8,800048b4 <xTaskGenericCreate+0x1a4>
80004830:	91 05       	st.w	r8[0x0],r5
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
80004832:	6a b8       	ld.w	r8,r5[0x2c]
80004834:	4a b9       	lddpc	r9,800048e0 <xTaskGenericCreate+0x1d0>
80004836:	72 09       	ld.w	r9,r9[0x0]
80004838:	12 38       	cp.w	r8,r9
8000483a:	e0 88 00 04 	brls	80004842 <xTaskGenericCreate+0x132>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
8000483e:	4a 99       	lddpc	r9,800048e0 <xTaskGenericCreate+0x1d0>
80004840:	93 08       	st.w	r9[0x0],r8
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
80004842:	4a 98       	lddpc	r8,800048e4 <xTaskGenericCreate+0x1d4>
80004844:	70 09       	ld.w	r9,r8[0x0]
80004846:	2f f9       	sub	r9,-1
80004848:	91 09       	st.w	r8[0x0],r9

			prvAddTaskToReadyQueue( pxNewTCB );
8000484a:	6a b8       	ld.w	r8,r5[0x2c]
8000484c:	4a 79       	lddpc	r9,800048e8 <xTaskGenericCreate+0x1d8>
8000484e:	72 09       	ld.w	r9,r9[0x0]
80004850:	12 38       	cp.w	r8,r9
80004852:	e0 88 00 04 	brls	8000485a <xTaskGenericCreate+0x14a>
80004856:	4a 59       	lddpc	r9,800048e8 <xTaskGenericCreate+0x1d8>
80004858:	93 08       	st.w	r9[0x0],r8
8000485a:	6a bc       	ld.w	r12,r5[0x2c]
8000485c:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80004860:	08 9b       	mov	r11,r4
80004862:	49 68       	lddpc	r8,800048b8 <xTaskGenericCreate+0x1a8>
80004864:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80004868:	f0 1f 00 21 	mcall	800048ec <xTaskGenericCreate+0x1dc>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
8000486c:	f0 1f 00 21 	mcall	800048f0 <xTaskGenericCreate+0x1e0>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
80004870:	49 b8       	lddpc	r8,800048dc <xTaskGenericCreate+0x1cc>
80004872:	70 08       	ld.w	r8,r8[0x0]
80004874:	58 08       	cp.w	r8,0
80004876:	c0 a0       	breq	8000488a <xTaskGenericCreate+0x17a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
80004878:	48 f8       	lddpc	r8,800048b4 <xTaskGenericCreate+0x1a4>
8000487a:	70 08       	ld.w	r8,r8[0x0]
8000487c:	70 b8       	ld.w	r8,r8[0x2c]
8000487e:	10 33       	cp.w	r3,r8
80004880:	e0 88 00 05 	brls	8000488a <xTaskGenericCreate+0x17a>
			{
				portYIELD_WITHIN_API();
80004884:	d7 33       	scall
80004886:	30 1c       	mov	r12,1
80004888:	c0 28       	rjmp	8000488c <xTaskGenericCreate+0x17c>
8000488a:	30 1c       	mov	r12,1
			}
		}
	}

	return xReturn;
}
8000488c:	2f fd       	sub	sp,-4
8000488e:	d8 32       	popm	r0-r7,pc
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
80004890:	99 c6       	st.w	r12[0x30],r6
80004892:	c6 1b       	rjmp	80004754 <xTaskGenericCreate+0x44>
80004894:	80 00       	ld.sh	r0,r0[0x0]
80004896:	43 3c       	lddsp	r12,sp[0xcc]
80004898:	80 00       	ld.sh	r0,r0[0x0]
8000489a:	43 14       	lddsp	r4,sp[0xc4]
8000489c:	80 00       	ld.sh	r0,r0[0x0]
8000489e:	4f 80       	lddpc	r0,80004a7c <main+0x44>
800048a0:	80 00       	ld.sh	r0,r0[0x0]
800048a2:	50 d0       	stdsp	sp[0x34],r0
800048a4:	80 00       	ld.sh	r0,r0[0x0]
800048a6:	40 24       	lddsp	r4,sp[0x8]
800048a8:	80 00       	ld.sh	r0,r0[0x0]
800048aa:	40 a0       	lddsp	r0,sp[0x28]
800048ac:	80 00       	ld.sh	r0,r0[0x0]
800048ae:	41 34       	lddsp	r4,sp[0x4c]
800048b0:	00 00       	add	r0,r0
800048b2:	09 b8       	ld.ub	r8,r4[0x3]
800048b4:	00 00       	add	r0,r0
800048b6:	09 6c       	ld.uh	r12,--r4
800048b8:	00 00       	add	r0,r0
800048ba:	08 b8       	st.h	r4++,r8
800048bc:	80 00       	ld.sh	r0,r0[0x0]
800048be:	40 10       	lddsp	r0,sp[0x4]
800048c0:	00 00       	add	r0,r0
800048c2:	09 84       	ld.ub	r4,r4[0x0]
800048c4:	00 00       	add	r0,r0
800048c6:	09 a0       	ld.ub	r0,r4[0x2]
800048c8:	00 00       	add	r0,r0
800048ca:	09 70       	ld.ub	r0,--r4
800048cc:	00 00       	add	r0,r0
800048ce:	09 58       	ld.sh	r8,--r4
800048d0:	00 00       	add	r0,r0
800048d2:	09 c0       	ld.ub	r0,r4[0x4]
800048d4:	00 00       	add	r0,r0
800048d6:	08 a4       	st.w	r4++,r4
800048d8:	00 00       	add	r0,r0
800048da:	08 b4       	st.h	r4++,r4
800048dc:	00 00       	add	r0,r0
800048de:	08 a8       	st.w	r4++,r8
800048e0:	00 00       	add	r0,r0
800048e2:	08 a0       	st.w	r4++,r0
800048e4:	00 00       	add	r0,r0
800048e6:	09 b4       	ld.ub	r4,r4[0x3]
800048e8:	00 00       	add	r0,r0
800048ea:	09 d4       	ld.ub	r4,r4[0x5]
800048ec:	80 00       	ld.sh	r0,r0[0x0]
800048ee:	40 2a       	lddsp	r10,sp[0x8]
800048f0:	80 00       	ld.sh	r0,r0[0x0]
800048f2:	42 40       	lddsp	r0,sp[0x90]

800048f4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
800048f4:	d4 01       	pushm	lr
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
800048f6:	30 09       	mov	r9,0
800048f8:	1a d9       	st.w	--sp,r9
800048fa:	1a d9       	st.w	--sp,r9
800048fc:	1a d9       	st.w	--sp,r9
800048fe:	12 98       	mov	r8,r9
80004900:	e0 6a 01 00 	mov	r10,256
80004904:	48 9b       	lddpc	r11,80004928 <vTaskStartScheduler+0x34>
80004906:	48 ac       	lddpc	r12,8000492c <vTaskStartScheduler+0x38>
80004908:	f0 1f 00 0a 	mcall	80004930 <vTaskStartScheduler+0x3c>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
8000490c:	2f dd       	sub	sp,-12
8000490e:	58 1c       	cp.w	r12,1
80004910:	c0 a1       	brne	80004924 <vTaskStartScheduler+0x30>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
80004912:	d3 03       	ssrf	0x10

		xSchedulerRunning = pdTRUE;
80004914:	30 19       	mov	r9,1
80004916:	48 88       	lddpc	r8,80004934 <vTaskStartScheduler+0x40>
80004918:	91 09       	st.w	r8[0x0],r9
		xTickCount = ( portTickType ) 0;
8000491a:	30 09       	mov	r9,0
8000491c:	48 78       	lddpc	r8,80004938 <vTaskStartScheduler+0x44>
8000491e:	91 09       	st.w	r8[0x0],r9
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
80004920:	f0 1f 00 07 	mcall	8000493c <vTaskStartScheduler+0x48>
80004924:	d8 02       	popm	pc
80004926:	00 00       	add	r0,r0
80004928:	80 00       	ld.sh	r0,r0[0x0]
8000492a:	5d 08       	ror	r8
8000492c:	80 00       	ld.sh	r0,r0[0x0]
8000492e:	46 90       	lddsp	r0,sp[0x1a4]
80004930:	80 00       	ld.sh	r0,r0[0x0]
80004932:	47 10       	lddsp	r0,sp[0x1c4]
80004934:	00 00       	add	r0,r0
80004936:	08 a8       	st.w	r4++,r8
80004938:	00 00       	add	r0,r0
8000493a:	09 98       	ld.ub	r8,r4[0x1]
8000493c:	80 00       	ld.sh	r0,r0[0x0]
8000493e:	41 44       	lddsp	r4,sp[0x50]

80004940 <vTestC>:
		}
	}
}

static void vTestC(void *pvParameters)
{
80004940:	eb cd 40 e0 	pushm	r5-r7,lr
	const portTickType xDelay = 1 / portTICK_RATE_MS;
	
	while(1)
	{
		if(gpio_pin_is_low(TEST_C)){
80004944:	31 b7       	mov	r7,27
			gpio_set_pin_low(RESPONSE_C);
80004946:	32 06       	mov	r6,32
			
			vTaskDelay(xDelay);
80004948:	30 15       	mov	r5,1
{
	const portTickType xDelay = 1 / portTICK_RATE_MS;
	
	while(1)
	{
		if(gpio_pin_is_low(TEST_C)){
8000494a:	0e 9c       	mov	r12,r7
8000494c:	f0 1f 00 07 	mcall	80004968 <vTestC+0x28>
80004950:	cf d1       	brne	8000494a <vTestC+0xa>
			gpio_set_pin_low(RESPONSE_C);
80004952:	0c 9c       	mov	r12,r6
80004954:	f0 1f 00 06 	mcall	8000496c <vTestC+0x2c>
			
			vTaskDelay(xDelay);
80004958:	0a 9c       	mov	r12,r5
8000495a:	f0 1f 00 06 	mcall	80004970 <vTestC+0x30>
			
			gpio_set_pin_high(RESPONSE_C);
8000495e:	0c 9c       	mov	r12,r6
80004960:	f0 1f 00 05 	mcall	80004974 <vTestC+0x34>
80004964:	cf 3b       	rjmp	8000494a <vTestC+0xa>
80004966:	00 00       	add	r0,r0
80004968:	80 00       	ld.sh	r0,r0[0x0]
8000496a:	21 d4       	sub	r4,29
8000496c:	80 00       	ld.sh	r0,r0[0x0]
8000496e:	22 00       	sub	r0,32
80004970:	80 00       	ld.sh	r0,r0[0x0]
80004972:	46 48       	lddsp	r8,sp[0x190]
80004974:	80 00       	ld.sh	r0,r0[0x0]
80004976:	21 ea       	sub	r10,30

80004978 <vTestB>:
		}
	}
}

static void vTestB(void *pvParameters)
{
80004978:	eb cd 40 e0 	pushm	r5-r7,lr
	const portTickType xDelay = 1 / portTICK_RATE_MS;
	
	while(1)
	{
		if(gpio_pin_is_low(TEST_B)){
8000497c:	31 d7       	mov	r7,29
			gpio_set_pin_low(RESPONSE_B);
8000497e:	31 c6       	mov	r6,28
			
			vTaskDelay(xDelay);
80004980:	30 15       	mov	r5,1
{
	const portTickType xDelay = 1 / portTICK_RATE_MS;
	
	while(1)
	{
		if(gpio_pin_is_low(TEST_B)){
80004982:	0e 9c       	mov	r12,r7
80004984:	f0 1f 00 07 	mcall	800049a0 <vTestB+0x28>
80004988:	cf d1       	brne	80004982 <vTestB+0xa>
			gpio_set_pin_low(RESPONSE_B);
8000498a:	0c 9c       	mov	r12,r6
8000498c:	f0 1f 00 06 	mcall	800049a4 <vTestB+0x2c>
			
			vTaskDelay(xDelay);
80004990:	0a 9c       	mov	r12,r5
80004992:	f0 1f 00 06 	mcall	800049a8 <vTestB+0x30>
			
			gpio_set_pin_high(RESPONSE_B);
80004996:	0c 9c       	mov	r12,r6
80004998:	f0 1f 00 05 	mcall	800049ac <vTestB+0x34>
8000499c:	cf 3b       	rjmp	80004982 <vTestB+0xa>
8000499e:	00 00       	add	r0,r0
800049a0:	80 00       	ld.sh	r0,r0[0x0]
800049a2:	21 d4       	sub	r4,29
800049a4:	80 00       	ld.sh	r0,r0[0x0]
800049a6:	22 00       	sub	r0,32
800049a8:	80 00       	ld.sh	r0,r0[0x0]
800049aa:	46 48       	lddsp	r8,sp[0x190]
800049ac:	80 00       	ld.sh	r0,r0[0x0]
800049ae:	21 ea       	sub	r10,30

800049b0 <vTestA>:
	}
}

// Assignment B:
static void vTestA(void *pvParameters)
{
800049b0:	eb cd 40 e0 	pushm	r5-r7,lr
	const portTickType xDelay = 1 / portTICK_RATE_MS;
	
	while(1)
	{
		if(gpio_pin_is_low(TEST_A)){
800049b4:	31 f7       	mov	r7,31
			gpio_set_pin_low(RESPONSE_A);
800049b6:	31 e6       	mov	r6,30
			
			vTaskDelay(xDelay);
800049b8:	30 15       	mov	r5,1
{
	const portTickType xDelay = 1 / portTICK_RATE_MS;
	
	while(1)
	{
		if(gpio_pin_is_low(TEST_A)){
800049ba:	0e 9c       	mov	r12,r7
800049bc:	f0 1f 00 07 	mcall	800049d8 <vTestA+0x28>
800049c0:	cf d1       	brne	800049ba <vTestA+0xa>
			gpio_set_pin_low(RESPONSE_A);
800049c2:	0c 9c       	mov	r12,r6
800049c4:	f0 1f 00 06 	mcall	800049dc <vTestA+0x2c>
			
			vTaskDelay(xDelay);
800049c8:	0a 9c       	mov	r12,r5
800049ca:	f0 1f 00 06 	mcall	800049e0 <vTestA+0x30>
			
			gpio_set_pin_high(RESPONSE_A);
800049ce:	0c 9c       	mov	r12,r6
800049d0:	f0 1f 00 05 	mcall	800049e4 <vTestA+0x34>
800049d4:	cf 3b       	rjmp	800049ba <vTestA+0xa>
800049d6:	00 00       	add	r0,r0
800049d8:	80 00       	ld.sh	r0,r0[0x0]
800049da:	21 d4       	sub	r4,29
800049dc:	80 00       	ld.sh	r0,r0[0x0]
800049de:	22 00       	sub	r0,32
800049e0:	80 00       	ld.sh	r0,r0[0x0]
800049e2:	46 48       	lddsp	r8,sp[0x190]
800049e4:	80 00       	ld.sh	r0,r0[0x0]
800049e6:	21 ea       	sub	r10,30

800049e8 <init>:
#define RESPONSE_B AVR32_PIN_PA28
#define TEST_C AVR32_PIN_PA27
#define RESPONSE_C AVR32_PIN_PB00

void init()
{
800049e8:	eb cd 40 80 	pushm	r7,lr
	// board init
	board_init();
800049ec:	f0 1f 00 0e 	mcall	80004a24 <init+0x3c>
		.dfll_f       = EXAMPLE_TARGET_DFLL_FREQ_HZ,
		.pextra_params = &gc_dfllif_ref_opt
	};
	pcl_configure_clocks(&pcl_dfll_freq_param);
#else
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
800049f0:	30 3a       	mov	r10,3
800049f2:	e0 6b 1b 00 	mov	r11,6912
800049f6:	ea 1b 00 b7 	orh	r11,0xb7
800049fa:	30 0c       	mov	r12,0
800049fc:	f0 1f 00 0b 	mcall	80004a28 <init+0x40>
#endif	
	
	// stdio init
	stdio_usb_init(&CONFIG_USART_IF);
80004a00:	fe 7c 1c 00 	mov	r12,-58368
80004a04:	f0 1f 00 0a 	mcall	80004a2c <init+0x44>

	// Specify that stdout and stdin should not be buffered.

#if defined(__GNUC__) && defined(__AVR32__)
	setbuf(stdout, NULL);
80004a08:	48 a7       	lddpc	r7,80004a30 <init+0x48>
80004a0a:	6e 08       	ld.w	r8,r7[0x0]
80004a0c:	30 0b       	mov	r11,0
80004a0e:	70 1c       	ld.w	r12,r8[0x4]
80004a10:	f0 1f 00 09 	mcall	80004a34 <init+0x4c>
	setbuf(stdin,  NULL);
80004a14:	6e 08       	ld.w	r8,r7[0x0]
80004a16:	30 0b       	mov	r11,0
80004a18:	70 0c       	ld.w	r12,r8[0x0]
80004a1a:	f0 1f 00 07 	mcall	80004a34 <init+0x4c>
#endif
}
80004a1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a22:	00 00       	add	r0,r0
80004a24:	80 00       	ld.sh	r0,r0[0x0]
80004a26:	20 ec       	sub	r12,14
80004a28:	80 00       	ld.sh	r0,r0[0x0]
80004a2a:	23 8c       	sub	r12,56
80004a2c:	80 00       	ld.sh	r0,r0[0x0]
80004a2e:	3f 38       	mov	r8,-13
80004a30:	00 00       	add	r0,r0
80004a32:	01 e0       	ld.ub	r0,r0[0x6]
80004a34:	80 00       	ld.sh	r0,r0[0x0]
80004a36:	4f b0       	lddpc	r0,80004c20 <_malloc_r+0xd4>

80004a38 <main>:

/*********************************************************************
Functions
*********************************************************************/
int main()
{
80004a38:	eb cd 40 c0 	pushm	r6-r7,lr
	// initialize
	init();
80004a3c:	f0 1f 00 26 	mcall	80004ad4 <main+0x9c>
	
	gpio_configure_pin (TEST_A, GPIO_DIR_INPUT);
80004a40:	30 0b       	mov	r11,0
80004a42:	31 fc       	mov	r12,31
80004a44:	f0 1f 00 25 	mcall	80004ad8 <main+0xa0>
	gpio_configure_pin (TEST_B, GPIO_DIR_INPUT);
80004a48:	30 0b       	mov	r11,0
80004a4a:	31 dc       	mov	r12,29
80004a4c:	f0 1f 00 23 	mcall	80004ad8 <main+0xa0>
	gpio_configure_pin (TEST_C, GPIO_DIR_INPUT);
80004a50:	30 0b       	mov	r11,0
80004a52:	31 bc       	mov	r12,27
80004a54:	f0 1f 00 21 	mcall	80004ad8 <main+0xa0>
	gpio_configure_pin (RESPONSE_A, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004a58:	30 3b       	mov	r11,3
80004a5a:	31 ec       	mov	r12,30
80004a5c:	f0 1f 00 1f 	mcall	80004ad8 <main+0xa0>
	gpio_configure_pin (RESPONSE_B, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004a60:	30 3b       	mov	r11,3
80004a62:	31 cc       	mov	r12,28
80004a64:	f0 1f 00 1d 	mcall	80004ad8 <main+0xa0>
	gpio_configure_pin (RESPONSE_C, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004a68:	30 3b       	mov	r11,3
80004a6a:	32 0c       	mov	r12,32
80004a6c:	f0 1f 00 1b 	mcall	80004ad8 <main+0xa0>
	
	// start code from here
	
	gpio_set_pin_high(RESPONSE_A);
80004a70:	31 ec       	mov	r12,30
80004a72:	f0 1f 00 1b 	mcall	80004adc <main+0xa4>
	gpio_set_pin_high(RESPONSE_B);
80004a76:	31 cc       	mov	r12,28
80004a78:	f0 1f 00 19 	mcall	80004adc <main+0xa4>
	gpio_set_pin_high(RESPONSE_C);
80004a7c:	32 0c       	mov	r12,32
80004a7e:	f0 1f 00 18 	mcall	80004adc <main+0xa4>
	
	// start basic task
	xTaskCreate( vTestA, (signed char * ) "BASIC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
80004a82:	49 86       	lddpc	r6,80004ae0 <main+0xa8>
80004a84:	30 07       	mov	r7,0
80004a86:	1a d7       	st.w	--sp,r7
80004a88:	1a d7       	st.w	--sp,r7
80004a8a:	1a d7       	st.w	--sp,r7
80004a8c:	30 18       	mov	r8,1
80004a8e:	0e 99       	mov	r9,r7
80004a90:	e0 6a 01 00 	mov	r10,256
80004a94:	0c 9b       	mov	r11,r6
80004a96:	49 4c       	lddpc	r12,80004ae4 <main+0xac>
80004a98:	f0 1f 00 14 	mcall	80004ae8 <main+0xb0>
	xTaskCreate( vTestB, (signed char * ) "BASIC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
80004a9c:	1a d7       	st.w	--sp,r7
80004a9e:	1a d7       	st.w	--sp,r7
80004aa0:	1a d7       	st.w	--sp,r7
80004aa2:	30 18       	mov	r8,1
80004aa4:	0e 99       	mov	r9,r7
80004aa6:	e0 6a 01 00 	mov	r10,256
80004aaa:	0c 9b       	mov	r11,r6
80004aac:	49 0c       	lddpc	r12,80004aec <main+0xb4>
80004aae:	f0 1f 00 0f 	mcall	80004ae8 <main+0xb0>
	xTaskCreate( vTestC, (signed char * ) "BASIC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
80004ab2:	1a d7       	st.w	--sp,r7
80004ab4:	1a d7       	st.w	--sp,r7
80004ab6:	1a d7       	st.w	--sp,r7
80004ab8:	30 18       	mov	r8,1
80004aba:	0e 99       	mov	r9,r7
80004abc:	e0 6a 01 00 	mov	r10,256
80004ac0:	0c 9b       	mov	r11,r6
80004ac2:	48 cc       	lddpc	r12,80004af0 <main+0xb8>
80004ac4:	f0 1f 00 09 	mcall	80004ae8 <main+0xb0>

	// Start the scheduler, anything after this will not run.
	vTaskStartScheduler();
80004ac8:	2f 7d       	sub	sp,-36
80004aca:	f0 1f 00 0b 	mcall	80004af4 <main+0xbc>
}
80004ace:	0e 9c       	mov	r12,r7
80004ad0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004ad4:	80 00       	ld.sh	r0,r0[0x0]
80004ad6:	49 e8       	lddpc	r8,80004b4c <_malloc_r>
80004ad8:	80 00       	ld.sh	r0,r0[0x0]
80004ada:	21 1c       	sub	r12,17
80004adc:	80 00       	ld.sh	r0,r0[0x0]
80004ade:	21 ea       	sub	r10,30
80004ae0:	80 00       	ld.sh	r0,r0[0x0]
80004ae2:	5d 10       	icall	r0
80004ae4:	80 00       	ld.sh	r0,r0[0x0]
80004ae6:	49 b0       	lddpc	r0,80004b50 <_malloc_r+0x4>
80004ae8:	80 00       	ld.sh	r0,r0[0x0]
80004aea:	47 10       	lddsp	r0,sp[0x1c4]
80004aec:	80 00       	ld.sh	r0,r0[0x0]
80004aee:	49 78       	lddpc	r8,80004b48 <malloc+0xc>
80004af0:	80 00       	ld.sh	r0,r0[0x0]
80004af2:	49 40       	lddpc	r0,80004b40 <malloc+0x4>
80004af4:	80 00       	ld.sh	r0,r0[0x0]
80004af6:	48 f4       	lddpc	r4,80004b30 <free+0x8>

80004af8 <atexit>:
80004af8:	d4 01       	pushm	lr
80004afa:	30 09       	mov	r9,0
80004afc:	18 9b       	mov	r11,r12
80004afe:	12 9a       	mov	r10,r9
80004b00:	12 9c       	mov	r12,r9
80004b02:	e0 a0 03 37 	rcall	80005170 <__register_exitproc>
80004b06:	d8 02       	popm	pc

80004b08 <exit>:
80004b08:	d4 21       	pushm	r4-r7,lr
80004b0a:	30 0b       	mov	r11,0
80004b0c:	18 97       	mov	r7,r12
80004b0e:	e0 a0 03 85 	rcall	80005218 <__call_exitprocs>
80004b12:	48 58       	lddpc	r8,80004b24 <exit+0x1c>
80004b14:	70 0c       	ld.w	r12,r8[0x0]
80004b16:	78 a8       	ld.w	r8,r12[0x28]
80004b18:	58 08       	cp.w	r8,0
80004b1a:	c0 20       	breq	80004b1e <exit+0x16>
80004b1c:	5d 18       	icall	r8
80004b1e:	0e 9c       	mov	r12,r7
80004b20:	e0 a0 02 ed 	rcall	800050fa <_exit>
80004b24:	80 00       	ld.sh	r0,r0[0x0]
80004b26:	5d 18       	icall	r8

80004b28 <free>:
80004b28:	d4 01       	pushm	lr
80004b2a:	48 48       	lddpc	r8,80004b38 <free+0x10>
80004b2c:	18 9b       	mov	r11,r12
80004b2e:	70 0c       	ld.w	r12,r8[0x0]
80004b30:	e0 a0 05 5a 	rcall	800055e4 <_free_r>
80004b34:	d8 02       	popm	pc
80004b36:	d7 03       	nop
80004b38:	00 00       	add	r0,r0
80004b3a:	01 e0       	ld.ub	r0,r0[0x6]

80004b3c <malloc>:
80004b3c:	d4 01       	pushm	lr
80004b3e:	48 38       	lddpc	r8,80004b48 <malloc+0xc>
80004b40:	18 9b       	mov	r11,r12
80004b42:	70 0c       	ld.w	r12,r8[0x0]
80004b44:	c0 4c       	rcall	80004b4c <_malloc_r>
80004b46:	d8 02       	popm	pc
80004b48:	00 00       	add	r0,r0
80004b4a:	01 e0       	ld.ub	r0,r0[0x6]

80004b4c <_malloc_r>:
80004b4c:	d4 31       	pushm	r0-r7,lr
80004b4e:	f6 c8 ff f5 	sub	r8,r11,-11
80004b52:	18 95       	mov	r5,r12
80004b54:	10 97       	mov	r7,r8
80004b56:	e0 17 ff f8 	andl	r7,0xfff8
80004b5a:	59 68       	cp.w	r8,22
80004b5c:	f9 b7 08 10 	movls	r7,16
80004b60:	16 37       	cp.w	r7,r11
80004b62:	5f 38       	srlo	r8
80004b64:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004b68:	c0 50       	breq	80004b72 <_malloc_r+0x26>
80004b6a:	30 c8       	mov	r8,12
80004b6c:	99 38       	st.w	r12[0xc],r8
80004b6e:	e0 8f 01 ed 	bral	80004f48 <_malloc_r+0x3fc>
80004b72:	fe b0 fb b9 	rcall	800042e4 <__malloc_lock>
80004b76:	e0 47 01 f7 	cp.w	r7,503
80004b7a:	e0 8b 00 1c 	brhi	80004bb2 <_malloc_r+0x66>
80004b7e:	ee 03 16 03 	lsr	r3,r7,0x3
80004b82:	4c c8       	lddpc	r8,80004cb0 <_malloc_r+0x164>
80004b84:	f0 03 00 38 	add	r8,r8,r3<<0x3
80004b88:	70 36       	ld.w	r6,r8[0xc]
80004b8a:	10 36       	cp.w	r6,r8
80004b8c:	c0 61       	brne	80004b98 <_malloc_r+0x4c>
80004b8e:	ec c8 ff f8 	sub	r8,r6,-8
80004b92:	70 36       	ld.w	r6,r8[0xc]
80004b94:	10 36       	cp.w	r6,r8
80004b96:	c0 c0       	breq	80004bae <_malloc_r+0x62>
80004b98:	6c 18       	ld.w	r8,r6[0x4]
80004b9a:	e0 18 ff fc 	andl	r8,0xfffc
80004b9e:	6c 3a       	ld.w	r10,r6[0xc]
80004ba0:	ec 08 00 09 	add	r9,r6,r8
80004ba4:	0a 9c       	mov	r12,r5
80004ba6:	6c 28       	ld.w	r8,r6[0x8]
80004ba8:	95 28       	st.w	r10[0x8],r8
80004baa:	91 3a       	st.w	r8[0xc],r10
80004bac:	c4 68       	rjmp	80004c38 <_malloc_r+0xec>
80004bae:	2f e3       	sub	r3,-2
80004bb0:	c4 c8       	rjmp	80004c48 <_malloc_r+0xfc>
80004bb2:	ee 03 16 09 	lsr	r3,r7,0x9
80004bb6:	c0 41       	brne	80004bbe <_malloc_r+0x72>
80004bb8:	ee 03 16 03 	lsr	r3,r7,0x3
80004bbc:	c2 68       	rjmp	80004c08 <_malloc_r+0xbc>
80004bbe:	58 43       	cp.w	r3,4
80004bc0:	e0 8b 00 06 	brhi	80004bcc <_malloc_r+0x80>
80004bc4:	ee 03 16 06 	lsr	r3,r7,0x6
80004bc8:	2c 83       	sub	r3,-56
80004bca:	c1 f8       	rjmp	80004c08 <_malloc_r+0xbc>
80004bcc:	59 43       	cp.w	r3,20
80004bce:	e0 8b 00 04 	brhi	80004bd6 <_malloc_r+0x8a>
80004bd2:	2a 53       	sub	r3,-91
80004bd4:	c1 a8       	rjmp	80004c08 <_malloc_r+0xbc>
80004bd6:	e0 43 00 54 	cp.w	r3,84
80004bda:	e0 8b 00 06 	brhi	80004be6 <_malloc_r+0x9a>
80004bde:	ee 03 16 0c 	lsr	r3,r7,0xc
80004be2:	29 23       	sub	r3,-110
80004be4:	c1 28       	rjmp	80004c08 <_malloc_r+0xbc>
80004be6:	e0 43 01 54 	cp.w	r3,340
80004bea:	e0 8b 00 06 	brhi	80004bf6 <_malloc_r+0xaa>
80004bee:	ee 03 16 0f 	lsr	r3,r7,0xf
80004bf2:	28 93       	sub	r3,-119
80004bf4:	c0 a8       	rjmp	80004c08 <_malloc_r+0xbc>
80004bf6:	e0 43 05 54 	cp.w	r3,1364
80004bfa:	e0 88 00 04 	brls	80004c02 <_malloc_r+0xb6>
80004bfe:	37 e3       	mov	r3,126
80004c00:	c0 48       	rjmp	80004c08 <_malloc_r+0xbc>
80004c02:	ee 03 16 12 	lsr	r3,r7,0x12
80004c06:	28 43       	sub	r3,-124
80004c08:	4a aa       	lddpc	r10,80004cb0 <_malloc_r+0x164>
80004c0a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004c0e:	74 36       	ld.w	r6,r10[0xc]
80004c10:	c1 98       	rjmp	80004c42 <_malloc_r+0xf6>
80004c12:	6c 19       	ld.w	r9,r6[0x4]
80004c14:	e0 19 ff fc 	andl	r9,0xfffc
80004c18:	f2 07 01 0b 	sub	r11,r9,r7
80004c1c:	58 fb       	cp.w	r11,15
80004c1e:	e0 8a 00 04 	brle	80004c26 <_malloc_r+0xda>
80004c22:	20 13       	sub	r3,1
80004c24:	c1 18       	rjmp	80004c46 <_malloc_r+0xfa>
80004c26:	6c 38       	ld.w	r8,r6[0xc]
80004c28:	58 0b       	cp.w	r11,0
80004c2a:	c0 b5       	brlt	80004c40 <_malloc_r+0xf4>
80004c2c:	6c 2a       	ld.w	r10,r6[0x8]
80004c2e:	ec 09 00 09 	add	r9,r6,r9
80004c32:	0a 9c       	mov	r12,r5
80004c34:	91 2a       	st.w	r8[0x8],r10
80004c36:	95 38       	st.w	r10[0xc],r8
80004c38:	72 18       	ld.w	r8,r9[0x4]
80004c3a:	a1 a8       	sbr	r8,0x0
80004c3c:	93 18       	st.w	r9[0x4],r8
80004c3e:	cb a8       	rjmp	80004db2 <_malloc_r+0x266>
80004c40:	10 96       	mov	r6,r8
80004c42:	14 36       	cp.w	r6,r10
80004c44:	ce 71       	brne	80004c12 <_malloc_r+0xc6>
80004c46:	2f f3       	sub	r3,-1
80004c48:	49 aa       	lddpc	r10,80004cb0 <_malloc_r+0x164>
80004c4a:	f4 cc ff f8 	sub	r12,r10,-8
80004c4e:	78 26       	ld.w	r6,r12[0x8]
80004c50:	18 36       	cp.w	r6,r12
80004c52:	c6 c0       	breq	80004d2a <_malloc_r+0x1de>
80004c54:	6c 19       	ld.w	r9,r6[0x4]
80004c56:	e0 19 ff fc 	andl	r9,0xfffc
80004c5a:	f2 07 01 08 	sub	r8,r9,r7
80004c5e:	58 f8       	cp.w	r8,15
80004c60:	e0 89 00 8e 	brgt	80004d7c <_malloc_r+0x230>
80004c64:	99 3c       	st.w	r12[0xc],r12
80004c66:	99 2c       	st.w	r12[0x8],r12
80004c68:	58 08       	cp.w	r8,0
80004c6a:	c0 55       	brlt	80004c74 <_malloc_r+0x128>
80004c6c:	ec 09 00 09 	add	r9,r6,r9
80004c70:	0a 9c       	mov	r12,r5
80004c72:	ce 3b       	rjmp	80004c38 <_malloc_r+0xec>
80004c74:	e0 49 01 ff 	cp.w	r9,511
80004c78:	e0 8b 00 13 	brhi	80004c9e <_malloc_r+0x152>
80004c7c:	a3 99       	lsr	r9,0x3
80004c7e:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004c82:	70 2b       	ld.w	r11,r8[0x8]
80004c84:	8d 38       	st.w	r6[0xc],r8
80004c86:	8d 2b       	st.w	r6[0x8],r11
80004c88:	97 36       	st.w	r11[0xc],r6
80004c8a:	91 26       	st.w	r8[0x8],r6
80004c8c:	a3 49       	asr	r9,0x2
80004c8e:	74 18       	ld.w	r8,r10[0x4]
80004c90:	30 1b       	mov	r11,1
80004c92:	f6 09 09 49 	lsl	r9,r11,r9
80004c96:	f1 e9 10 09 	or	r9,r8,r9
80004c9a:	95 19       	st.w	r10[0x4],r9
80004c9c:	c4 78       	rjmp	80004d2a <_malloc_r+0x1de>
80004c9e:	f2 0a 16 09 	lsr	r10,r9,0x9
80004ca2:	58 4a       	cp.w	r10,4
80004ca4:	e0 8b 00 08 	brhi	80004cb4 <_malloc_r+0x168>
80004ca8:	f2 0a 16 06 	lsr	r10,r9,0x6
80004cac:	2c 8a       	sub	r10,-56
80004cae:	c2 18       	rjmp	80004cf0 <_malloc_r+0x1a4>
80004cb0:	00 00       	add	r0,r0
80004cb2:	01 e4       	ld.ub	r4,r0[0x6]
80004cb4:	59 4a       	cp.w	r10,20
80004cb6:	e0 8b 00 04 	brhi	80004cbe <_malloc_r+0x172>
80004cba:	2a 5a       	sub	r10,-91
80004cbc:	c1 a8       	rjmp	80004cf0 <_malloc_r+0x1a4>
80004cbe:	e0 4a 00 54 	cp.w	r10,84
80004cc2:	e0 8b 00 06 	brhi	80004cce <_malloc_r+0x182>
80004cc6:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004cca:	29 2a       	sub	r10,-110
80004ccc:	c1 28       	rjmp	80004cf0 <_malloc_r+0x1a4>
80004cce:	e0 4a 01 54 	cp.w	r10,340
80004cd2:	e0 8b 00 06 	brhi	80004cde <_malloc_r+0x192>
80004cd6:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004cda:	28 9a       	sub	r10,-119
80004cdc:	c0 a8       	rjmp	80004cf0 <_malloc_r+0x1a4>
80004cde:	e0 4a 05 54 	cp.w	r10,1364
80004ce2:	e0 88 00 04 	brls	80004cea <_malloc_r+0x19e>
80004ce6:	37 ea       	mov	r10,126
80004ce8:	c0 48       	rjmp	80004cf0 <_malloc_r+0x1a4>
80004cea:	f2 0a 16 12 	lsr	r10,r9,0x12
80004cee:	28 4a       	sub	r10,-124
80004cf0:	4c 8b       	lddpc	r11,80004e10 <_malloc_r+0x2c4>
80004cf2:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004cf6:	68 28       	ld.w	r8,r4[0x8]
80004cf8:	08 38       	cp.w	r8,r4
80004cfa:	c0 e1       	brne	80004d16 <_malloc_r+0x1ca>
80004cfc:	76 19       	ld.w	r9,r11[0x4]
80004cfe:	a3 4a       	asr	r10,0x2
80004d00:	30 1e       	mov	lr,1
80004d02:	fc 0a 09 4a 	lsl	r10,lr,r10
80004d06:	f3 ea 10 0a 	or	r10,r9,r10
80004d0a:	10 99       	mov	r9,r8
80004d0c:	97 1a       	st.w	r11[0x4],r10
80004d0e:	c0 a8       	rjmp	80004d22 <_malloc_r+0x1d6>
80004d10:	70 28       	ld.w	r8,r8[0x8]
80004d12:	08 38       	cp.w	r8,r4
80004d14:	c0 60       	breq	80004d20 <_malloc_r+0x1d4>
80004d16:	70 1a       	ld.w	r10,r8[0x4]
80004d18:	e0 1a ff fc 	andl	r10,0xfffc
80004d1c:	14 39       	cp.w	r9,r10
80004d1e:	cf 93       	brcs	80004d10 <_malloc_r+0x1c4>
80004d20:	70 39       	ld.w	r9,r8[0xc]
80004d22:	8d 39       	st.w	r6[0xc],r9
80004d24:	8d 28       	st.w	r6[0x8],r8
80004d26:	91 36       	st.w	r8[0xc],r6
80004d28:	93 26       	st.w	r9[0x8],r6
80004d2a:	e6 08 14 02 	asr	r8,r3,0x2
80004d2e:	30 1b       	mov	r11,1
80004d30:	4b 84       	lddpc	r4,80004e10 <_malloc_r+0x2c4>
80004d32:	f6 08 09 4b 	lsl	r11,r11,r8
80004d36:	68 18       	ld.w	r8,r4[0x4]
80004d38:	10 3b       	cp.w	r11,r8
80004d3a:	e0 8b 00 6d 	brhi	80004e14 <_malloc_r+0x2c8>
80004d3e:	f7 e8 00 09 	and	r9,r11,r8
80004d42:	c0 b1       	brne	80004d58 <_malloc_r+0x20c>
80004d44:	e0 13 ff fc 	andl	r3,0xfffc
80004d48:	a1 7b       	lsl	r11,0x1
80004d4a:	2f c3       	sub	r3,-4
80004d4c:	c0 38       	rjmp	80004d52 <_malloc_r+0x206>
80004d4e:	2f c3       	sub	r3,-4
80004d50:	a1 7b       	lsl	r11,0x1
80004d52:	f7 e8 00 09 	and	r9,r11,r8
80004d56:	cf c0       	breq	80004d4e <_malloc_r+0x202>
80004d58:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004d5c:	06 92       	mov	r2,r3
80004d5e:	1c 91       	mov	r1,lr
80004d60:	62 36       	ld.w	r6,r1[0xc]
80004d62:	c2 e8       	rjmp	80004dbe <_malloc_r+0x272>
80004d64:	6c 1a       	ld.w	r10,r6[0x4]
80004d66:	e0 1a ff fc 	andl	r10,0xfffc
80004d6a:	f4 07 01 08 	sub	r8,r10,r7
80004d6e:	58 f8       	cp.w	r8,15
80004d70:	e0 8a 00 15 	brle	80004d9a <_malloc_r+0x24e>
80004d74:	6c 3a       	ld.w	r10,r6[0xc]
80004d76:	6c 29       	ld.w	r9,r6[0x8]
80004d78:	95 29       	st.w	r10[0x8],r9
80004d7a:	93 3a       	st.w	r9[0xc],r10
80004d7c:	0e 99       	mov	r9,r7
80004d7e:	ec 07 00 07 	add	r7,r6,r7
80004d82:	a1 a9       	sbr	r9,0x0
80004d84:	99 37       	st.w	r12[0xc],r7
80004d86:	99 27       	st.w	r12[0x8],r7
80004d88:	8d 19       	st.w	r6[0x4],r9
80004d8a:	ee 08 09 08 	st.w	r7[r8],r8
80004d8e:	8f 2c       	st.w	r7[0x8],r12
80004d90:	8f 3c       	st.w	r7[0xc],r12
80004d92:	a1 a8       	sbr	r8,0x0
80004d94:	0a 9c       	mov	r12,r5
80004d96:	8f 18       	st.w	r7[0x4],r8
80004d98:	c0 d8       	rjmp	80004db2 <_malloc_r+0x266>
80004d9a:	6c 39       	ld.w	r9,r6[0xc]
80004d9c:	58 08       	cp.w	r8,0
80004d9e:	c0 f5       	brlt	80004dbc <_malloc_r+0x270>
80004da0:	ec 0a 00 0a 	add	r10,r6,r10
80004da4:	74 18       	ld.w	r8,r10[0x4]
80004da6:	a1 a8       	sbr	r8,0x0
80004da8:	0a 9c       	mov	r12,r5
80004daa:	95 18       	st.w	r10[0x4],r8
80004dac:	6c 28       	ld.w	r8,r6[0x8]
80004dae:	93 28       	st.w	r9[0x8],r8
80004db0:	91 39       	st.w	r8[0xc],r9
80004db2:	fe b0 fa 9f 	rcall	800042f0 <__malloc_unlock>
80004db6:	ec cc ff f8 	sub	r12,r6,-8
80004dba:	d8 32       	popm	r0-r7,pc
80004dbc:	12 96       	mov	r6,r9
80004dbe:	02 36       	cp.w	r6,r1
80004dc0:	cd 21       	brne	80004d64 <_malloc_r+0x218>
80004dc2:	2f f2       	sub	r2,-1
80004dc4:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004dc8:	c0 30       	breq	80004dce <_malloc_r+0x282>
80004dca:	2f 81       	sub	r1,-8
80004dcc:	cc ab       	rjmp	80004d60 <_malloc_r+0x214>
80004dce:	1c 98       	mov	r8,lr
80004dd0:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004dd4:	c0 81       	brne	80004de4 <_malloc_r+0x298>
80004dd6:	68 19       	ld.w	r9,r4[0x4]
80004dd8:	f6 08 11 ff 	rsub	r8,r11,-1
80004ddc:	f3 e8 00 08 	and	r8,r9,r8
80004de0:	89 18       	st.w	r4[0x4],r8
80004de2:	c0 78       	rjmp	80004df0 <_malloc_r+0x2a4>
80004de4:	f0 c9 00 08 	sub	r9,r8,8
80004de8:	20 13       	sub	r3,1
80004dea:	70 08       	ld.w	r8,r8[0x0]
80004dec:	12 38       	cp.w	r8,r9
80004dee:	cf 10       	breq	80004dd0 <_malloc_r+0x284>
80004df0:	a1 7b       	lsl	r11,0x1
80004df2:	68 18       	ld.w	r8,r4[0x4]
80004df4:	10 3b       	cp.w	r11,r8
80004df6:	e0 8b 00 0f 	brhi	80004e14 <_malloc_r+0x2c8>
80004dfa:	58 0b       	cp.w	r11,0
80004dfc:	c0 c0       	breq	80004e14 <_malloc_r+0x2c8>
80004dfe:	04 93       	mov	r3,r2
80004e00:	c0 38       	rjmp	80004e06 <_malloc_r+0x2ba>
80004e02:	2f c3       	sub	r3,-4
80004e04:	a1 7b       	lsl	r11,0x1
80004e06:	f7 e8 00 09 	and	r9,r11,r8
80004e0a:	ca 71       	brne	80004d58 <_malloc_r+0x20c>
80004e0c:	cf bb       	rjmp	80004e02 <_malloc_r+0x2b6>
80004e0e:	d7 03       	nop
80004e10:	00 00       	add	r0,r0
80004e12:	01 e4       	ld.ub	r4,r0[0x6]
80004e14:	68 23       	ld.w	r3,r4[0x8]
80004e16:	66 12       	ld.w	r2,r3[0x4]
80004e18:	e0 12 ff fc 	andl	r2,0xfffc
80004e1c:	0e 32       	cp.w	r2,r7
80004e1e:	5f 39       	srlo	r9
80004e20:	e4 07 01 08 	sub	r8,r2,r7
80004e24:	58 f8       	cp.w	r8,15
80004e26:	5f aa       	srle	r10
80004e28:	f5 e9 10 09 	or	r9,r10,r9
80004e2c:	e0 80 00 9a 	breq	80004f60 <_malloc_r+0x414>
80004e30:	4c 78       	lddpc	r8,80004f4c <_malloc_r+0x400>
80004e32:	70 01       	ld.w	r1,r8[0x0]
80004e34:	4c 78       	lddpc	r8,80004f50 <_malloc_r+0x404>
80004e36:	2f 01       	sub	r1,-16
80004e38:	70 08       	ld.w	r8,r8[0x0]
80004e3a:	0e 01       	add	r1,r7
80004e3c:	5b f8       	cp.w	r8,-1
80004e3e:	c0 40       	breq	80004e46 <_malloc_r+0x2fa>
80004e40:	28 11       	sub	r1,-127
80004e42:	e0 11 ff 80 	andl	r1,0xff80
80004e46:	02 9b       	mov	r11,r1
80004e48:	0a 9c       	mov	r12,r5
80004e4a:	ca 3c       	rcall	80004f90 <_sbrk_r>
80004e4c:	18 96       	mov	r6,r12
80004e4e:	5b fc       	cp.w	r12,-1
80004e50:	c6 d0       	breq	80004f2a <_malloc_r+0x3de>
80004e52:	e6 02 00 08 	add	r8,r3,r2
80004e56:	10 3c       	cp.w	r12,r8
80004e58:	c0 32       	brcc	80004e5e <_malloc_r+0x312>
80004e5a:	08 33       	cp.w	r3,r4
80004e5c:	c6 71       	brne	80004f2a <_malloc_r+0x3de>
80004e5e:	4b ea       	lddpc	r10,80004f54 <_malloc_r+0x408>
80004e60:	74 09       	ld.w	r9,r10[0x0]
80004e62:	e2 09 00 09 	add	r9,r1,r9
80004e66:	95 09       	st.w	r10[0x0],r9
80004e68:	10 36       	cp.w	r6,r8
80004e6a:	c0 a1       	brne	80004e7e <_malloc_r+0x332>
80004e6c:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004e70:	c0 71       	brne	80004e7e <_malloc_r+0x332>
80004e72:	e2 02 00 02 	add	r2,r1,r2
80004e76:	68 28       	ld.w	r8,r4[0x8]
80004e78:	a1 a2       	sbr	r2,0x0
80004e7a:	91 12       	st.w	r8[0x4],r2
80004e7c:	c4 b8       	rjmp	80004f12 <_malloc_r+0x3c6>
80004e7e:	4b 5a       	lddpc	r10,80004f50 <_malloc_r+0x404>
80004e80:	74 0b       	ld.w	r11,r10[0x0]
80004e82:	5b fb       	cp.w	r11,-1
80004e84:	c0 31       	brne	80004e8a <_malloc_r+0x33e>
80004e86:	95 06       	st.w	r10[0x0],r6
80004e88:	c0 68       	rjmp	80004e94 <_malloc_r+0x348>
80004e8a:	ec 09 00 09 	add	r9,r6,r9
80004e8e:	4b 2a       	lddpc	r10,80004f54 <_malloc_r+0x408>
80004e90:	10 19       	sub	r9,r8
80004e92:	95 09       	st.w	r10[0x0],r9
80004e94:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004e98:	f0 09 11 08 	rsub	r9,r8,8
80004e9c:	58 08       	cp.w	r8,0
80004e9e:	f2 08 17 10 	movne	r8,r9
80004ea2:	ed d8 e1 06 	addne	r6,r6,r8
80004ea6:	28 08       	sub	r8,-128
80004ea8:	ec 01 00 01 	add	r1,r6,r1
80004eac:	0a 9c       	mov	r12,r5
80004eae:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004eb2:	f0 01 01 01 	sub	r1,r8,r1
80004eb6:	02 9b       	mov	r11,r1
80004eb8:	c6 cc       	rcall	80004f90 <_sbrk_r>
80004eba:	4a 78       	lddpc	r8,80004f54 <_malloc_r+0x408>
80004ebc:	5b fc       	cp.w	r12,-1
80004ebe:	ec 0c 17 00 	moveq	r12,r6
80004ec2:	f9 b1 00 00 	moveq	r1,0
80004ec6:	70 09       	ld.w	r9,r8[0x0]
80004ec8:	0c 1c       	sub	r12,r6
80004eca:	89 26       	st.w	r4[0x8],r6
80004ecc:	02 0c       	add	r12,r1
80004ece:	12 01       	add	r1,r9
80004ed0:	a1 ac       	sbr	r12,0x0
80004ed2:	91 01       	st.w	r8[0x0],r1
80004ed4:	8d 1c       	st.w	r6[0x4],r12
80004ed6:	08 33       	cp.w	r3,r4
80004ed8:	c1 d0       	breq	80004f12 <_malloc_r+0x3c6>
80004eda:	58 f2       	cp.w	r2,15
80004edc:	e0 8b 00 05 	brhi	80004ee6 <_malloc_r+0x39a>
80004ee0:	30 18       	mov	r8,1
80004ee2:	8d 18       	st.w	r6[0x4],r8
80004ee4:	c2 38       	rjmp	80004f2a <_malloc_r+0x3de>
80004ee6:	30 59       	mov	r9,5
80004ee8:	20 c2       	sub	r2,12
80004eea:	e0 12 ff f8 	andl	r2,0xfff8
80004eee:	e6 02 00 08 	add	r8,r3,r2
80004ef2:	91 29       	st.w	r8[0x8],r9
80004ef4:	91 19       	st.w	r8[0x4],r9
80004ef6:	66 18       	ld.w	r8,r3[0x4]
80004ef8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004efc:	e5 e8 10 08 	or	r8,r2,r8
80004f00:	87 18       	st.w	r3[0x4],r8
80004f02:	58 f2       	cp.w	r2,15
80004f04:	e0 88 00 07 	brls	80004f12 <_malloc_r+0x3c6>
80004f08:	e6 cb ff f8 	sub	r11,r3,-8
80004f0c:	0a 9c       	mov	r12,r5
80004f0e:	e0 a0 03 6b 	rcall	800055e4 <_free_r>
80004f12:	49 29       	lddpc	r9,80004f58 <_malloc_r+0x40c>
80004f14:	72 0a       	ld.w	r10,r9[0x0]
80004f16:	49 08       	lddpc	r8,80004f54 <_malloc_r+0x408>
80004f18:	70 08       	ld.w	r8,r8[0x0]
80004f1a:	14 38       	cp.w	r8,r10
80004f1c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004f20:	48 f9       	lddpc	r9,80004f5c <_malloc_r+0x410>
80004f22:	72 0a       	ld.w	r10,r9[0x0]
80004f24:	14 38       	cp.w	r8,r10
80004f26:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004f2a:	68 28       	ld.w	r8,r4[0x8]
80004f2c:	70 18       	ld.w	r8,r8[0x4]
80004f2e:	e0 18 ff fc 	andl	r8,0xfffc
80004f32:	0e 38       	cp.w	r8,r7
80004f34:	5f 39       	srlo	r9
80004f36:	0e 18       	sub	r8,r7
80004f38:	58 f8       	cp.w	r8,15
80004f3a:	5f aa       	srle	r10
80004f3c:	f5 e9 10 09 	or	r9,r10,r9
80004f40:	c1 00       	breq	80004f60 <_malloc_r+0x414>
80004f42:	0a 9c       	mov	r12,r5
80004f44:	fe b0 f9 d6 	rcall	800042f0 <__malloc_unlock>
80004f48:	d8 3a       	popm	r0-r7,pc,r12=0
80004f4a:	d7 03       	nop
80004f4c:	00 00       	add	r0,r0
80004f4e:	09 e0       	ld.ub	r0,r4[0x6]
80004f50:	00 00       	add	r0,r0
80004f52:	05 f0       	ld.ub	r0,r2[0x7]
80004f54:	00 00       	add	r0,r0
80004f56:	09 e4       	ld.ub	r4,r4[0x6]
80004f58:	00 00       	add	r0,r0
80004f5a:	09 dc       	ld.ub	r12,r4[0x5]
80004f5c:	00 00       	add	r0,r0
80004f5e:	09 d8       	ld.ub	r8,r4[0x5]
80004f60:	68 26       	ld.w	r6,r4[0x8]
80004f62:	a1 a8       	sbr	r8,0x0
80004f64:	0e 99       	mov	r9,r7
80004f66:	a1 a9       	sbr	r9,0x0
80004f68:	8d 19       	st.w	r6[0x4],r9
80004f6a:	ec 07 00 07 	add	r7,r6,r7
80004f6e:	0a 9c       	mov	r12,r5
80004f70:	89 27       	st.w	r4[0x8],r7
80004f72:	8f 18       	st.w	r7[0x4],r8
80004f74:	fe b0 f9 be 	rcall	800042f0 <__malloc_unlock>
80004f78:	ec cc ff f8 	sub	r12,r6,-8
80004f7c:	d8 32       	popm	r0-r7,pc
80004f7e:	d7 03       	nop

80004f80 <memset>:
80004f80:	18 98       	mov	r8,r12
80004f82:	c0 38       	rjmp	80004f88 <memset+0x8>
80004f84:	10 cb       	st.b	r8++,r11
80004f86:	20 1a       	sub	r10,1
80004f88:	58 0a       	cp.w	r10,0
80004f8a:	cf d1       	brne	80004f84 <memset+0x4>
80004f8c:	5e fc       	retal	r12
80004f8e:	d7 03       	nop

80004f90 <_sbrk_r>:
80004f90:	d4 21       	pushm	r4-r7,lr
80004f92:	30 08       	mov	r8,0
80004f94:	18 97       	mov	r7,r12
80004f96:	48 66       	lddpc	r6,80004fac <_sbrk_r+0x1c>
80004f98:	16 9c       	mov	r12,r11
80004f9a:	8d 08       	st.w	r6[0x0],r8
80004f9c:	cc cc       	rcall	80005134 <_sbrk>
80004f9e:	5b fc       	cp.w	r12,-1
80004fa0:	c0 51       	brne	80004faa <_sbrk_r+0x1a>
80004fa2:	6c 08       	ld.w	r8,r6[0x0]
80004fa4:	58 08       	cp.w	r8,0
80004fa6:	ef f8 1a 03 	st.wne	r7[0xc],r8
80004faa:	d8 22       	popm	r4-r7,pc
80004fac:	00 00       	add	r0,r0
80004fae:	0a 3c       	cp.w	r12,r5

80004fb0 <setbuf>:
80004fb0:	d4 01       	pushm	lr
80004fb2:	e0 69 04 00 	mov	r9,1024
80004fb6:	58 0b       	cp.w	r11,0
80004fb8:	f9 ba 00 02 	moveq	r10,2
80004fbc:	f9 ba 01 00 	movne	r10,0
80004fc0:	c0 2c       	rcall	80004fc4 <setvbuf>
80004fc2:	d8 02       	popm	pc

80004fc4 <setvbuf>:
80004fc4:	d4 31       	pushm	r0-r7,lr
80004fc6:	4b f8       	lddpc	r8,800050c0 <setvbuf+0xfc>
80004fc8:	18 97       	mov	r7,r12
80004fca:	16 96       	mov	r6,r11
80004fcc:	14 95       	mov	r5,r10
80004fce:	12 94       	mov	r4,r9
80004fd0:	70 0c       	ld.w	r12,r8[0x0]
80004fd2:	58 0c       	cp.w	r12,0
80004fd4:	c0 60       	breq	80004fe0 <setvbuf+0x1c>
80004fd6:	78 68       	ld.w	r8,r12[0x18]
80004fd8:	58 08       	cp.w	r8,0
80004fda:	c0 31       	brne	80004fe0 <setvbuf+0x1c>
80004fdc:	e0 a0 02 68 	rcall	800054ac <__sinit>
80004fe0:	4b 98       	lddpc	r8,800050c4 <setvbuf+0x100>
80004fe2:	10 37       	cp.w	r7,r8
80004fe4:	c0 51       	brne	80004fee <setvbuf+0x2a>
80004fe6:	4b 78       	lddpc	r8,800050c0 <setvbuf+0xfc>
80004fe8:	70 08       	ld.w	r8,r8[0x0]
80004fea:	70 07       	ld.w	r7,r8[0x0]
80004fec:	c0 e8       	rjmp	80005008 <setvbuf+0x44>
80004fee:	4b 78       	lddpc	r8,800050c8 <setvbuf+0x104>
80004ff0:	10 37       	cp.w	r7,r8
80004ff2:	c0 51       	brne	80004ffc <setvbuf+0x38>
80004ff4:	4b 38       	lddpc	r8,800050c0 <setvbuf+0xfc>
80004ff6:	70 08       	ld.w	r8,r8[0x0]
80004ff8:	70 17       	ld.w	r7,r8[0x4]
80004ffa:	c0 78       	rjmp	80005008 <setvbuf+0x44>
80004ffc:	4b 48       	lddpc	r8,800050cc <setvbuf+0x108>
80004ffe:	10 37       	cp.w	r7,r8
80005000:	c0 41       	brne	80005008 <setvbuf+0x44>
80005002:	4b 08       	lddpc	r8,800050c0 <setvbuf+0xfc>
80005004:	70 08       	ld.w	r8,r8[0x0]
80005006:	70 27       	ld.w	r7,r8[0x8]
80005008:	58 25       	cp.w	r5,2
8000500a:	5f b8       	srhi	r8
8000500c:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
80005010:	c0 20       	breq	80005014 <setvbuf+0x50>
80005012:	dc 3a       	popm	r0-r7,pc,r12=-1
80005014:	4a b3       	lddpc	r3,800050c0 <setvbuf+0xfc>
80005016:	0e 9b       	mov	r11,r7
80005018:	66 0c       	ld.w	r12,r3[0x0]
8000501a:	c6 dd       	rcall	800052f4 <_fflush_r>
8000501c:	30 08       	mov	r8,0
8000501e:	8f 68       	st.w	r7[0x18],r8
80005020:	8f 18       	st.w	r7[0x4],r8
80005022:	8e 68       	ld.sh	r8,r7[0xc]
80005024:	ed b8 00 07 	bld	r8,0x7
80005028:	c0 51       	brne	80005032 <setvbuf+0x6e>
8000502a:	66 0c       	ld.w	r12,r3[0x0]
8000502c:	6e 4b       	ld.w	r11,r7[0x10]
8000502e:	e0 a0 02 db 	rcall	800055e4 <_free_r>
80005032:	8e 68       	ld.sh	r8,r7[0xc]
80005034:	e0 18 ff 7c 	andl	r8,0xff7c
80005038:	ae 68       	st.h	r7[0xc],r8
8000503a:	58 25       	cp.w	r5,2
8000503c:	c0 31       	brne	80005042 <setvbuf+0x7e>
8000503e:	30 0c       	mov	r12,0
80005040:	c1 38       	rjmp	80005066 <setvbuf+0xa2>
80005042:	58 06       	cp.w	r6,0
80005044:	c2 11       	brne	80005086 <setvbuf+0xc2>
80005046:	e0 63 04 00 	mov	r3,1024
8000504a:	58 04       	cp.w	r4,0
8000504c:	e6 04 17 00 	moveq	r4,r3
80005050:	08 9c       	mov	r12,r4
80005052:	fe b0 fd 75 	rcall	80004b3c <malloc>
80005056:	18 96       	mov	r6,r12
80005058:	c1 41       	brne	80005080 <setvbuf+0xbc>
8000505a:	06 9c       	mov	r12,r3
8000505c:	fe b0 fd 70 	rcall	80004b3c <malloc>
80005060:	18 96       	mov	r6,r12
80005062:	c0 e1       	brne	8000507e <setvbuf+0xba>
80005064:	3f fc       	mov	r12,-1
80005066:	8e 68       	ld.sh	r8,r7[0xc]
80005068:	a1 b8       	sbr	r8,0x1
8000506a:	ae 68       	st.h	r7[0xc],r8
8000506c:	ee c8 ff b9 	sub	r8,r7,-71
80005070:	8f 48       	st.w	r7[0x10],r8
80005072:	8f 08       	st.w	r7[0x0],r8
80005074:	30 08       	mov	r8,0
80005076:	8f 28       	st.w	r7[0x8],r8
80005078:	30 18       	mov	r8,1
8000507a:	8f 58       	st.w	r7[0x14],r8
8000507c:	d8 32       	popm	r0-r7,pc
8000507e:	06 94       	mov	r4,r3
80005080:	8e 68       	ld.sh	r8,r7[0xc]
80005082:	a7 b8       	sbr	r8,0x7
80005084:	ae 68       	st.h	r7[0xc],r8
80005086:	58 15       	cp.w	r5,1
80005088:	c0 71       	brne	80005096 <setvbuf+0xd2>
8000508a:	8e 68       	ld.sh	r8,r7[0xc]
8000508c:	a1 a8       	sbr	r8,0x0
8000508e:	ae 68       	st.h	r7[0xc],r8
80005090:	e8 08 11 00 	rsub	r8,r4,0
80005094:	8f 68       	st.w	r7[0x18],r8
80005096:	48 b8       	lddpc	r8,800050c0 <setvbuf+0xfc>
80005098:	fe c9 fc 90 	sub	r9,pc,-880
8000509c:	70 08       	ld.w	r8,r8[0x0]
8000509e:	8f 46       	st.w	r7[0x10],r6
800050a0:	91 a9       	st.w	r8[0x28],r9
800050a2:	8f 06       	st.w	r7[0x0],r6
800050a4:	8f 54       	st.w	r7[0x14],r4
800050a6:	8e 68       	ld.sh	r8,r7[0xc]
800050a8:	10 9c       	mov	r12,r8
800050aa:	e2 1c 00 08 	andl	r12,0x8,COH
800050ae:	c0 70       	breq	800050bc <setvbuf+0xf8>
800050b0:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800050b4:	30 0c       	mov	r12,0
800050b6:	f9 b4 01 00 	movne	r4,0
800050ba:	8f 24       	st.w	r7[0x8],r4
800050bc:	d8 32       	popm	r0-r7,pc
800050be:	d7 03       	nop
800050c0:	00 00       	add	r0,r0
800050c2:	01 e0       	ld.ub	r0,r0[0x6]
800050c4:	80 00       	ld.sh	r0,r0[0x0]
800050c6:	5d 1c       	icall	r12
800050c8:	80 00       	ld.sh	r0,r0[0x0]
800050ca:	5d 3c       	musfr	r12
800050cc:	80 00       	ld.sh	r0,r0[0x0]
800050ce:	5d 5c       	*unknown*

800050d0 <strncpy>:
800050d0:	30 08       	mov	r8,0
800050d2:	10 3a       	cp.w	r10,r8
800050d4:	5e 0c       	reteq	r12
800050d6:	f6 08 07 09 	ld.ub	r9,r11[r8]
800050da:	f8 08 0b 09 	st.b	r12[r8],r9
800050de:	2f f8       	sub	r8,-1
800050e0:	58 09       	cp.w	r9,0
800050e2:	cf 81       	brne	800050d2 <strncpy+0x2>
800050e4:	10 3a       	cp.w	r10,r8
800050e6:	5e 0c       	reteq	r12
800050e8:	f8 08 0b 09 	st.b	r12[r8],r9
800050ec:	2f f8       	sub	r8,-1
800050ee:	cf bb       	rjmp	800050e4 <strncpy+0x14>

800050f0 <_init_argv>:
800050f0:	30 e8       	mov	r8,14
800050f2:	d6 73       	breakpoint
800050f4:	3f fc       	mov	r12,-1
800050f6:	35 8b       	mov	r11,88
800050f8:	5e fc       	retal	r12

800050fa <_exit>:
800050fa:	30 d8       	mov	r8,13
800050fc:	d6 73       	breakpoint
800050fe:	3f fc       	mov	r12,-1
80005100:	35 8b       	mov	r11,88
80005102:	c0 08       	rjmp	80005102 <_exit+0x8>

80005104 <_close>:
80005104:	30 28       	mov	r8,2
80005106:	d6 73       	breakpoint
80005108:	3f fc       	mov	r12,-1
8000510a:	35 8b       	mov	r11,88
8000510c:	58 0c       	cp.w	r12,0
8000510e:	5e 4c       	retge	r12
80005110:	48 2a       	lddpc	r10,80005118 <_close+0x14>
80005112:	95 0b       	st.w	r10[0x0],r11
80005114:	5e fc       	retal	r12
80005116:	d7 03       	nop
80005118:	00 00       	add	r0,r0
8000511a:	0a 3c       	cp.w	r12,r5

8000511c <_lseek>:
8000511c:	30 58       	mov	r8,5
8000511e:	d6 73       	breakpoint
80005120:	3f fc       	mov	r12,-1
80005122:	35 8b       	mov	r11,88
80005124:	58 0c       	cp.w	r12,0
80005126:	5e 4c       	retge	r12
80005128:	48 2a       	lddpc	r10,80005130 <_lseek+0x14>
8000512a:	95 0b       	st.w	r10[0x0],r11
8000512c:	5e fc       	retal	r12
8000512e:	d7 03       	nop
80005130:	00 00       	add	r0,r0
80005132:	0a 3c       	cp.w	r12,r5

80005134 <_sbrk>:
80005134:	d4 01       	pushm	lr
80005136:	48 c8       	lddpc	r8,80005164 <_sbrk+0x30>
80005138:	70 09       	ld.w	r9,r8[0x0]
8000513a:	58 09       	cp.w	r9,0
8000513c:	c0 31       	brne	80005142 <_sbrk+0xe>
8000513e:	48 b9       	lddpc	r9,80005168 <_sbrk+0x34>
80005140:	91 09       	st.w	r8[0x0],r9
80005142:	48 99       	lddpc	r9,80005164 <_sbrk+0x30>
80005144:	48 aa       	lddpc	r10,8000516c <_sbrk+0x38>
80005146:	72 08       	ld.w	r8,r9[0x0]
80005148:	f0 0c 00 0c 	add	r12,r8,r12
8000514c:	14 3c       	cp.w	r12,r10
8000514e:	e0 8b 00 04 	brhi	80005156 <_sbrk+0x22>
80005152:	93 0c       	st.w	r9[0x0],r12
80005154:	c0 58       	rjmp	8000515e <_sbrk+0x2a>
80005156:	cc 9c       	rcall	800052e8 <__errno>
80005158:	30 c8       	mov	r8,12
8000515a:	99 08       	st.w	r12[0x0],r8
8000515c:	3f f8       	mov	r8,-1
8000515e:	10 9c       	mov	r12,r8
80005160:	d8 02       	popm	pc
80005162:	d7 03       	nop
80005164:	00 00       	add	r0,r0
80005166:	0a 0c       	add	r12,r5
80005168:	00 00       	add	r0,r0
8000516a:	0a 40       	or	r0,r5
8000516c:	00 00       	add	r0,r0
8000516e:	f0 00       	*unknown*

80005170 <__register_exitproc>:
80005170:	d4 31       	pushm	r0-r7,lr
80005172:	4a 98       	lddpc	r8,80005214 <__register_exitproc+0xa4>
80005174:	70 03       	ld.w	r3,r8[0x0]
80005176:	67 24       	ld.w	r4,r3[0x48]
80005178:	e6 c8 ff b4 	sub	r8,r3,-76
8000517c:	58 04       	cp.w	r4,0
8000517e:	f0 04 17 00 	moveq	r4,r8
80005182:	e7 f4 0a 12 	st.weq	r3[0x48],r4
80005186:	18 97       	mov	r7,r12
80005188:	16 96       	mov	r6,r11
8000518a:	14 95       	mov	r5,r10
8000518c:	12 92       	mov	r2,r9
8000518e:	68 18       	ld.w	r8,r4[0x4]
80005190:	59 f8       	cp.w	r8,31
80005192:	e0 8a 00 0e 	brle	800051ae <__register_exitproc+0x3e>
80005196:	e0 6c 00 8c 	mov	r12,140
8000519a:	fe b0 fc d1 	rcall	80004b3c <malloc>
8000519e:	18 94       	mov	r4,r12
800051a0:	c3 80       	breq	80005210 <__register_exitproc+0xa0>
800051a2:	67 28       	ld.w	r8,r3[0x48]
800051a4:	99 08       	st.w	r12[0x0],r8
800051a6:	e7 4c 00 48 	st.w	r3[72],r12
800051aa:	30 08       	mov	r8,0
800051ac:	99 18       	st.w	r12[0x4],r8
800051ae:	58 07       	cp.w	r7,0
800051b0:	c2 70       	breq	800051fe <__register_exitproc+0x8e>
800051b2:	e8 fc 00 88 	ld.w	r12,r4[136]
800051b6:	58 0c       	cp.w	r12,0
800051b8:	c0 d1       	brne	800051d2 <__register_exitproc+0x62>
800051ba:	e0 6c 01 08 	mov	r12,264
800051be:	fe b0 fc bf 	rcall	80004b3c <malloc>
800051c2:	c2 70       	breq	80005210 <__register_exitproc+0xa0>
800051c4:	30 08       	mov	r8,0
800051c6:	e9 4c 00 88 	st.w	r4[136],r12
800051ca:	f9 48 01 04 	st.w	r12[260],r8
800051ce:	f9 48 01 00 	st.w	r12[256],r8
800051d2:	68 18       	ld.w	r8,r4[0x4]
800051d4:	f0 c9 ff e0 	sub	r9,r8,-32
800051d8:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
800051dc:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
800051e0:	30 1a       	mov	r10,1
800051e2:	f8 f9 01 00 	ld.w	r9,r12[256]
800051e6:	f4 08 09 48 	lsl	r8,r10,r8
800051ea:	10 49       	or	r9,r8
800051ec:	f9 49 01 00 	st.w	r12[256],r9
800051f0:	58 27       	cp.w	r7,2
800051f2:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
800051f6:	f3 d8 e0 38 	oreq	r8,r9,r8
800051fa:	f9 f8 0a 41 	st.weq	r12[0x104],r8
800051fe:	68 18       	ld.w	r8,r4[0x4]
80005200:	30 0c       	mov	r12,0
80005202:	f0 c9 ff ff 	sub	r9,r8,-1
80005206:	2f e8       	sub	r8,-2
80005208:	89 19       	st.w	r4[0x4],r9
8000520a:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
8000520e:	d8 32       	popm	r0-r7,pc
80005210:	dc 3a       	popm	r0-r7,pc,r12=-1
80005212:	d7 03       	nop
80005214:	80 00       	ld.sh	r0,r0[0x0]
80005216:	5d 18       	icall	r8

80005218 <__call_exitprocs>:
80005218:	d4 31       	pushm	r0-r7,lr
8000521a:	20 3d       	sub	sp,12
8000521c:	4b 28       	lddpc	r8,800052e4 <__call_exitprocs+0xcc>
8000521e:	50 2c       	stdsp	sp[0x8],r12
80005220:	70 08       	ld.w	r8,r8[0x0]
80005222:	16 91       	mov	r1,r11
80005224:	50 08       	stdsp	sp[0x0],r8
80005226:	2b 88       	sub	r8,-72
80005228:	50 18       	stdsp	sp[0x4],r8
8000522a:	40 0a       	lddsp	r10,sp[0x0]
8000522c:	40 14       	lddsp	r4,sp[0x4]
8000522e:	75 27       	ld.w	r7,r10[0x48]
80005230:	c5 58       	rjmp	800052da <__call_exitprocs+0xc2>
80005232:	6e 15       	ld.w	r5,r7[0x4]
80005234:	ee f6 00 88 	ld.w	r6,r7[136]
80005238:	ea c2 ff ff 	sub	r2,r5,-1
8000523c:	20 15       	sub	r5,1
8000523e:	ee 02 00 22 	add	r2,r7,r2<<0x2
80005242:	ec 05 00 23 	add	r3,r6,r5<<0x2
80005246:	c3 58       	rjmp	800052b0 <__call_exitprocs+0x98>
80005248:	58 01       	cp.w	r1,0
8000524a:	c0 70       	breq	80005258 <__call_exitprocs+0x40>
8000524c:	58 06       	cp.w	r6,0
8000524e:	c2 e0       	breq	800052aa <__call_exitprocs+0x92>
80005250:	e6 f8 00 80 	ld.w	r8,r3[128]
80005254:	02 38       	cp.w	r8,r1
80005256:	c2 a1       	brne	800052aa <__call_exitprocs+0x92>
80005258:	6e 19       	ld.w	r9,r7[0x4]
8000525a:	64 08       	ld.w	r8,r2[0x0]
8000525c:	20 19       	sub	r9,1
8000525e:	12 35       	cp.w	r5,r9
80005260:	ef f5 0a 01 	st.weq	r7[0x4],r5
80005264:	f9 b9 01 00 	movne	r9,0
80005268:	e5 f9 1a 00 	st.wne	r2[0x0],r9
8000526c:	58 08       	cp.w	r8,0
8000526e:	c1 e0       	breq	800052aa <__call_exitprocs+0x92>
80005270:	6e 10       	ld.w	r0,r7[0x4]
80005272:	58 06       	cp.w	r6,0
80005274:	c0 90       	breq	80005286 <__call_exitprocs+0x6e>
80005276:	30 1a       	mov	r10,1
80005278:	f4 05 09 49 	lsl	r9,r10,r5
8000527c:	ec fa 01 00 	ld.w	r10,r6[256]
80005280:	f3 ea 00 0a 	and	r10,r9,r10
80005284:	c0 31       	brne	8000528a <__call_exitprocs+0x72>
80005286:	5d 18       	icall	r8
80005288:	c0 b8       	rjmp	8000529e <__call_exitprocs+0x86>
8000528a:	ec fa 01 04 	ld.w	r10,r6[260]
8000528e:	66 0b       	ld.w	r11,r3[0x0]
80005290:	14 69       	and	r9,r10
80005292:	c0 41       	brne	8000529a <__call_exitprocs+0x82>
80005294:	40 2c       	lddsp	r12,sp[0x8]
80005296:	5d 18       	icall	r8
80005298:	c0 38       	rjmp	8000529e <__call_exitprocs+0x86>
8000529a:	16 9c       	mov	r12,r11
8000529c:	5d 18       	icall	r8
8000529e:	6e 18       	ld.w	r8,r7[0x4]
800052a0:	10 30       	cp.w	r0,r8
800052a2:	cc 41       	brne	8000522a <__call_exitprocs+0x12>
800052a4:	68 08       	ld.w	r8,r4[0x0]
800052a6:	0e 38       	cp.w	r8,r7
800052a8:	cc 11       	brne	8000522a <__call_exitprocs+0x12>
800052aa:	20 15       	sub	r5,1
800052ac:	20 43       	sub	r3,4
800052ae:	20 42       	sub	r2,4
800052b0:	58 05       	cp.w	r5,0
800052b2:	cc b4       	brge	80005248 <__call_exitprocs+0x30>
800052b4:	6e 18       	ld.w	r8,r7[0x4]
800052b6:	58 08       	cp.w	r8,0
800052b8:	c0 f1       	brne	800052d6 <__call_exitprocs+0xbe>
800052ba:	6e 08       	ld.w	r8,r7[0x0]
800052bc:	58 08       	cp.w	r8,0
800052be:	c0 c0       	breq	800052d6 <__call_exitprocs+0xbe>
800052c0:	89 08       	st.w	r4[0x0],r8
800052c2:	58 06       	cp.w	r6,0
800052c4:	c0 40       	breq	800052cc <__call_exitprocs+0xb4>
800052c6:	0c 9c       	mov	r12,r6
800052c8:	fe b0 fc 30 	rcall	80004b28 <free>
800052cc:	0e 9c       	mov	r12,r7
800052ce:	fe b0 fc 2d 	rcall	80004b28 <free>
800052d2:	68 07       	ld.w	r7,r4[0x0]
800052d4:	c0 38       	rjmp	800052da <__call_exitprocs+0xc2>
800052d6:	0e 94       	mov	r4,r7
800052d8:	6e 07       	ld.w	r7,r7[0x0]
800052da:	58 07       	cp.w	r7,0
800052dc:	ca b1       	brne	80005232 <__call_exitprocs+0x1a>
800052de:	2f dd       	sub	sp,-12
800052e0:	d8 32       	popm	r0-r7,pc
800052e2:	d7 03       	nop
800052e4:	80 00       	ld.sh	r0,r0[0x0]
800052e6:	5d 18       	icall	r8

800052e8 <__errno>:
800052e8:	48 28       	lddpc	r8,800052f0 <__errno+0x8>
800052ea:	70 0c       	ld.w	r12,r8[0x0]
800052ec:	2f 4c       	sub	r12,-12
800052ee:	5e fc       	retal	r12
800052f0:	00 00       	add	r0,r0
800052f2:	01 e0       	ld.ub	r0,r0[0x6]

800052f4 <_fflush_r>:
800052f4:	d4 21       	pushm	r4-r7,lr
800052f6:	16 97       	mov	r7,r11
800052f8:	18 96       	mov	r6,r12
800052fa:	76 48       	ld.w	r8,r11[0x10]
800052fc:	58 08       	cp.w	r8,0
800052fe:	c7 c0       	breq	800053f6 <_fflush_r+0x102>
80005300:	58 0c       	cp.w	r12,0
80005302:	c0 50       	breq	8000530c <_fflush_r+0x18>
80005304:	78 68       	ld.w	r8,r12[0x18]
80005306:	58 08       	cp.w	r8,0
80005308:	c0 21       	brne	8000530c <_fflush_r+0x18>
8000530a:	cd 1c       	rcall	800054ac <__sinit>
8000530c:	4b b8       	lddpc	r8,800053f8 <_fflush_r+0x104>
8000530e:	10 37       	cp.w	r7,r8
80005310:	c0 31       	brne	80005316 <_fflush_r+0x22>
80005312:	6c 07       	ld.w	r7,r6[0x0]
80005314:	c0 a8       	rjmp	80005328 <_fflush_r+0x34>
80005316:	4b a8       	lddpc	r8,800053fc <_fflush_r+0x108>
80005318:	10 37       	cp.w	r7,r8
8000531a:	c0 31       	brne	80005320 <_fflush_r+0x2c>
8000531c:	6c 17       	ld.w	r7,r6[0x4]
8000531e:	c0 58       	rjmp	80005328 <_fflush_r+0x34>
80005320:	4b 88       	lddpc	r8,80005400 <_fflush_r+0x10c>
80005322:	10 37       	cp.w	r7,r8
80005324:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80005328:	8e 6a       	ld.sh	r10,r7[0xc]
8000532a:	14 98       	mov	r8,r10
8000532c:	ed ba 00 03 	bld	r10,0x3
80005330:	c4 20       	breq	800053b4 <_fflush_r+0xc0>
80005332:	ab ba       	sbr	r10,0xb
80005334:	ae 6a       	st.h	r7[0xc],r10
80005336:	6e 18       	ld.w	r8,r7[0x4]
80005338:	58 08       	cp.w	r8,0
8000533a:	e0 89 00 06 	brgt	80005346 <_fflush_r+0x52>
8000533e:	6f 08       	ld.w	r8,r7[0x40]
80005340:	58 08       	cp.w	r8,0
80005342:	e0 8a 00 5a 	brle	800053f6 <_fflush_r+0x102>
80005346:	6e b8       	ld.w	r8,r7[0x2c]
80005348:	58 08       	cp.w	r8,0
8000534a:	c5 60       	breq	800053f6 <_fflush_r+0x102>
8000534c:	e2 1a 10 00 	andl	r10,0x1000,COH
80005350:	c0 30       	breq	80005356 <_fflush_r+0x62>
80005352:	6f 55       	ld.w	r5,r7[0x54]
80005354:	c0 f8       	rjmp	80005372 <_fflush_r+0x7e>
80005356:	30 19       	mov	r9,1
80005358:	6e 8b       	ld.w	r11,r7[0x20]
8000535a:	0c 9c       	mov	r12,r6
8000535c:	5d 18       	icall	r8
8000535e:	18 95       	mov	r5,r12
80005360:	5b fc       	cp.w	r12,-1
80005362:	c0 81       	brne	80005372 <_fflush_r+0x7e>
80005364:	6c 38       	ld.w	r8,r6[0xc]
80005366:	59 d8       	cp.w	r8,29
80005368:	c4 70       	breq	800053f6 <_fflush_r+0x102>
8000536a:	8e 68       	ld.sh	r8,r7[0xc]
8000536c:	a7 a8       	sbr	r8,0x6
8000536e:	ae 68       	st.h	r7[0xc],r8
80005370:	d8 22       	popm	r4-r7,pc
80005372:	8e 68       	ld.sh	r8,r7[0xc]
80005374:	ed b8 00 02 	bld	r8,0x2
80005378:	c0 91       	brne	8000538a <_fflush_r+0x96>
8000537a:	6e 18       	ld.w	r8,r7[0x4]
8000537c:	10 15       	sub	r5,r8
8000537e:	6e d8       	ld.w	r8,r7[0x34]
80005380:	58 08       	cp.w	r8,0
80005382:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80005386:	eb d8 e1 15 	subne	r5,r5,r8
8000538a:	6e b8       	ld.w	r8,r7[0x2c]
8000538c:	0c 9c       	mov	r12,r6
8000538e:	30 09       	mov	r9,0
80005390:	0a 9a       	mov	r10,r5
80005392:	6e 8b       	ld.w	r11,r7[0x20]
80005394:	5d 18       	icall	r8
80005396:	8e 68       	ld.sh	r8,r7[0xc]
80005398:	0a 3c       	cp.w	r12,r5
8000539a:	c2 61       	brne	800053e6 <_fflush_r+0xf2>
8000539c:	ab d8       	cbr	r8,0xb
8000539e:	30 0c       	mov	r12,0
800053a0:	6e 49       	ld.w	r9,r7[0x10]
800053a2:	ae 68       	st.h	r7[0xc],r8
800053a4:	8f 1c       	st.w	r7[0x4],r12
800053a6:	8f 09       	st.w	r7[0x0],r9
800053a8:	ed b8 00 0c 	bld	r8,0xc
800053ac:	c2 51       	brne	800053f6 <_fflush_r+0x102>
800053ae:	ef 45 00 54 	st.w	r7[84],r5
800053b2:	d8 22       	popm	r4-r7,pc
800053b4:	6e 45       	ld.w	r5,r7[0x10]
800053b6:	58 05       	cp.w	r5,0
800053b8:	c1 f0       	breq	800053f6 <_fflush_r+0x102>
800053ba:	6e 04       	ld.w	r4,r7[0x0]
800053bc:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800053c0:	8f 05       	st.w	r7[0x0],r5
800053c2:	f9 b8 01 00 	movne	r8,0
800053c6:	ef f8 00 05 	ld.weq	r8,r7[0x14]
800053ca:	0a 14       	sub	r4,r5
800053cc:	8f 28       	st.w	r7[0x8],r8
800053ce:	c1 18       	rjmp	800053f0 <_fflush_r+0xfc>
800053d0:	08 99       	mov	r9,r4
800053d2:	0a 9a       	mov	r10,r5
800053d4:	6e a8       	ld.w	r8,r7[0x28]
800053d6:	6e 8b       	ld.w	r11,r7[0x20]
800053d8:	0c 9c       	mov	r12,r6
800053da:	5d 18       	icall	r8
800053dc:	18 14       	sub	r4,r12
800053de:	58 0c       	cp.w	r12,0
800053e0:	e0 89 00 07 	brgt	800053ee <_fflush_r+0xfa>
800053e4:	8e 68       	ld.sh	r8,r7[0xc]
800053e6:	a7 a8       	sbr	r8,0x6
800053e8:	3f fc       	mov	r12,-1
800053ea:	ae 68       	st.h	r7[0xc],r8
800053ec:	d8 22       	popm	r4-r7,pc
800053ee:	18 05       	add	r5,r12
800053f0:	58 04       	cp.w	r4,0
800053f2:	fe 99 ff ef 	brgt	800053d0 <_fflush_r+0xdc>
800053f6:	d8 2a       	popm	r4-r7,pc,r12=0
800053f8:	80 00       	ld.sh	r0,r0[0x0]
800053fa:	5d 1c       	icall	r12
800053fc:	80 00       	ld.sh	r0,r0[0x0]
800053fe:	5d 3c       	musfr	r12
80005400:	80 00       	ld.sh	r0,r0[0x0]
80005402:	5d 5c       	*unknown*

80005404 <__sfp_lock_acquire>:
80005404:	5e fc       	retal	r12

80005406 <__sfp_lock_release>:
80005406:	5e fc       	retal	r12

80005408 <_cleanup_r>:
80005408:	d4 01       	pushm	lr
8000540a:	fe cb fa de 	sub	r11,pc,-1314
8000540e:	cb 3d       	rcall	80005774 <_fwalk>
80005410:	d8 02       	popm	pc
80005412:	d7 03       	nop

80005414 <__sfmoreglue>:
80005414:	d4 21       	pushm	r4-r7,lr
80005416:	16 95       	mov	r5,r11
80005418:	f6 06 10 5c 	mul	r6,r11,92
8000541c:	ec cb ff f4 	sub	r11,r6,-12
80005420:	fe b0 fb 96 	rcall	80004b4c <_malloc_r>
80005424:	18 97       	mov	r7,r12
80005426:	c0 90       	breq	80005438 <__sfmoreglue+0x24>
80005428:	99 15       	st.w	r12[0x4],r5
8000542a:	30 0b       	mov	r11,0
8000542c:	2f 4c       	sub	r12,-12
8000542e:	0c 9a       	mov	r10,r6
80005430:	8f 2c       	st.w	r7[0x8],r12
80005432:	8f 0b       	st.w	r7[0x0],r11
80005434:	fe b0 fd a6 	rcall	80004f80 <memset>
80005438:	0e 9c       	mov	r12,r7
8000543a:	d8 22       	popm	r4-r7,pc

8000543c <__sfp>:
8000543c:	d4 21       	pushm	r4-r7,lr
8000543e:	49 b8       	lddpc	r8,800054a8 <__sfp+0x6c>
80005440:	18 96       	mov	r6,r12
80005442:	70 07       	ld.w	r7,r8[0x0]
80005444:	6e 68       	ld.w	r8,r7[0x18]
80005446:	58 08       	cp.w	r8,0
80005448:	c0 31       	brne	8000544e <__sfp+0x12>
8000544a:	0e 9c       	mov	r12,r7
8000544c:	c3 0c       	rcall	800054ac <__sinit>
8000544e:	ee c7 ff 28 	sub	r7,r7,-216
80005452:	30 05       	mov	r5,0
80005454:	6e 2c       	ld.w	r12,r7[0x8]
80005456:	6e 18       	ld.w	r8,r7[0x4]
80005458:	c0 68       	rjmp	80005464 <__sfp+0x28>
8000545a:	98 69       	ld.sh	r9,r12[0xc]
8000545c:	ea 09 19 00 	cp.h	r9,r5
80005460:	c1 10       	breq	80005482 <__sfp+0x46>
80005462:	2a 4c       	sub	r12,-92
80005464:	20 18       	sub	r8,1
80005466:	cf a7       	brpl	8000545a <__sfp+0x1e>
80005468:	6e 08       	ld.w	r8,r7[0x0]
8000546a:	58 08       	cp.w	r8,0
8000546c:	c0 61       	brne	80005478 <__sfp+0x3c>
8000546e:	30 4b       	mov	r11,4
80005470:	0c 9c       	mov	r12,r6
80005472:	cd 1f       	rcall	80005414 <__sfmoreglue>
80005474:	8f 0c       	st.w	r7[0x0],r12
80005476:	c0 30       	breq	8000547c <__sfp+0x40>
80005478:	6e 07       	ld.w	r7,r7[0x0]
8000547a:	ce db       	rjmp	80005454 <__sfp+0x18>
8000547c:	30 c8       	mov	r8,12
8000547e:	8d 38       	st.w	r6[0xc],r8
80005480:	d8 22       	popm	r4-r7,pc
80005482:	30 08       	mov	r8,0
80005484:	f9 48 00 4c 	st.w	r12[76],r8
80005488:	99 08       	st.w	r12[0x0],r8
8000548a:	99 28       	st.w	r12[0x8],r8
8000548c:	99 18       	st.w	r12[0x4],r8
8000548e:	99 48       	st.w	r12[0x10],r8
80005490:	99 58       	st.w	r12[0x14],r8
80005492:	99 68       	st.w	r12[0x18],r8
80005494:	99 d8       	st.w	r12[0x34],r8
80005496:	99 e8       	st.w	r12[0x38],r8
80005498:	f9 48 00 48 	st.w	r12[72],r8
8000549c:	3f f8       	mov	r8,-1
8000549e:	b8 78       	st.h	r12[0xe],r8
800054a0:	30 18       	mov	r8,1
800054a2:	b8 68       	st.h	r12[0xc],r8
800054a4:	d8 22       	popm	r4-r7,pc
800054a6:	d7 03       	nop
800054a8:	80 00       	ld.sh	r0,r0[0x0]
800054aa:	5d 18       	icall	r8

800054ac <__sinit>:
800054ac:	d4 21       	pushm	r4-r7,lr
800054ae:	18 96       	mov	r6,r12
800054b0:	78 67       	ld.w	r7,r12[0x18]
800054b2:	58 07       	cp.w	r7,0
800054b4:	c4 91       	brne	80005546 <__sinit+0x9a>
800054b6:	fe c8 00 ae 	sub	r8,pc,174
800054ba:	30 15       	mov	r5,1
800054bc:	99 a8       	st.w	r12[0x28],r8
800054be:	f9 47 00 d8 	st.w	r12[216],r7
800054c2:	f9 47 00 dc 	st.w	r12[220],r7
800054c6:	f9 47 00 e0 	st.w	r12[224],r7
800054ca:	99 65       	st.w	r12[0x18],r5
800054cc:	cb 8f       	rcall	8000543c <__sfp>
800054ce:	8d 0c       	st.w	r6[0x0],r12
800054d0:	0c 9c       	mov	r12,r6
800054d2:	cb 5f       	rcall	8000543c <__sfp>
800054d4:	8d 1c       	st.w	r6[0x4],r12
800054d6:	0c 9c       	mov	r12,r6
800054d8:	cb 2f       	rcall	8000543c <__sfp>
800054da:	6c 09       	ld.w	r9,r6[0x0]
800054dc:	30 48       	mov	r8,4
800054de:	93 07       	st.w	r9[0x0],r7
800054e0:	b2 68       	st.h	r9[0xc],r8
800054e2:	93 17       	st.w	r9[0x4],r7
800054e4:	93 27       	st.w	r9[0x8],r7
800054e6:	6c 18       	ld.w	r8,r6[0x4]
800054e8:	b2 77       	st.h	r9[0xe],r7
800054ea:	93 47       	st.w	r9[0x10],r7
800054ec:	93 57       	st.w	r9[0x14],r7
800054ee:	93 67       	st.w	r9[0x18],r7
800054f0:	93 89       	st.w	r9[0x20],r9
800054f2:	91 07       	st.w	r8[0x0],r7
800054f4:	91 17       	st.w	r8[0x4],r7
800054f6:	91 27       	st.w	r8[0x8],r7
800054f8:	fe ce fc e8 	sub	lr,pc,-792
800054fc:	fe cb fd 18 	sub	r11,pc,-744
80005500:	93 9e       	st.w	r9[0x24],lr
80005502:	93 ab       	st.w	r9[0x28],r11
80005504:	fe ca fd 40 	sub	r10,pc,-704
80005508:	fe c4 fd 4c 	sub	r4,pc,-692
8000550c:	93 ba       	st.w	r9[0x2c],r10
8000550e:	93 c4       	st.w	r9[0x30],r4
80005510:	30 99       	mov	r9,9
80005512:	b0 69       	st.h	r8[0xc],r9
80005514:	b0 75       	st.h	r8[0xe],r5
80005516:	91 c4       	st.w	r8[0x30],r4
80005518:	91 47       	st.w	r8[0x10],r7
8000551a:	91 57       	st.w	r8[0x14],r7
8000551c:	91 67       	st.w	r8[0x18],r7
8000551e:	91 88       	st.w	r8[0x20],r8
80005520:	91 9e       	st.w	r8[0x24],lr
80005522:	91 ab       	st.w	r8[0x28],r11
80005524:	91 ba       	st.w	r8[0x2c],r10
80005526:	8d 2c       	st.w	r6[0x8],r12
80005528:	31 28       	mov	r8,18
8000552a:	99 07       	st.w	r12[0x0],r7
8000552c:	b8 68       	st.h	r12[0xc],r8
8000552e:	99 17       	st.w	r12[0x4],r7
80005530:	99 27       	st.w	r12[0x8],r7
80005532:	30 28       	mov	r8,2
80005534:	b8 78       	st.h	r12[0xe],r8
80005536:	99 c4       	st.w	r12[0x30],r4
80005538:	99 67       	st.w	r12[0x18],r7
8000553a:	99 9e       	st.w	r12[0x24],lr
8000553c:	99 ab       	st.w	r12[0x28],r11
8000553e:	99 ba       	st.w	r12[0x2c],r10
80005540:	99 47       	st.w	r12[0x10],r7
80005542:	99 57       	st.w	r12[0x14],r7
80005544:	99 8c       	st.w	r12[0x20],r12
80005546:	d8 22       	popm	r4-r7,pc

80005548 <_malloc_trim_r>:
80005548:	d4 21       	pushm	r4-r7,lr
8000554a:	16 95       	mov	r5,r11
8000554c:	18 97       	mov	r7,r12
8000554e:	fe b0 f6 cb 	rcall	800042e4 <__malloc_lock>
80005552:	4a 24       	lddpc	r4,800055d8 <_malloc_trim_r+0x90>
80005554:	68 28       	ld.w	r8,r4[0x8]
80005556:	70 16       	ld.w	r6,r8[0x4]
80005558:	e0 16 ff fc 	andl	r6,0xfffc
8000555c:	ec c8 ff 91 	sub	r8,r6,-111
80005560:	f0 05 01 05 	sub	r5,r8,r5
80005564:	e0 15 ff 80 	andl	r5,0xff80
80005568:	ea c5 00 80 	sub	r5,r5,128
8000556c:	e0 45 00 7f 	cp.w	r5,127
80005570:	e0 8a 00 23 	brle	800055b6 <_malloc_trim_r+0x6e>
80005574:	30 0b       	mov	r11,0
80005576:	0e 9c       	mov	r12,r7
80005578:	fe b0 fd 0c 	rcall	80004f90 <_sbrk_r>
8000557c:	68 28       	ld.w	r8,r4[0x8]
8000557e:	0c 08       	add	r8,r6
80005580:	10 3c       	cp.w	r12,r8
80005582:	c1 a1       	brne	800055b6 <_malloc_trim_r+0x6e>
80005584:	ea 0b 11 00 	rsub	r11,r5,0
80005588:	0e 9c       	mov	r12,r7
8000558a:	fe b0 fd 03 	rcall	80004f90 <_sbrk_r>
8000558e:	5b fc       	cp.w	r12,-1
80005590:	c1 71       	brne	800055be <_malloc_trim_r+0x76>
80005592:	30 0b       	mov	r11,0
80005594:	0e 9c       	mov	r12,r7
80005596:	fe b0 fc fd 	rcall	80004f90 <_sbrk_r>
8000559a:	68 28       	ld.w	r8,r4[0x8]
8000559c:	f8 08 01 09 	sub	r9,r12,r8
800055a0:	58 f9       	cp.w	r9,15
800055a2:	e0 8a 00 0a 	brle	800055b6 <_malloc_trim_r+0x6e>
800055a6:	a1 a9       	sbr	r9,0x0
800055a8:	91 19       	st.w	r8[0x4],r9
800055aa:	48 d8       	lddpc	r8,800055dc <_malloc_trim_r+0x94>
800055ac:	70 09       	ld.w	r9,r8[0x0]
800055ae:	48 d8       	lddpc	r8,800055e0 <_malloc_trim_r+0x98>
800055b0:	f8 09 01 09 	sub	r9,r12,r9
800055b4:	91 09       	st.w	r8[0x0],r9
800055b6:	0e 9c       	mov	r12,r7
800055b8:	fe b0 f6 9c 	rcall	800042f0 <__malloc_unlock>
800055bc:	d8 2a       	popm	r4-r7,pc,r12=0
800055be:	68 28       	ld.w	r8,r4[0x8]
800055c0:	0a 16       	sub	r6,r5
800055c2:	a1 a6       	sbr	r6,0x0
800055c4:	91 16       	st.w	r8[0x4],r6
800055c6:	48 78       	lddpc	r8,800055e0 <_malloc_trim_r+0x98>
800055c8:	70 09       	ld.w	r9,r8[0x0]
800055ca:	0a 19       	sub	r9,r5
800055cc:	0e 9c       	mov	r12,r7
800055ce:	91 09       	st.w	r8[0x0],r9
800055d0:	fe b0 f6 90 	rcall	800042f0 <__malloc_unlock>
800055d4:	da 2a       	popm	r4-r7,pc,r12=1
800055d6:	d7 03       	nop
800055d8:	00 00       	add	r0,r0
800055da:	01 e4       	ld.ub	r4,r0[0x6]
800055dc:	00 00       	add	r0,r0
800055de:	05 f0       	ld.ub	r0,r2[0x7]
800055e0:	00 00       	add	r0,r0
800055e2:	09 e4       	ld.ub	r4,r4[0x6]

800055e4 <_free_r>:
800055e4:	d4 21       	pushm	r4-r7,lr
800055e6:	16 96       	mov	r6,r11
800055e8:	18 97       	mov	r7,r12
800055ea:	58 0b       	cp.w	r11,0
800055ec:	e0 80 00 c2 	breq	80005770 <_free_r+0x18c>
800055f0:	fe b0 f6 7a 	rcall	800042e4 <__malloc_lock>
800055f4:	20 86       	sub	r6,8
800055f6:	4c ba       	lddpc	r10,80005720 <_free_r+0x13c>
800055f8:	6c 18       	ld.w	r8,r6[0x4]
800055fa:	74 2e       	ld.w	lr,r10[0x8]
800055fc:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80005600:	a1 c8       	cbr	r8,0x0
80005602:	ec 08 00 09 	add	r9,r6,r8
80005606:	72 1b       	ld.w	r11,r9[0x4]
80005608:	e0 1b ff fc 	andl	r11,0xfffc
8000560c:	1c 39       	cp.w	r9,lr
8000560e:	c1 c1       	brne	80005646 <_free_r+0x62>
80005610:	f6 08 00 08 	add	r8,r11,r8
80005614:	58 0c       	cp.w	r12,0
80005616:	c0 81       	brne	80005626 <_free_r+0x42>
80005618:	6c 09       	ld.w	r9,r6[0x0]
8000561a:	12 16       	sub	r6,r9
8000561c:	12 08       	add	r8,r9
8000561e:	6c 3b       	ld.w	r11,r6[0xc]
80005620:	6c 29       	ld.w	r9,r6[0x8]
80005622:	97 29       	st.w	r11[0x8],r9
80005624:	93 3b       	st.w	r9[0xc],r11
80005626:	10 99       	mov	r9,r8
80005628:	95 26       	st.w	r10[0x8],r6
8000562a:	a1 a9       	sbr	r9,0x0
8000562c:	8d 19       	st.w	r6[0x4],r9
8000562e:	4b e9       	lddpc	r9,80005724 <_free_r+0x140>
80005630:	72 09       	ld.w	r9,r9[0x0]
80005632:	12 38       	cp.w	r8,r9
80005634:	c0 53       	brcs	8000563e <_free_r+0x5a>
80005636:	4b d8       	lddpc	r8,80005728 <_free_r+0x144>
80005638:	0e 9c       	mov	r12,r7
8000563a:	70 0b       	ld.w	r11,r8[0x0]
8000563c:	c8 6f       	rcall	80005548 <_malloc_trim_r>
8000563e:	0e 9c       	mov	r12,r7
80005640:	fe b0 f6 58 	rcall	800042f0 <__malloc_unlock>
80005644:	d8 22       	popm	r4-r7,pc
80005646:	93 1b       	st.w	r9[0x4],r11
80005648:	58 0c       	cp.w	r12,0
8000564a:	c0 30       	breq	80005650 <_free_r+0x6c>
8000564c:	30 0c       	mov	r12,0
8000564e:	c1 08       	rjmp	8000566e <_free_r+0x8a>
80005650:	6c 0e       	ld.w	lr,r6[0x0]
80005652:	f4 c5 ff f8 	sub	r5,r10,-8
80005656:	1c 16       	sub	r6,lr
80005658:	1c 08       	add	r8,lr
8000565a:	6c 2e       	ld.w	lr,r6[0x8]
8000565c:	0a 3e       	cp.w	lr,r5
8000565e:	f9 bc 00 01 	moveq	r12,1
80005662:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80005666:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000566a:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000566e:	f2 0b 00 0e 	add	lr,r9,r11
80005672:	7c 1e       	ld.w	lr,lr[0x4]
80005674:	ed be 00 00 	bld	lr,0x0
80005678:	c1 30       	breq	8000569e <_free_r+0xba>
8000567a:	16 08       	add	r8,r11
8000567c:	58 0c       	cp.w	r12,0
8000567e:	c0 c1       	brne	80005696 <_free_r+0xb2>
80005680:	4a 8e       	lddpc	lr,80005720 <_free_r+0x13c>
80005682:	72 2b       	ld.w	r11,r9[0x8]
80005684:	2f 8e       	sub	lr,-8
80005686:	1c 3b       	cp.w	r11,lr
80005688:	c0 71       	brne	80005696 <_free_r+0xb2>
8000568a:	97 36       	st.w	r11[0xc],r6
8000568c:	97 26       	st.w	r11[0x8],r6
8000568e:	8d 2b       	st.w	r6[0x8],r11
80005690:	8d 3b       	st.w	r6[0xc],r11
80005692:	30 1c       	mov	r12,1
80005694:	c0 58       	rjmp	8000569e <_free_r+0xba>
80005696:	72 2b       	ld.w	r11,r9[0x8]
80005698:	72 39       	ld.w	r9,r9[0xc]
8000569a:	93 2b       	st.w	r9[0x8],r11
8000569c:	97 39       	st.w	r11[0xc],r9
8000569e:	10 99       	mov	r9,r8
800056a0:	ec 08 09 08 	st.w	r6[r8],r8
800056a4:	a1 a9       	sbr	r9,0x0
800056a6:	8d 19       	st.w	r6[0x4],r9
800056a8:	58 0c       	cp.w	r12,0
800056aa:	c6 01       	brne	8000576a <_free_r+0x186>
800056ac:	e0 48 01 ff 	cp.w	r8,511
800056b0:	e0 8b 00 13 	brhi	800056d6 <_free_r+0xf2>
800056b4:	a3 98       	lsr	r8,0x3
800056b6:	f4 08 00 39 	add	r9,r10,r8<<0x3
800056ba:	72 2b       	ld.w	r11,r9[0x8]
800056bc:	8d 39       	st.w	r6[0xc],r9
800056be:	8d 2b       	st.w	r6[0x8],r11
800056c0:	97 36       	st.w	r11[0xc],r6
800056c2:	93 26       	st.w	r9[0x8],r6
800056c4:	a3 48       	asr	r8,0x2
800056c6:	74 19       	ld.w	r9,r10[0x4]
800056c8:	30 1b       	mov	r11,1
800056ca:	f6 08 09 48 	lsl	r8,r11,r8
800056ce:	f3 e8 10 08 	or	r8,r9,r8
800056d2:	95 18       	st.w	r10[0x4],r8
800056d4:	c4 b8       	rjmp	8000576a <_free_r+0x186>
800056d6:	f0 0b 16 09 	lsr	r11,r8,0x9
800056da:	58 4b       	cp.w	r11,4
800056dc:	e0 8b 00 06 	brhi	800056e8 <_free_r+0x104>
800056e0:	f0 0b 16 06 	lsr	r11,r8,0x6
800056e4:	2c 8b       	sub	r11,-56
800056e6:	c2 68       	rjmp	80005732 <_free_r+0x14e>
800056e8:	59 4b       	cp.w	r11,20
800056ea:	e0 8b 00 04 	brhi	800056f2 <_free_r+0x10e>
800056ee:	2a 5b       	sub	r11,-91
800056f0:	c2 18       	rjmp	80005732 <_free_r+0x14e>
800056f2:	e0 4b 00 54 	cp.w	r11,84
800056f6:	e0 8b 00 06 	brhi	80005702 <_free_r+0x11e>
800056fa:	f0 0b 16 0c 	lsr	r11,r8,0xc
800056fe:	29 2b       	sub	r11,-110
80005700:	c1 98       	rjmp	80005732 <_free_r+0x14e>
80005702:	e0 4b 01 54 	cp.w	r11,340
80005706:	e0 8b 00 06 	brhi	80005712 <_free_r+0x12e>
8000570a:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000570e:	28 9b       	sub	r11,-119
80005710:	c1 18       	rjmp	80005732 <_free_r+0x14e>
80005712:	e0 4b 05 54 	cp.w	r11,1364
80005716:	e0 88 00 0b 	brls	8000572c <_free_r+0x148>
8000571a:	37 eb       	mov	r11,126
8000571c:	c0 b8       	rjmp	80005732 <_free_r+0x14e>
8000571e:	d7 03       	nop
80005720:	00 00       	add	r0,r0
80005722:	01 e4       	ld.ub	r4,r0[0x6]
80005724:	00 00       	add	r0,r0
80005726:	05 ec       	ld.ub	r12,r2[0x6]
80005728:	00 00       	add	r0,r0
8000572a:	09 e0       	ld.ub	r0,r4[0x6]
8000572c:	f0 0b 16 12 	lsr	r11,r8,0x12
80005730:	28 4b       	sub	r11,-124
80005732:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80005736:	78 29       	ld.w	r9,r12[0x8]
80005738:	18 39       	cp.w	r9,r12
8000573a:	c0 e1       	brne	80005756 <_free_r+0x172>
8000573c:	74 18       	ld.w	r8,r10[0x4]
8000573e:	a3 4b       	asr	r11,0x2
80005740:	30 1c       	mov	r12,1
80005742:	f8 0b 09 4b 	lsl	r11,r12,r11
80005746:	f1 eb 10 0b 	or	r11,r8,r11
8000574a:	12 98       	mov	r8,r9
8000574c:	95 1b       	st.w	r10[0x4],r11
8000574e:	c0 a8       	rjmp	80005762 <_free_r+0x17e>
80005750:	72 29       	ld.w	r9,r9[0x8]
80005752:	18 39       	cp.w	r9,r12
80005754:	c0 60       	breq	80005760 <_free_r+0x17c>
80005756:	72 1a       	ld.w	r10,r9[0x4]
80005758:	e0 1a ff fc 	andl	r10,0xfffc
8000575c:	14 38       	cp.w	r8,r10
8000575e:	cf 93       	brcs	80005750 <_free_r+0x16c>
80005760:	72 38       	ld.w	r8,r9[0xc]
80005762:	8d 38       	st.w	r6[0xc],r8
80005764:	8d 29       	st.w	r6[0x8],r9
80005766:	93 36       	st.w	r9[0xc],r6
80005768:	91 26       	st.w	r8[0x8],r6
8000576a:	0e 9c       	mov	r12,r7
8000576c:	fe b0 f5 c2 	rcall	800042f0 <__malloc_unlock>
80005770:	d8 22       	popm	r4-r7,pc
80005772:	d7 03       	nop

80005774 <_fwalk>:
80005774:	d4 31       	pushm	r0-r7,lr
80005776:	30 05       	mov	r5,0
80005778:	16 91       	mov	r1,r11
8000577a:	f8 c7 ff 28 	sub	r7,r12,-216
8000577e:	0a 92       	mov	r2,r5
80005780:	c4 2e       	rcall	80005404 <__sfp_lock_acquire>
80005782:	3f f3       	mov	r3,-1
80005784:	c1 68       	rjmp	800057b0 <_fwalk+0x3c>
80005786:	6e 26       	ld.w	r6,r7[0x8]
80005788:	6e 14       	ld.w	r4,r7[0x4]
8000578a:	2f 46       	sub	r6,-12
8000578c:	c0 c8       	rjmp	800057a4 <_fwalk+0x30>
8000578e:	8c 08       	ld.sh	r8,r6[0x0]
80005790:	e4 08 19 00 	cp.h	r8,r2
80005794:	c0 70       	breq	800057a2 <_fwalk+0x2e>
80005796:	8c 18       	ld.sh	r8,r6[0x2]
80005798:	e6 08 19 00 	cp.h	r8,r3
8000579c:	c0 30       	breq	800057a2 <_fwalk+0x2e>
8000579e:	5d 11       	icall	r1
800057a0:	18 45       	or	r5,r12
800057a2:	2a 46       	sub	r6,-92
800057a4:	20 14       	sub	r4,1
800057a6:	ec cc 00 0c 	sub	r12,r6,12
800057aa:	58 04       	cp.w	r4,0
800057ac:	cf 14       	brge	8000578e <_fwalk+0x1a>
800057ae:	6e 07       	ld.w	r7,r7[0x0]
800057b0:	58 07       	cp.w	r7,0
800057b2:	ce a1       	brne	80005786 <_fwalk+0x12>
800057b4:	c2 9e       	rcall	80005406 <__sfp_lock_release>
800057b6:	0a 9c       	mov	r12,r5
800057b8:	d8 32       	popm	r0-r7,pc
800057ba:	d7 03       	nop

800057bc <__sclose>:
800057bc:	d4 01       	pushm	lr
800057be:	96 7b       	ld.sh	r11,r11[0xe]
800057c0:	c4 ac       	rcall	80005854 <_close_r>
800057c2:	d8 02       	popm	pc

800057c4 <__sseek>:
800057c4:	d4 21       	pushm	r4-r7,lr
800057c6:	16 97       	mov	r7,r11
800057c8:	96 7b       	ld.sh	r11,r11[0xe]
800057ca:	cb 9c       	rcall	8000593c <_lseek_r>
800057cc:	8e 68       	ld.sh	r8,r7[0xc]
800057ce:	10 99       	mov	r9,r8
800057d0:	ad c8       	cbr	r8,0xc
800057d2:	ad a9       	sbr	r9,0xc
800057d4:	5b fc       	cp.w	r12,-1
800057d6:	ef f8 0c 06 	st.heq	r7[0xc],r8
800057da:	ef f9 1c 06 	st.hne	r7[0xc],r9
800057de:	ef fc 1a 15 	st.wne	r7[0x54],r12
800057e2:	d8 22       	popm	r4-r7,pc

800057e4 <__swrite>:
800057e4:	d4 21       	pushm	r4-r7,lr
800057e6:	96 68       	ld.sh	r8,r11[0xc]
800057e8:	16 97       	mov	r7,r11
800057ea:	14 95       	mov	r5,r10
800057ec:	12 94       	mov	r4,r9
800057ee:	e2 18 01 00 	andl	r8,0x100,COH
800057f2:	18 96       	mov	r6,r12
800057f4:	c0 50       	breq	800057fe <__swrite+0x1a>
800057f6:	30 29       	mov	r9,2
800057f8:	30 0a       	mov	r10,0
800057fa:	96 7b       	ld.sh	r11,r11[0xe]
800057fc:	ca 0c       	rcall	8000593c <_lseek_r>
800057fe:	8e 68       	ld.sh	r8,r7[0xc]
80005800:	ad c8       	cbr	r8,0xc
80005802:	08 99       	mov	r9,r4
80005804:	0a 9a       	mov	r10,r5
80005806:	8e 7b       	ld.sh	r11,r7[0xe]
80005808:	0c 9c       	mov	r12,r6
8000580a:	ae 68       	st.h	r7[0xc],r8
8000580c:	c1 0c       	rcall	8000582c <_write_r>
8000580e:	d8 22       	popm	r4-r7,pc

80005810 <__sread>:
80005810:	d4 21       	pushm	r4-r7,lr
80005812:	16 97       	mov	r7,r11
80005814:	96 7b       	ld.sh	r11,r11[0xe]
80005816:	ca 7c       	rcall	80005964 <_read_r>
80005818:	c0 65       	brlt	80005824 <__sread+0x14>
8000581a:	6f 58       	ld.w	r8,r7[0x54]
8000581c:	18 08       	add	r8,r12
8000581e:	ef 48 00 54 	st.w	r7[84],r8
80005822:	d8 22       	popm	r4-r7,pc
80005824:	8e 68       	ld.sh	r8,r7[0xc]
80005826:	ad c8       	cbr	r8,0xc
80005828:	ae 68       	st.h	r7[0xc],r8
8000582a:	d8 22       	popm	r4-r7,pc

8000582c <_write_r>:
8000582c:	d4 21       	pushm	r4-r7,lr
8000582e:	16 98       	mov	r8,r11
80005830:	18 97       	mov	r7,r12
80005832:	10 9c       	mov	r12,r8
80005834:	30 08       	mov	r8,0
80005836:	14 9b       	mov	r11,r10
80005838:	48 66       	lddpc	r6,80005850 <_write_r+0x24>
8000583a:	12 9a       	mov	r10,r9
8000583c:	8d 08       	st.w	r6[0x0],r8
8000583e:	fe b0 f3 c7 	rcall	80003fcc <_write>
80005842:	5b fc       	cp.w	r12,-1
80005844:	c0 51       	brne	8000584e <_write_r+0x22>
80005846:	6c 08       	ld.w	r8,r6[0x0]
80005848:	58 08       	cp.w	r8,0
8000584a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000584e:	d8 22       	popm	r4-r7,pc
80005850:	00 00       	add	r0,r0
80005852:	0a 3c       	cp.w	r12,r5

80005854 <_close_r>:
80005854:	d4 21       	pushm	r4-r7,lr
80005856:	30 08       	mov	r8,0
80005858:	18 97       	mov	r7,r12
8000585a:	48 76       	lddpc	r6,80005874 <_close_r+0x20>
8000585c:	16 9c       	mov	r12,r11
8000585e:	8d 08       	st.w	r6[0x0],r8
80005860:	fe b0 fc 52 	rcall	80005104 <_close>
80005864:	5b fc       	cp.w	r12,-1
80005866:	c0 51       	brne	80005870 <_close_r+0x1c>
80005868:	6c 08       	ld.w	r8,r6[0x0]
8000586a:	58 08       	cp.w	r8,0
8000586c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005870:	d8 22       	popm	r4-r7,pc
80005872:	d7 03       	nop
80005874:	00 00       	add	r0,r0
80005876:	0a 3c       	cp.w	r12,r5

80005878 <_fclose_r>:
80005878:	d4 21       	pushm	r4-r7,lr
8000587a:	18 96       	mov	r6,r12
8000587c:	16 97       	mov	r7,r11
8000587e:	58 0b       	cp.w	r11,0
80005880:	c0 31       	brne	80005886 <_fclose_r+0xe>
80005882:	16 95       	mov	r5,r11
80005884:	c4 c8       	rjmp	8000591c <_fclose_r+0xa4>
80005886:	fe b0 fd bf 	rcall	80005404 <__sfp_lock_acquire>
8000588a:	58 06       	cp.w	r6,0
8000588c:	c0 60       	breq	80005898 <_fclose_r+0x20>
8000588e:	6c 68       	ld.w	r8,r6[0x18]
80005890:	58 08       	cp.w	r8,0
80005892:	c0 31       	brne	80005898 <_fclose_r+0x20>
80005894:	0c 9c       	mov	r12,r6
80005896:	c0 be       	rcall	800054ac <__sinit>
80005898:	4a 28       	lddpc	r8,80005920 <_fclose_r+0xa8>
8000589a:	10 37       	cp.w	r7,r8
8000589c:	c0 31       	brne	800058a2 <_fclose_r+0x2a>
8000589e:	6c 07       	ld.w	r7,r6[0x0]
800058a0:	c0 a8       	rjmp	800058b4 <_fclose_r+0x3c>
800058a2:	4a 18       	lddpc	r8,80005924 <_fclose_r+0xac>
800058a4:	10 37       	cp.w	r7,r8
800058a6:	c0 31       	brne	800058ac <_fclose_r+0x34>
800058a8:	6c 17       	ld.w	r7,r6[0x4]
800058aa:	c0 58       	rjmp	800058b4 <_fclose_r+0x3c>
800058ac:	49 f8       	lddpc	r8,80005928 <_fclose_r+0xb0>
800058ae:	10 37       	cp.w	r7,r8
800058b0:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800058b4:	8e 69       	ld.sh	r9,r7[0xc]
800058b6:	30 08       	mov	r8,0
800058b8:	f0 09 19 00 	cp.h	r9,r8
800058bc:	c0 51       	brne	800058c6 <_fclose_r+0x4e>
800058be:	fe b0 fd a4 	rcall	80005406 <__sfp_lock_release>
800058c2:	30 05       	mov	r5,0
800058c4:	c2 c8       	rjmp	8000591c <_fclose_r+0xa4>
800058c6:	0e 9b       	mov	r11,r7
800058c8:	0c 9c       	mov	r12,r6
800058ca:	fe b0 fd 15 	rcall	800052f4 <_fflush_r>
800058ce:	6e c8       	ld.w	r8,r7[0x30]
800058d0:	18 95       	mov	r5,r12
800058d2:	58 08       	cp.w	r8,0
800058d4:	c0 60       	breq	800058e0 <_fclose_r+0x68>
800058d6:	6e 8b       	ld.w	r11,r7[0x20]
800058d8:	0c 9c       	mov	r12,r6
800058da:	5d 18       	icall	r8
800058dc:	f9 b5 05 ff 	movlt	r5,-1
800058e0:	8e 68       	ld.sh	r8,r7[0xc]
800058e2:	ed b8 00 07 	bld	r8,0x7
800058e6:	c0 41       	brne	800058ee <_fclose_r+0x76>
800058e8:	6e 4b       	ld.w	r11,r7[0x10]
800058ea:	0c 9c       	mov	r12,r6
800058ec:	c7 ce       	rcall	800055e4 <_free_r>
800058ee:	6e db       	ld.w	r11,r7[0x34]
800058f0:	58 0b       	cp.w	r11,0
800058f2:	c0 90       	breq	80005904 <_fclose_r+0x8c>
800058f4:	ee c8 ff bc 	sub	r8,r7,-68
800058f8:	10 3b       	cp.w	r11,r8
800058fa:	c0 30       	breq	80005900 <_fclose_r+0x88>
800058fc:	0c 9c       	mov	r12,r6
800058fe:	c7 3e       	rcall	800055e4 <_free_r>
80005900:	30 08       	mov	r8,0
80005902:	8f d8       	st.w	r7[0x34],r8
80005904:	6f 2b       	ld.w	r11,r7[0x48]
80005906:	58 0b       	cp.w	r11,0
80005908:	c0 60       	breq	80005914 <_fclose_r+0x9c>
8000590a:	0c 9c       	mov	r12,r6
8000590c:	c6 ce       	rcall	800055e4 <_free_r>
8000590e:	30 08       	mov	r8,0
80005910:	ef 48 00 48 	st.w	r7[72],r8
80005914:	30 08       	mov	r8,0
80005916:	ae 68       	st.h	r7[0xc],r8
80005918:	fe b0 fd 77 	rcall	80005406 <__sfp_lock_release>
8000591c:	0a 9c       	mov	r12,r5
8000591e:	d8 22       	popm	r4-r7,pc
80005920:	80 00       	ld.sh	r0,r0[0x0]
80005922:	5d 1c       	icall	r12
80005924:	80 00       	ld.sh	r0,r0[0x0]
80005926:	5d 3c       	musfr	r12
80005928:	80 00       	ld.sh	r0,r0[0x0]
8000592a:	5d 5c       	*unknown*

8000592c <fclose>:
8000592c:	d4 01       	pushm	lr
8000592e:	48 38       	lddpc	r8,80005938 <fclose+0xc>
80005930:	18 9b       	mov	r11,r12
80005932:	70 0c       	ld.w	r12,r8[0x0]
80005934:	ca 2f       	rcall	80005878 <_fclose_r>
80005936:	d8 02       	popm	pc
80005938:	00 00       	add	r0,r0
8000593a:	01 e0       	ld.ub	r0,r0[0x6]

8000593c <_lseek_r>:
8000593c:	d4 21       	pushm	r4-r7,lr
8000593e:	16 98       	mov	r8,r11
80005940:	18 97       	mov	r7,r12
80005942:	10 9c       	mov	r12,r8
80005944:	30 08       	mov	r8,0
80005946:	14 9b       	mov	r11,r10
80005948:	48 66       	lddpc	r6,80005960 <_lseek_r+0x24>
8000594a:	12 9a       	mov	r10,r9
8000594c:	8d 08       	st.w	r6[0x0],r8
8000594e:	fe b0 fb e7 	rcall	8000511c <_lseek>
80005952:	5b fc       	cp.w	r12,-1
80005954:	c0 51       	brne	8000595e <_lseek_r+0x22>
80005956:	6c 08       	ld.w	r8,r6[0x0]
80005958:	58 08       	cp.w	r8,0
8000595a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000595e:	d8 22       	popm	r4-r7,pc
80005960:	00 00       	add	r0,r0
80005962:	0a 3c       	cp.w	r12,r5

80005964 <_read_r>:
80005964:	d4 21       	pushm	r4-r7,lr
80005966:	16 98       	mov	r8,r11
80005968:	18 97       	mov	r7,r12
8000596a:	10 9c       	mov	r12,r8
8000596c:	30 08       	mov	r8,0
8000596e:	14 9b       	mov	r11,r10
80005970:	48 66       	lddpc	r6,80005988 <_read_r+0x24>
80005972:	12 9a       	mov	r10,r9
80005974:	8d 08       	st.w	r6[0x0],r8
80005976:	fe b0 f2 9d 	rcall	80003eb0 <_read>
8000597a:	5b fc       	cp.w	r12,-1
8000597c:	c0 51       	brne	80005986 <_read_r+0x22>
8000597e:	6c 08       	ld.w	r8,r6[0x0]
80005980:	58 08       	cp.w	r8,0
80005982:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005986:	d8 22       	popm	r4-r7,pc
80005988:	00 00       	add	r0,r0
8000598a:	0a 3c       	cp.w	r12,r5

8000598c <__do_global_ctors_aux>:
8000598c:	d4 21       	pushm	r4-r7,lr
8000598e:	48 57       	lddpc	r7,800059a0 <__do_global_ctors_aux+0x14>
80005990:	c0 28       	rjmp	80005994 <__do_global_ctors_aux+0x8>
80005992:	5d 18       	icall	r8
80005994:	20 47       	sub	r7,4
80005996:	6e 08       	ld.w	r8,r7[0x0]
80005998:	5b f8       	cp.w	r8,-1
8000599a:	cf c1       	brne	80005992 <__do_global_ctors_aux+0x6>
8000599c:	d8 22       	popm	r4-r7,pc
8000599e:	d7 03       	nop
800059a0:	00 00       	add	r0,r0
800059a2:	00 0c       	add	r12,r0

Disassembly of section .exception:

80005a00 <_evba>:
80005a00:	c0 08       	rjmp	80005a00 <_evba>
	...

80005a04 <_handle_TLB_Multiple_Hit>:
80005a04:	c0 08       	rjmp	80005a04 <_handle_TLB_Multiple_Hit>
	...

80005a08 <_handle_Bus_Error_Data_Fetch>:
80005a08:	c0 08       	rjmp	80005a08 <_handle_Bus_Error_Data_Fetch>
	...

80005a0c <_handle_Bus_Error_Instruction_Fetch>:
80005a0c:	c0 08       	rjmp	80005a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80005a10 <_handle_NMI>:
80005a10:	c0 08       	rjmp	80005a10 <_handle_NMI>
	...

80005a14 <_handle_Instruction_Address>:
80005a14:	c0 08       	rjmp	80005a14 <_handle_Instruction_Address>
	...

80005a18 <_handle_ITLB_Protection>:
80005a18:	c0 08       	rjmp	80005a18 <_handle_ITLB_Protection>
	...

80005a1c <_handle_Breakpoint>:
80005a1c:	c0 08       	rjmp	80005a1c <_handle_Breakpoint>
	...

80005a20 <_handle_Illegal_Opcode>:
80005a20:	c0 08       	rjmp	80005a20 <_handle_Illegal_Opcode>
	...

80005a24 <_handle_Unimplemented_Instruction>:
80005a24:	c0 08       	rjmp	80005a24 <_handle_Unimplemented_Instruction>
	...

80005a28 <_handle_Privilege_Violation>:
80005a28:	c0 08       	rjmp	80005a28 <_handle_Privilege_Violation>
	...

80005a2c <_handle_Floating_Point>:
80005a2c:	c0 08       	rjmp	80005a2c <_handle_Floating_Point>
	...

80005a30 <_handle_Coprocessor_Absent>:
80005a30:	c0 08       	rjmp	80005a30 <_handle_Coprocessor_Absent>
	...

80005a34 <_handle_Data_Address_Read>:
80005a34:	c0 08       	rjmp	80005a34 <_handle_Data_Address_Read>
	...

80005a38 <_handle_Data_Address_Write>:
80005a38:	c0 08       	rjmp	80005a38 <_handle_Data_Address_Write>
	...

80005a3c <_handle_DTLB_Protection_Read>:
80005a3c:	c0 08       	rjmp	80005a3c <_handle_DTLB_Protection_Read>
	...

80005a40 <_handle_DTLB_Protection_Write>:
80005a40:	c0 08       	rjmp	80005a40 <_handle_DTLB_Protection_Write>
	...

80005a44 <_handle_DTLB_Modified>:
80005a44:	c0 08       	rjmp	80005a44 <_handle_DTLB_Modified>
	...

80005a50 <_handle_ITLB_Miss>:
80005a50:	c0 08       	rjmp	80005a50 <_handle_ITLB_Miss>
	...

80005a60 <_handle_DTLB_Miss_Read>:
80005a60:	c0 08       	rjmp	80005a60 <_handle_DTLB_Miss_Read>
	...

80005a70 <_handle_DTLB_Miss_Write>:
80005a70:	c0 08       	rjmp	80005a70 <_handle_DTLB_Miss_Write>
	...

80005b00 <_handle_Supervisor_Call>:
80005b00:	fe cf 19 64 	sub	pc,pc,6500

80005b04 <_int0>:
80005b04:	30 0c       	mov	r12,0
80005b06:	fe b0 e3 cb 	rcall	8000229c <_get_interrupt_handler>
80005b0a:	58 0c       	cp.w	r12,0
80005b0c:	f8 0f 17 10 	movne	pc,r12
80005b10:	d6 03       	rete

80005b12 <_int1>:
80005b12:	30 1c       	mov	r12,1
80005b14:	fe b0 e3 c4 	rcall	8000229c <_get_interrupt_handler>
80005b18:	58 0c       	cp.w	r12,0
80005b1a:	f8 0f 17 10 	movne	pc,r12
80005b1e:	d6 03       	rete

80005b20 <_int2>:
80005b20:	30 2c       	mov	r12,2
80005b22:	fe b0 e3 bd 	rcall	8000229c <_get_interrupt_handler>
80005b26:	58 0c       	cp.w	r12,0
80005b28:	f8 0f 17 10 	movne	pc,r12
80005b2c:	d6 03       	rete

80005b2e <_int3>:
80005b2e:	30 3c       	mov	r12,3
80005b30:	fe b0 e3 b6 	rcall	8000229c <_get_interrupt_handler>
80005b34:	58 0c       	cp.w	r12,0
80005b36:	f8 0f 17 10 	movne	pc,r12
80005b3a:	d6 03       	rete

80005b3c <ipr_val>:
80005b3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
80005b4c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b5c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b6c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b7c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b8c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b9c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bbc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bcc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bdc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bfc:	d7 03 d7 03                                         ....

Disassembly of section .fini:

80005c00 <_fini>:
80005c00:	eb cd 40 40 	pushm	r6,lr
80005c04:	48 26       	lddpc	r6,80005c0c <_fini+0xc>
80005c06:	1e 26       	rsub	r6,pc
80005c08:	c0 48       	rjmp	80005c10 <_fini+0x10>
80005c0a:	d7 03       	nop
80005c0c:	80 00       	ld.sh	r0,r0[0x0]
80005c0e:	5b ea       	cp.w	r10,-2
80005c10:	fe b0 e2 3c 	rcall	80002088 <__do_global_dtors_aux>
80005c14:	e3 cd 80 40 	ldm	sp++,r6,pc
